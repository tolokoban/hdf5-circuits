/*! For license information please see 515.3725201fe27558f536c8.js.LICENSE.txt */
(self.webpackChunkhdf5_circuits=self.webpackChunkhdf5_circuits||[]).push([[515],{114:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,'.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q {\n    all: inherit;\n    display: grid;\n    grid-template-columns: auto minmax(0, 1fr);\n    grid-auto-columns: auto;\n    place-items: center stretch;\n    gap: 0.5em;\n    cursor: pointer;\n    padding: 0;\n    margin: 0;\n    height: 2em;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ {\n    position: relative;\n    width: 34px;\n    height: 20px;\n    overflow: visible;\n    flex-grow: 0;\n    margin: 0.125rem;\n    order: 0;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_bar_O5st2Q {\n    content: ".";\n    font-size: 0;\n    position: absolute;\n    left: 0;\n    top: 3px;\n    width: 34px;\n    height: 14px;\n    border-radius: 7px;\n    box-shadow: var(--theme-shadow-1);\n    background-color: var(--theme-color-primary-7);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_bar_O5st2Q,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_btn_NlZy3y {\n    filter: grayscale(100%);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ok_q0iSOM > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_bar_O5st2Q,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ok_q0iSOM > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_btn_NlZy3y {\n    filter: none;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_btn_NlZy3y {\n    content: ".";\n    font-size: 0;\n    position: absolute;\n    left: 0;\n    top: 0;\n    margin: 0;\n    width: 20px;\n    height: 20px;\n    border-radius: 10px;\n    transform: translateX(0);\n    transition: transform 0.2s, opacity 0.2s;\n    box-shadow: var(--theme-shadow-2);\n    background-color: var(--theme-color-primary-4);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_ok_q0iSOM > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ > div.node_modules-\\@tolokoban-ui-lib-dist-view-Switch-Switch-module_btn_NlZy3y {\n    transform: translateX(14px);\n}\n',"",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Switch/Switch.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,0CAA0C;IAC1C,uBAAuB;IACvB,2BAA2B;IAC3B,UAAU;IACV,eAAe;IACf,UAAU;IACV,SAAS;IACT,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,YAAY;IACZ,gBAAgB;IAChB,QAAQ;AACZ;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,OAAO;IACP,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,iCAAiC;IACjC,8CAA8C;AAClD;;AAEA;;IAEI,uBAAuB;AAC3B;;AAEA;;IAEI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,SAAS;IACT,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,wBAAwB;IACxB,wCAAwC;IACxC,iCAAiC;IACjC,8CAA8C;AAClD;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:['.ViewSwitch {\n    all: inherit;\n    display: grid;\n    grid-template-columns: auto minmax(0, 1fr);\n    grid-auto-columns: auto;\n    place-items: center stretch;\n    gap: 0.5em;\n    cursor: pointer;\n    padding: 0;\n    margin: 0;\n    height: 2em;\n}\n\n.ViewSwitch > div.pin {\n    position: relative;\n    width: 34px;\n    height: 20px;\n    overflow: visible;\n    flex-grow: 0;\n    margin: 0.125rem;\n    order: 0;\n}\n\n.ViewSwitch > div.pin > div.bar {\n    content: ".";\n    font-size: 0;\n    position: absolute;\n    left: 0;\n    top: 3px;\n    width: 34px;\n    height: 14px;\n    border-radius: 7px;\n    box-shadow: var(--theme-shadow-1);\n    background-color: var(--theme-color-primary-7);\n}\n\n.ViewSwitch > div.pin > div.bar,\n.ViewSwitch > div.pin > div.btn {\n    filter: grayscale(100%);\n}\n\n.ViewSwitch.ok > div.pin > div.bar,\n.ViewSwitch.ok > div.pin > div.btn {\n    filter: none;\n}\n\n.ViewSwitch > div.pin > div.btn {\n    content: ".";\n    font-size: 0;\n    position: absolute;\n    left: 0;\n    top: 0;\n    margin: 0;\n    width: 20px;\n    height: 20px;\n    border-radius: 10px;\n    transform: translateX(0);\n    transition: transform 0.2s, opacity 0.2s;\n    box-shadow: var(--theme-shadow-2);\n    background-color: var(--theme-color-primary-4);\n}\n\n.ViewSwitch.ok > div.pin > div.btn {\n    transform: translateX(14px);\n}\n'],sourceRoot:""}]),a.locals={ViewSwitch:"node_modules-@tolokoban-ui-lib-dist-view-Switch-Switch-module_ViewSwitch_wJu35Q",pin:"node_modules-@tolokoban-ui-lib-dist-view-Switch-Switch-module_pin_uAikQQ",bar:"node_modules-@tolokoban-ui-lib-dist-view-Switch-Switch-module_bar_O5st2Q",btn:"node_modules-@tolokoban-ui-lib-dist-view-Switch-Switch-module_btn_NlZy3y",ok:"node_modules-@tolokoban-ui-lib-dist-view-Switch-Switch-module_ok_q0iSOM"};const u=a},358:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,"div.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm {\n    display: grid;\n    grid-template-columns: 1fr min(50vw, 360px) min(50vw, 360px) 1fr;\n    justify-content: center;\n    align-items: stretch;\n}\n\ndiv.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm > * {\n    grid-column: 2/4;\n}\n\ndiv.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm > *.full {\n    grid-column: 1/5;\n}\n\ndiv.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm > *.left {\n    grid-column: 1/3;\n    place-content: start stretch;\n}\n\ndiv.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm > *.right {\n    grid-column: 3/5;\n    place-content: start stretch;\n}\n\n@media (max-width: 800px) {\n    div.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm > *,\n    div.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm > *.left,\n    div.node_modules-\\@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm > *.right {\n        grid-column: 1/5;\n    }\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Read/Read.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,gEAAgE;IAChE,uBAAuB;IACvB,oBAAoB;AACxB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,4BAA4B;AAChC;;AAEA;IACI;;;QAGI,gBAAgB;IACpB;AACJ",sourcesContent:["div.Read {\n    display: grid;\n    grid-template-columns: 1fr min(50vw, 360px) min(50vw, 360px) 1fr;\n    justify-content: center;\n    align-items: stretch;\n}\n\ndiv.Read > * {\n    grid-column: 2/4;\n}\n\ndiv.Read > :global(*.full) {\n    grid-column: 1/5;\n}\n\ndiv.Read > :global(*.left) {\n    grid-column: 1/3;\n    place-content: start stretch;\n}\n\ndiv.Read > :global(*.right) {\n    grid-column: 3/5;\n    place-content: start stretch;\n}\n\n@media (max-width: 800px) {\n    div.Read > *,\n    div.Read > :global(*.left),\n    div.Read > :global(*.right) {\n        grid-column: 1/5;\n    }\n}\n"],sourceRoot:""}]),a.locals={Read:"node_modules-@tolokoban-ui-lib-dist-view-Read-Read-module_Read_NfdVBm"};const u=a},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},1020:(e,t,n)=>{"use strict";var o=n(6540),r=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,u=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var o,i={},s=null,c=null;for(o in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,o)&&!l.hasOwnProperty(o)&&(i[o]=t[o]);if(e&&e.defaultProps)for(o in t=e.defaultProps)void 0===i[o]&&(i[o]=t[o]);return{$$typeof:r,type:e,key:s,ref:c,props:i,_owner:u.current}}t.Fragment=i,t.jsx=s,t.jsxs=s},1113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},1219:function(e){e.exports=function(){"use strict";function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t=e((function(e){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)})),n=e((function(e){var t=e.exports={version:"2.6.5"};"number"==typeof __e&&(__e=t)})),o=(n.version,function(e){return"object"==typeof e?null!==e:"function"==typeof e}),r=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e},i=function(e){try{return!!e()}catch(e){return!0}},a=!i((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})),u=t.document,l=o(u)&&o(u.createElement),s=!a&&!i((function(){return 7!=Object.defineProperty((e="div",l?u.createElement(e):{}),"a",{get:function(){return 7}}).a;var e})),c=Object.defineProperty,d={f:a?Object.defineProperty:function(e,t,n){if(r(e),t=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}(t,!0),r(n),s)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},f=a?function(e,t,n){return d.f(e,t,function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}(1,n))}:function(e,t,n){return e[t]=n,e},h={}.hasOwnProperty,m=function(e,t){return h.call(e,t)},A=0,p=Math.random(),C=e((function(e){var o="__core-js_shared__",r=t[o]||(t[o]={});(e.exports=function(e,t){return r[e]||(r[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})})),g=C("native-function-to-string",Function.toString),_=e((function(e){var o=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++A+p).toString(36))}("src"),r="toString",i=(""+g).split(r);n.inspectSource=function(e){return g.call(e)},(e.exports=function(e,n,r,a){var u="function"==typeof r;u&&(m(r,"name")||f(r,"name",n)),e[n]!==r&&(u&&(m(r,o)||f(r,o,e[n]?""+e[n]:i.join(String(n)))),e===t?e[n]=r:a?e[n]?e[n]=r:f(e,n,r):(delete e[n],f(e,n,r)))})(Function.prototype,r,(function(){return"function"==typeof this&&this[o]||g.call(this)}))})),b=function(e,t,n){if(function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!")}(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,r){return e.call(t,n,o,r)}}return function(){return e.apply(t,arguments)}},v="prototype",w=function(e,o,r){var i,a,u,l,s=e&w.F,c=e&w.G,d=e&w.S,h=e&w.P,m=e&w.B,A=c?t:d?t[o]||(t[o]={}):(t[o]||{})[v],p=c?n:n[o]||(n[o]={}),C=p[v]||(p[v]={});for(i in c&&(r=o),r)u=((a=!s&&A&&void 0!==A[i])?A:r)[i],l=m&&a?b(u,t):h&&"function"==typeof u?b(Function.call,u):u,A&&_(A,i,u,e&w.U),p[i]!=u&&f(p,i,l),h&&C[i]!=u&&(C[i]=u)};t.core=n,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128;var y=w,D=Math.ceil,k=Math.floor,B=function(e){return isNaN(e=+e)?0:(e>0?k:D)(e)},E=function(e,t){var n,o,r=String(function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}(e)),i=B(t),a=r.length;return i<0||i>=a?void 0:(n=r.charCodeAt(i))<55296||n>56319||i+1===a||(o=r.charCodeAt(i+1))<56320||o>57343?n:o-56320+(n-55296<<10)+65536};y(y.P,"String",{codePointAt:function(e){return E(this,e)}}),n.String.codePointAt;var I=Math.max,x=Math.min,L=String.fromCharCode,F=String.fromCodePoint;y(y.S+y.F*(!!F&&1!=F.length),"String",{fromCodePoint:function(e){for(var t,n=arguments,o=[],r=arguments.length,i=0;r>i;){if(t=+n[i++],u=1114111,((a=B(a=t))<0?I(a+u,0):x(a,u))!==t)throw RangeError(t+" is not a valid code point");o.push(t<65536?L(t):L(55296+((t-=65536)>>10),t%1024+56320))}var a,u;return o.join("")}}),n.String.fromCodePoint;var S,V,M,H,z,T,N,R,P,O,j,U,Z,Q,$={Space_Separator:/[\u1680\u2000-\u200A\u202F\u205F\u3000]/,ID_Start:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/,ID_Continue:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/},W=function(e){return"string"==typeof e&&$.Space_Separator.test(e)},Y=function(e){return"string"==typeof e&&(e>="a"&&e<="z"||e>="A"&&e<="Z"||"$"===e||"_"===e||$.ID_Start.test(e))},q=function(e){return"string"==typeof e&&(e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"$"===e||"_"===e||"‌"===e||"‍"===e||$.ID_Continue.test(e))},X=function(e){return"string"==typeof e&&/[0-9]/.test(e)},G=function(e){return"string"==typeof e&&/[0-9A-Fa-f]/.test(e)};function K(e,t,n){var o=e[t];if(null!=o&&"object"==typeof o)if(Array.isArray(o))for(var r=0;r<o.length;r++){var i=String(r),a=K(o,i,n);void 0===a?delete o[i]:Object.defineProperty(o,i,{value:a,writable:!0,enumerable:!0,configurable:!0})}else for(var u in o){var l=K(o,u,n);void 0===l?delete o[u]:Object.defineProperty(o,u,{value:l,writable:!0,enumerable:!0,configurable:!0})}return n.call(e,t,o)}function J(){for(O="default",j="",U=!1,Z=1;;){Q=ee();var e=ne[O]();if(e)return e}}function ee(){if(S[H])return String.fromCodePoint(S.codePointAt(H))}function te(){var e=ee();return"\n"===e?(z++,T=0):e?T+=e.length:T++,e&&(H+=e.length),e}var ne={default:function(){switch(Q){case"\t":case"\v":case"\f":case" ":case" ":case"\ufeff":case"\n":case"\r":case"\u2028":case"\u2029":return void te();case"/":return te(),void(O="comment");case void 0:return te(),oe("eof")}if(!W(Q))return ne[V]();te()},comment:function(){switch(Q){case"*":return te(),void(O="multiLineComment");case"/":return te(),void(O="singleLineComment")}throw se(te())},multiLineComment:function(){switch(Q){case"*":return te(),void(O="multiLineCommentAsterisk");case void 0:throw se(te())}te()},multiLineCommentAsterisk:function(){switch(Q){case"*":return void te();case"/":return te(),void(O="default");case void 0:throw se(te())}te(),O="multiLineComment"},singleLineComment:function(){switch(Q){case"\n":case"\r":case"\u2028":case"\u2029":return te(),void(O="default");case void 0:return te(),oe("eof")}te()},value:function(){switch(Q){case"{":case"[":return oe("punctuator",te());case"n":return te(),re("ull"),oe("null",null);case"t":return te(),re("rue"),oe("boolean",!0);case"f":return te(),re("alse"),oe("boolean",!1);case"-":case"+":return"-"===te()&&(Z=-1),void(O="sign");case".":return j=te(),void(O="decimalPointLeading");case"0":return j=te(),void(O="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return j=te(),void(O="decimalInteger");case"I":return te(),re("nfinity"),oe("numeric",1/0);case"N":return te(),re("aN"),oe("numeric",NaN);case'"':case"'":return U='"'===te(),j="",void(O="string")}throw se(te())},identifierNameStartEscape:function(){if("u"!==Q)throw se(te());te();var e=ie();switch(e){case"$":case"_":break;default:if(!Y(e))throw de()}j+=e,O="identifierName"},identifierName:function(){switch(Q){case"$":case"_":case"‌":case"‍":return void(j+=te());case"\\":return te(),void(O="identifierNameEscape")}if(!q(Q))return oe("identifier",j);j+=te()},identifierNameEscape:function(){if("u"!==Q)throw se(te());te();var e=ie();switch(e){case"$":case"_":case"‌":case"‍":break;default:if(!q(e))throw de()}j+=e,O="identifierName"},sign:function(){switch(Q){case".":return j=te(),void(O="decimalPointLeading");case"0":return j=te(),void(O="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return j=te(),void(O="decimalInteger");case"I":return te(),re("nfinity"),oe("numeric",Z*(1/0));case"N":return te(),re("aN"),oe("numeric",NaN)}throw se(te())},zero:function(){switch(Q){case".":return j+=te(),void(O="decimalPoint");case"e":case"E":return j+=te(),void(O="decimalExponent");case"x":case"X":return j+=te(),void(O="hexadecimal")}return oe("numeric",0*Z)},decimalInteger:function(){switch(Q){case".":return j+=te(),void(O="decimalPoint");case"e":case"E":return j+=te(),void(O="decimalExponent")}if(!X(Q))return oe("numeric",Z*Number(j));j+=te()},decimalPointLeading:function(){if(X(Q))return j+=te(),void(O="decimalFraction");throw se(te())},decimalPoint:function(){switch(Q){case"e":case"E":return j+=te(),void(O="decimalExponent")}return X(Q)?(j+=te(),void(O="decimalFraction")):oe("numeric",Z*Number(j))},decimalFraction:function(){switch(Q){case"e":case"E":return j+=te(),void(O="decimalExponent")}if(!X(Q))return oe("numeric",Z*Number(j));j+=te()},decimalExponent:function(){switch(Q){case"+":case"-":return j+=te(),void(O="decimalExponentSign")}if(X(Q))return j+=te(),void(O="decimalExponentInteger");throw se(te())},decimalExponentSign:function(){if(X(Q))return j+=te(),void(O="decimalExponentInteger");throw se(te())},decimalExponentInteger:function(){if(!X(Q))return oe("numeric",Z*Number(j));j+=te()},hexadecimal:function(){if(G(Q))return j+=te(),void(O="hexadecimalInteger");throw se(te())},hexadecimalInteger:function(){if(!G(Q))return oe("numeric",Z*Number(j));j+=te()},string:function(){switch(Q){case"\\":return te(),void(j+=function(){switch(ee()){case"b":return te(),"\b";case"f":return te(),"\f";case"n":return te(),"\n";case"r":return te(),"\r";case"t":return te(),"\t";case"v":return te(),"\v";case"0":if(te(),X(ee()))throw se(te());return"\0";case"x":return te(),function(){var e="",t=ee();if(!G(t))throw se(te());if(e+=te(),t=ee(),!G(t))throw se(te());return e+=te(),String.fromCodePoint(parseInt(e,16))}();case"u":return te(),ie();case"\n":case"\u2028":case"\u2029":return te(),"";case"\r":return te(),"\n"===ee()&&te(),"";case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case void 0:throw se(te())}return te()}());case'"':return U?(te(),oe("string",j)):void(j+=te());case"'":return U?void(j+=te()):(te(),oe("string",j));case"\n":case"\r":throw se(te());case"\u2028":case"\u2029":!function(e){console.warn("JSON5: '"+fe(e)+"' in strings is not valid ECMAScript; consider escaping")}(Q);break;case void 0:throw se(te())}j+=te()},start:function(){switch(Q){case"{":case"[":return oe("punctuator",te())}O="value"},beforePropertyName:function(){switch(Q){case"$":case"_":return j=te(),void(O="identifierName");case"\\":return te(),void(O="identifierNameStartEscape");case"}":return oe("punctuator",te());case'"':case"'":return U='"'===te(),void(O="string")}if(Y(Q))return j+=te(),void(O="identifierName");throw se(te())},afterPropertyName:function(){if(":"===Q)return oe("punctuator",te());throw se(te())},beforePropertyValue:function(){O="value"},afterPropertyValue:function(){switch(Q){case",":case"}":return oe("punctuator",te())}throw se(te())},beforeArrayValue:function(){if("]"===Q)return oe("punctuator",te());O="value"},afterArrayValue:function(){switch(Q){case",":case"]":return oe("punctuator",te())}throw se(te())},end:function(){throw se(te())}};function oe(e,t){return{type:e,value:t,line:z,column:T}}function re(e){for(var t=0,n=e;t<n.length;t+=1){var o=n[t];if(ee()!==o)throw se(te());te()}}function ie(){for(var e="",t=4;t-- >0;){var n=ee();if(!G(n))throw se(te());e+=te()}return String.fromCodePoint(parseInt(e,16))}var ae={start:function(){if("eof"===N.type)throw ce();ue()},beforePropertyName:function(){switch(N.type){case"identifier":case"string":return R=N.value,void(V="afterPropertyName");case"punctuator":return void le();case"eof":throw ce()}},afterPropertyName:function(){if("eof"===N.type)throw ce();V="beforePropertyValue"},beforePropertyValue:function(){if("eof"===N.type)throw ce();ue()},beforeArrayValue:function(){if("eof"===N.type)throw ce();"punctuator"!==N.type||"]"!==N.value?ue():le()},afterPropertyValue:function(){if("eof"===N.type)throw ce();switch(N.value){case",":return void(V="beforePropertyName");case"}":le()}},afterArrayValue:function(){if("eof"===N.type)throw ce();switch(N.value){case",":return void(V="beforeArrayValue");case"]":le()}},end:function(){}};function ue(){var e;switch(N.type){case"punctuator":switch(N.value){case"{":e={};break;case"[":e=[]}break;case"null":case"boolean":case"numeric":case"string":e=N.value}if(void 0===P)P=e;else{var t=M[M.length-1];Array.isArray(t)?t.push(e):Object.defineProperty(t,R,{value:e,writable:!0,enumerable:!0,configurable:!0})}if(null!==e&&"object"==typeof e)M.push(e),V=Array.isArray(e)?"beforeArrayValue":"beforePropertyName";else{var n=M[M.length-1];V=null==n?"end":Array.isArray(n)?"afterArrayValue":"afterPropertyValue"}}function le(){M.pop();var e=M[M.length-1];V=null==e?"end":Array.isArray(e)?"afterArrayValue":"afterPropertyValue"}function se(e){return he(void 0===e?"JSON5: invalid end of input at "+z+":"+T:"JSON5: invalid character '"+fe(e)+"' at "+z+":"+T)}function ce(){return he("JSON5: invalid end of input at "+z+":"+T)}function de(){return he("JSON5: invalid identifier character at "+z+":"+(T-=5))}function fe(e){var t={"'":"\\'",'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\v","\0":"\\0","\u2028":"\\u2028","\u2029":"\\u2029"};if(t[e])return t[e];if(e<" "){var n=e.charCodeAt(0).toString(16);return"\\x"+("00"+n).substring(n.length)}return e}function he(e){var t=new SyntaxError(e);return t.lineNumber=z,t.columnNumber=T,t}return{parse:function(e,t){S=String(e),V="start",M=[],H=0,z=1,T=0,N=void 0,R=void 0,P=void 0;do{N=J(),ae[V]()}while("eof"!==N.type);return"function"==typeof t?K({"":P},"",t):P},stringify:function(e,t,n){var o,r,i,a=[],u="",l="";if(null==t||"object"!=typeof t||Array.isArray(t)||(n=t.space,i=t.quote,t=t.replacer),"function"==typeof t)r=t;else if(Array.isArray(t)){o=[];for(var s=0,c=t;s<c.length;s+=1){var d=c[s],f=void 0;"string"==typeof d?f=d:("number"==typeof d||d instanceof String||d instanceof Number)&&(f=String(d)),void 0!==f&&o.indexOf(f)<0&&o.push(f)}}return n instanceof Number?n=Number(n):n instanceof String&&(n=String(n)),"number"==typeof n?n>0&&(n=Math.min(10,Math.floor(n)),l="          ".substr(0,n)):"string"==typeof n&&(l=n.substr(0,10)),h("",{"":e});function h(e,t){var n=t[e];switch(null!=n&&("function"==typeof n.toJSON5?n=n.toJSON5(e):"function"==typeof n.toJSON&&(n=n.toJSON(e))),r&&(n=r.call(t,e,n)),n instanceof Number?n=Number(n):n instanceof String?n=String(n):n instanceof Boolean&&(n=n.valueOf()),n){case null:return"null";case!0:return"true";case!1:return"false"}return"string"==typeof n?m(n):"number"==typeof n?String(n):"object"==typeof n?Array.isArray(n)?function(e){if(a.indexOf(e)>=0)throw TypeError("Converting circular structure to JSON5");a.push(e);var t=u;u+=l;for(var n,o=[],r=0;r<e.length;r++){var i=h(String(r),e);o.push(void 0!==i?i:"null")}if(0===o.length)n="[]";else if(""===l)n="["+o.join(",")+"]";else{var s=",\n"+u,c=o.join(s);n="[\n"+u+c+",\n"+t+"]"}return a.pop(),u=t,n}(n):function(e){if(a.indexOf(e)>=0)throw TypeError("Converting circular structure to JSON5");a.push(e);var t=u;u+=l;for(var n,r,i=[],s=0,c=o||Object.keys(e);s<c.length;s+=1){var d=c[s],f=h(d,e);if(void 0!==f){var m=A(d)+":";""!==l&&(m+=" "),m+=f,i.push(m)}}if(0===i.length)n="{}";else if(""===l)n="{"+(r=i.join(","))+"}";else{var p=",\n"+u;r=i.join(p),n="{\n"+u+r+",\n"+t+"}"}return a.pop(),u=t,n}(n):void 0}function m(e){for(var t={"'":.1,'"':.2},n={"'":"\\'",'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\v","\0":"\\0","\u2028":"\\u2028","\u2029":"\\u2029"},o="",r=0;r<e.length;r++){var a=e[r];switch(a){case"'":case'"':t[a]++,o+=a;continue;case"\0":if(X(e[r+1])){o+="\\x00";continue}}if(n[a])o+=n[a];else if(a<" "){var u=a.charCodeAt(0).toString(16);o+="\\x"+("00"+u).substring(u.length)}else o+=a}var l=i||Object.keys(t).reduce((function(e,n){return t[e]<t[n]?e:n}));return l+(o=o.replace(new RegExp(l,"g"),n[l]))+l}function A(e){if(0===e.length)return m(e);var t=String.fromCodePoint(e.codePointAt(0));if(!Y(t))return m(e);for(var n=t.length;n<e.length;n++)if(!q(String.fromCodePoint(e.codePointAt(n))))return m(e);return e}}}}()},1354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},1604:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-CodeHighlighter-CodeHighlighter-module_CodeHighlighter_GuSiZu {\n    \n}","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/CodeHighlighter/CodeHighlighter.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".CodeHighlighter {\n    \n}"],sourceRoot:""}]),a.locals={CodeHighlighter:"node_modules-@tolokoban-ui-lib-dist-view-CodeHighlighter-CodeHighlighter-module_CodeHighlighter_GuSiZu"};const u=a},1635:(e,t,n)=>{"use strict";function o(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]])}return n}function r(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function u(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}l((o=o.apply(e,t||[])).next())}))}n.d(t,{Tt:()=>o,sH:()=>r}),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError},1868:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_OptionsMultiple_PzecNv {\n    box-shadow: var(--theme-shadow-2);\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    gap: 1px;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    background-color: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_button_PGIrUS {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_button_PGIrUS.node_modules-\\@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_selected_SlDtC4 {\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_button_PGIrUS.node_modules-\\@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_unselected_NP53Fr {\n    opacity: 0.667;\n    background-color: var(--theme-color-primary-4);\n    color: var(--theme-color-on-primary-4);\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/OptionsMultiple/OptionsMultiple.module.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,oBAAoB;IACpB,eAAe;IACf,6BAA6B;IAC7B,oBAAoB;IACpB,QAAQ;IACR,qBAAqB;IACrB,gBAAgB;IAChB,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,SAAS;IACT,wBAAwB;IACxB,cAAc;IACd,gCAAgC;IAChC,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,cAAc;IACd,8CAA8C;IAC9C,sCAAsC;AAC1C",sourcesContent:[".OptionsMultiple {\n    box-shadow: var(--theme-shadow-2);\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    gap: 1px;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    background-color: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n}\n\n.button {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.button.selected {\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.button.unselected {\n    opacity: 0.667;\n    background-color: var(--theme-color-primary-4);\n    color: var(--theme-color-on-primary-4);\n}\n"],sourceRoot:""}]),a.locals={OptionsMultiple:"node_modules-@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_OptionsMultiple_PzecNv",button:"node_modules-@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_button_PGIrUS",selected:"node_modules-@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_selected_SlDtC4",unselected:"node_modules-@tolokoban-ui-lib-dist-view-OptionsMultiple-OptionsMultiple-module_unselected_NP53Fr"};const u=a},1874:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_YUMOh2 {\n    --custom-color-back: #7df;\n    --custom-color-text: #000;\n    --custom-color-hover-back: 0;\n    --custom-color-hover-text: 0;\n    --custom-shadow: var(--theme-shadow-3);\n    all: inherit;\n    position: initial;\n    overflow: hidden;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n    border-radius: 50%;\n    width: 2em;\n    height: 2em;\n    background-color: var(--custom-color-back);\n    color: var(--custom-color-text);\n    transition: 0.2s all;\n    box-shadow: var(--custom-shadow);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_YUMOh2:hover {\n    background-color: var(--custom-color-hover-back);\n    color: var(--custom-color-hover-text);\n}\n\nbutton.node_modules-\\@tolokoban-ui-lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_YUMOh2:active {\n    transform: translateY(0.25em);\n    box-shadow: var(--theme-shadow-1);\n}\n\nbutton.node_modules-\\@tolokoban-ui-lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_YUMOh2[disabled] {\n    pointer-events: none;\n    box-shadow: none;\n    filter: grayscale(100%);\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/FloatingButton/FloatingButton.module.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,4BAA4B;IAC5B,4BAA4B;IAC5B,sCAAsC;IACtC,YAAY;IACZ,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,UAAU;IACV,kBAAkB;IAClB,UAAU;IACV,WAAW;IACX,0CAA0C;IAC1C,+BAA+B;IAC/B,oBAAoB;IACpB,gCAAgC;AACpC;;AAEA;IACI,gDAAgD;IAChD,qCAAqC;AACzC;;AAEA;IACI,6BAA6B;IAC7B,iCAAiC;AACrC;;AAEA;IACI,oBAAoB;IACpB,gBAAgB;IAChB,uBAAuB;AAC3B",sourcesContent:[".FloatingButton {\n    --custom-color-back: #7df;\n    --custom-color-text: #000;\n    --custom-color-hover-back: 0;\n    --custom-color-hover-text: 0;\n    --custom-shadow: var(--theme-shadow-3);\n    all: inherit;\n    position: initial;\n    overflow: hidden;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n    border-radius: 50%;\n    width: 2em;\n    height: 2em;\n    background-color: var(--custom-color-back);\n    color: var(--custom-color-text);\n    transition: 0.2s all;\n    box-shadow: var(--custom-shadow);\n}\n\n.FloatingButton:hover {\n    background-color: var(--custom-color-hover-back);\n    color: var(--custom-color-hover-text);\n}\n\nbutton.FloatingButton:active {\n    transform: translateY(0.25em);\n    box-shadow: var(--theme-shadow-1);\n}\n\nbutton.FloatingButton[disabled] {\n    pointer-events: none;\n    box-shadow: none;\n    filter: grayscale(100%);\n}\n"],sourceRoot:""}]),a.locals={FloatingButton:"node_modules-@tolokoban-ui-lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_YUMOh2"};const u=a},2187:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,"button.ui-view-combo-ComboItemView {\n    position: relative;\n    box-sizing: border-box;\n    font: inherit;\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: none;\n    border-radius: 0rem;\n    height: 2.25rem;\n    padding: 0;\n    cursor: pointer;\n    transition: all 0.2s;\n    filter: brightness(100%);\n    margin: 0;\n    text-align: left;\n    background-color: var(--theme-color-neutral-9);\n    color: var(--theme-color-on-neutral-9);\n}\n\nbutton.ui-view-combo-ComboItemView.selected {\n    z-index: 2;\n    background-color: var(--theme-color-primary-7);\n    color: var(--theme-color-on-primary-7);\n}\n\nbutton.ui-view-combo-ComboItemView:focus {\n    outline: 2px dotted var(--theme-color-accent);\n    outline-offset: 2px;\n}\n\nbutton.ui-view-combo-ComboItemView:active {\n    box-shadow: var(--theme-shadow-button-pressed);\n    filter: brightness(150%);\n}\n\nbutton.ui-view-combo-ComboItemView > div.body {\n    max-height: 2.25rem;\n    margin: 0;\n    padding: 0 0.5rem;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    flex: 1 1 auto;\n}\n\nbutton.ui-view-combo-ComboItemView > div.button {\n    display: grid;\n    place-items: center;\n    max-width: 2.25rem;\n    max-height: 2.25rem;\n    width: 2.25rem;\n    height: 2.25rem;\n    margin: 0;\n    padding: 0;\n    border-left: 1px solid var(--theme-color-on-primary-opacity-50);\n}\n\nbutton.ui-view-combo-ComboItemView > div.button > svg {\n    width: 1.75rem;\n    height: 1.75rem;\n}\n\ndiv.ui-view-combo-ComboItemView-list {\n    max-width: calc(90vw - 2rem);\n    width: 320px;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Combo/combo-item/combo-item-view.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,WAAW;IACX,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,YAAY;IACZ,mBAAmB;IACnB,eAAe;IACf,UAAU;IACV,eAAe;IACf,oBAAoB;IACpB,wBAAwB;IACxB,SAAS;IACT,gBAAgB;IAChB,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,UAAU;IACV,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,6CAA6C;IAC7C,mBAAmB;AACvB;;AAEA;IACI,8CAA8C;IAC9C,wBAAwB;AAC5B;;AAEA;IACI,mBAAmB;IACnB,SAAS;IACT,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;IAChB,uBAAuB;IACvB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,SAAS;IACT,UAAU;IACV,+DAA+D;AACnE;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,4BAA4B;IAC5B,YAAY;AAChB",sourcesContent:["button.ui-view-combo-ComboItemView {\n    position: relative;\n    box-sizing: border-box;\n    font: inherit;\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: none;\n    border-radius: 0rem;\n    height: 2.25rem;\n    padding: 0;\n    cursor: pointer;\n    transition: all 0.2s;\n    filter: brightness(100%);\n    margin: 0;\n    text-align: left;\n    background-color: var(--theme-color-neutral-9);\n    color: var(--theme-color-on-neutral-9);\n}\n\nbutton.ui-view-combo-ComboItemView.selected {\n    z-index: 2;\n    background-color: var(--theme-color-primary-7);\n    color: var(--theme-color-on-primary-7);\n}\n\nbutton.ui-view-combo-ComboItemView:focus {\n    outline: 2px dotted var(--theme-color-accent);\n    outline-offset: 2px;\n}\n\nbutton.ui-view-combo-ComboItemView:active {\n    box-shadow: var(--theme-shadow-button-pressed);\n    filter: brightness(150%);\n}\n\nbutton.ui-view-combo-ComboItemView > div.body {\n    max-height: 2.25rem;\n    margin: 0;\n    padding: 0 0.5rem;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    flex: 1 1 auto;\n}\n\nbutton.ui-view-combo-ComboItemView > div.button {\n    display: grid;\n    place-items: center;\n    max-width: 2.25rem;\n    max-height: 2.25rem;\n    width: 2.25rem;\n    height: 2.25rem;\n    margin: 0;\n    padding: 0;\n    border-left: 1px solid var(--theme-color-on-primary-opacity-50);\n}\n\nbutton.ui-view-combo-ComboItemView > div.button > svg {\n    width: 1.75rem;\n    height: 1.75rem;\n}\n\ndiv.ui-view-combo-ComboItemView-list {\n    max-width: calc(90vw - 2rem);\n    width: 320px;\n}\n"],sourceRoot:""}]);const u=a},2197:(e,t,n)=>{"use strict";function o(e){return!!e&&!Array.isArray(e)&&"object"==typeof e}function r(e){return"string"==typeof e}function i(e){return"number"==typeof e}function a(e){return"function"==typeof e}function u(e,t,n=null){try{return l(e,t),!0}catch(t){return n&&(console.error("[Invalid type]",n),console.error(e),console.debug(t)),!1}}function l(e,t,n="data"){if("function"==typeof t)return l(e,t(),n);if("unknown"===t)return;if("null"===t){if(null!==e)throw console.log("🚀 [index] data = ",e,typeof e),Error(`Expected ${n} to be a null and not a ${c(e)}!`);return}if("string"==typeof t){if(typeof e!==t)throw Error(`Expected ${n} to be a ${t} and not a ${c(e)}!`);return}if(Array.isArray(t)){const[r]=t;switch(r){case"array":return void function(e,t,n){if(!Array.isArray(e))throw Error(`Expected ${t} to be an array and not a ${c(e)}!`);const[,o,r]=n;if(r){const n=e.length;if(i(r)){if(n!==r)throw Error(`Expected ${t}'s length to be ${r} and not ${n}!`)}else{const{min:e,max:o}=r;if(i(e)&&n<e)throw Error(`Expected ${t}'s MIN length to be ${e} and not ${n}!`);if(i(o)&&n>o)throw Error(`Expected ${t}'s MAX length to be ${o} and not ${n}!`)}}for(let n=0;n<e.length;n+=1)l(e[n],o,`${t}[${n}]`)}(e,n,t);case"map":return void function(e,t,n){if(!o(e))throw Error(`Expected ${t} to be an object and not a ${c(e)}!`);const[,r]=n;for(const n of Object.keys(e))"string"==typeof n&&l(e[n],r,`${t}[${n}]`)}(e,n,t);case"?":return void function(e,t,n){if(void 0===e)return;const[,o]=n;l(e,o,t)}(e,n,t);case"|":return void function(e,t,n){const[,...o]=n;if(0===o.length)throw Error(`No type has been defined for this alternative: ${JSON.stringify(n)}!`);const r=[];for(const n of o)try{return void l(e,n,t)}catch(e){e instanceof Error&&r.push(e)}throw new Error(`All alternatives failed!${r.map((e=>`\n${e.message}`))}`)}(e,n,t);case"tuple":return void s(e,n,t);case"tuple...":return void function(e,t,[,...n]){const o=n.length-1;s(e,t,["tuple",...n.slice(0,o)]);const r=n[o];for(let n=o;n<e.length;n++)l(e[n],r,`${t}[${n}]`)}(e,n,t);case"partial":return void function(e,t,[,n]){!function(e,t="data"){if(!o(e))throw Error(`${t} was expected to be an object but we got ${typeof e}!`)}(e,t);for(const o of Object.keys(n)){if("string"!=typeof o)continue;const r=e[o];void 0!==r&&l(r,n[o],`${t}.${o}`)}}(e,n,t);case"literal":return void function(e,t,n){const[,...o]=n;for(const t of o)if(e===t)return;throw Error(`Expected ${t} to be a literal (${o.map((e=>`"${e}"`)).join(" | ")}) and not a ${c(e)}!`)}(e,n,t);case"custom":return void function(e,t,[,n]){if(!n(e))throw Error(`Expected ${n.name}(${t}) to return true!`)}(e,n,t);default:throw Error(`Don't know how to create a type guard for this kind of type: ${JSON.stringify(t)}`)}}if("object"!=typeof e)throw Error(`Expected ${n} to be an object and not a ${c(e)}!`);const r=e;for(const e of Object.keys(t))"string"==typeof e&&l(r[e],t[e],`${n}.${e}`)}function s(e,t,[,...n]){if(function(e,t="data"){if(!Array.isArray(e))throw Error(`${t} was expected to be an Array but we got ${typeof e}!`)}(e),n.length>e.length)throw Error(`Expected ${t}'s length to be at least ${n.length} and not ${e.length}!`);for(let o=0;o<n.length;o++){const r=n[o];l(e[o],r,`${t}[${o}]`)}}function c(e){var t;return null===e?"null":"function"==typeof e?`function ${null!==(t=e.name)&&void 0!==t?t:""}()`:typeof e}n.d(t,{Kg:()=>r,Tn:()=>a,Xj:()=>u})},2551:(e,t,n)=>{"use strict";var o=n(6540),r=n(9982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,u={};function l(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},m={};function A(e,t,n,o,r,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var p={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){p[e]=new A(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];p[t]=new A(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){p[e]=new A(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){p[e]=new A(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){p[e]=new A(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){p[e]=new A(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){p[e]=new A(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){p[e]=new A(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){p[e]=new A(e,5,!1,e.toLowerCase(),null,!1,!1)}));var C=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function _(e,t,n,o){var r=p.hasOwnProperty(t)?p[t]:null;(null!==r?0!==r.type:o||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,o)&&(n=null),o||null===r?function(e){return!!d.call(m,e)||!d.call(h,e)&&(f.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,o=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(C,g);p[t]=new A(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(C,g);p[t]=new A(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(C,g);p[t]=new A(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){p[e]=new A(e,1,!1,e.toLowerCase(),null,!1,!1)})),p.xlinkHref=new A("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){p[e]=new A(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,v=Symbol.for("react.element"),w=Symbol.for("react.portal"),y=Symbol.for("react.fragment"),D=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),B=Symbol.for("react.provider"),E=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),x=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),F=Symbol.for("react.memo"),S=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var V=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var z,T=Object.assign;function N(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var R=!1;function P(e,t){if(!e||R)return"";R=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var o=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){o=e}e.call(t.prototype)}else{try{throw Error()}catch(e){o=e}e()}}catch(t){if(t&&o&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),i=o.stack.split("\n"),a=r.length-1,u=i.length-1;1<=a&&0<=u&&r[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(r[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||r[a]!==i[u]){var l="\n"+r[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=u);break}}}finally{R=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?N(e):""}function O(e){switch(e.tag){case 5:return N(e.type);case 16:return N("Lazy");case 13:return N("Suspense");case 19:return N("SuspenseList");case 0:case 2:case 15:return P(e.type,!1);case 11:return P(e.type.render,!1);case 1:return P(e.type,!0);default:return""}}function j(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case y:return"Fragment";case w:return"Portal";case k:return"Profiler";case D:return"StrictMode";case x:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case E:return(e.displayName||"Context")+".Consumer";case B:return(e._context.displayName||"Context")+".Provider";case I:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case F:return null!==(t=e.displayName||null)?t:j(e.type)||"Memo";case S:t=e._payload,e=e._init;try{return j(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return j(t);case 8:return t===D?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function Z(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){o=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function W(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=Q(e)?e.checked?"true":"false":e.value),(e=o)!==n&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return T({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;n=Z(null!=t.value?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function K(e,t){G(e,t);var n=Z(t.value),o=t.type;if(null!=n)"number"===o?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===o||"reset"===o)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,Z(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var o=t.type;if(!("submit"!==o&&"reset"!==o||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Y(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,o){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&o&&(e[n].defaultSelected=!0)}else{for(n=""+Z(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(o&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return T({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Z(n)}}function ie(e,t){var n=Z(t.value),o=Z(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=o&&(e.defaultValue=""+o)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,o){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function Ae(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function pe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var o=0===n.indexOf("--"),r=Ae(n,t[n],o);"float"===n&&(n="cssFloat"),o?e.setProperty(n,r):e[n]=r}}Object.keys(he).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var Ce=T({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(Ce[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function ve(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,ye=null,De=null;function ke(e){if(e=br(e)){if("function"!=typeof we)throw Error(i(280));var t=e.stateNode;t&&(t=wr(t),we(e.stateNode,e.type,t))}}function Be(e){ye?De?De.push(e):De=[e]:ye=e}function Ee(){if(ye){var e=ye,t=De;if(De=ye=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Ie(e,t){return e(t)}function xe(){}var Le=!1;function Fe(e,t,n){if(Le)return e(t,n);Le=!0;try{return Ie(e,t,n)}finally{Le=!1,(null!==ye||null!==De)&&(xe(),Ee())}}function Se(e,t){var n=e.stateNode;if(null===n)return null;var o=wr(n);if(null===o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ve=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){Ve=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){Ve=!1}function He(e,t,n,o,r,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var ze=!1,Te=null,Ne=!1,Re=null,Pe={onError:function(e){ze=!0,Te=e}};function Oe(e,t,n,o,r,i,a,u,l){ze=!1,Te=null,He.apply(Pe,arguments)}function je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ze(e){if(je(e)!==e)throw Error(i(188))}function Qe(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=je(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,o=t;;){var r=n.return;if(null===r)break;var a=r.alternate;if(null===a){if(null!==(o=r.return)){n=o;continue}break}if(r.child===a.child){for(a=r.child;a;){if(a===n)return Ze(r),e;if(a===o)return Ze(r),t;a=a.sibling}throw Error(i(188))}if(n.return!==o.return)n=r,o=a;else{for(var u=!1,l=r.child;l;){if(l===n){u=!0,n=r,o=a;break}if(l===o){u=!0,o=r,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,o=r;break}if(l===o){u=!0,o=a,n=r;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==o)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?$e(e):null}function $e(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=$e(e);if(null!==t)return t;e=e.sibling}return null}var We=r.unstable_scheduleCallback,Ye=r.unstable_cancelCallback,qe=r.unstable_shouldYield,Xe=r.unstable_requestPaint,Ge=r.unstable_now,Ke=r.unstable_getCurrentPriorityLevel,Je=r.unstable_ImmediatePriority,et=r.unstable_UserBlockingPriority,tt=r.unstable_NormalPriority,nt=r.unstable_LowPriority,ot=r.unstable_IdlePriority,rt=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ut(e)/lt|0)|0},ut=Math.log,lt=Math.LN2,st=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var o=0,r=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var u=a&~r;0!==u?o=dt(u):0!==(i&=a)&&(o=dt(i))}else 0!==(a=n&~r)?o=dt(a):0!==i&&(o=dt(i));if(0===o)return 0;if(0!==t&&t!==o&&0===(t&r)&&((r=o&-o)>=(i=t&-t)||16===r&&4194240&i))return t;if(4&o&&(o|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=o;0<t;)r=1<<(n=31-at(t)),o|=e[n],t&=~r;return o}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function At(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function pt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ct(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var o=31-at(n),r=1<<o;r&t|e[o]&t&&(e[o]|=t),n&=~r}}var _t=0;function bt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var vt,wt,yt,Dt,kt,Bt=!1,Et=[],It=null,xt=null,Lt=null,Ft=new Map,St=new Map,Vt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ht(e,t){switch(e){case"focusin":case"focusout":It=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":Ft.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function zt(e,t,n,o,r,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:o,nativeEvent:i,targetContainers:[r]},null!==t&&null!==(t=br(t))&&wt(t),e):(e.eventSystemFlags|=o,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function Tt(e){var t=_r(e.target);if(null!==t){var n=je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void kt(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Nt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=br(n))&&wt(t),e.blockedOn=n,!1;var o=new(n=e.nativeEvent).constructor(n.type,n);be=o,n.target.dispatchEvent(o),be=null,t.shift()}return!0}function Rt(e,t,n){Nt(e)&&n.delete(t)}function Pt(){Bt=!1,null!==It&&Nt(It)&&(It=null),null!==xt&&Nt(xt)&&(xt=null),null!==Lt&&Nt(Lt)&&(Lt=null),Ft.forEach(Rt),St.forEach(Rt)}function Ot(e,t){e.blockedOn===t&&(e.blockedOn=null,Bt||(Bt=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Pt)))}function jt(e){function t(t){return Ot(t,e)}if(0<Et.length){Ot(Et[0],e);for(var n=1;n<Et.length;n++){var o=Et[n];o.blockedOn===e&&(o.blockedOn=null)}}for(null!==It&&Ot(It,e),null!==xt&&Ot(xt,e),null!==Lt&&Ot(Lt,e),Ft.forEach(t),St.forEach(t),n=0;n<Vt.length;n++)(o=Vt[n]).blockedOn===e&&(o.blockedOn=null);for(;0<Vt.length&&null===(n=Vt[0]).blockedOn;)Tt(n),null===n.blockedOn&&Vt.shift()}var Ut=b.ReactCurrentBatchConfig,Zt=!0;function Qt(e,t,n,o){var r=_t,i=Ut.transition;Ut.transition=null;try{_t=1,Wt(e,t,n,o)}finally{_t=r,Ut.transition=i}}function $t(e,t,n,o){var r=_t,i=Ut.transition;Ut.transition=null;try{_t=4,Wt(e,t,n,o)}finally{_t=r,Ut.transition=i}}function Wt(e,t,n,o){if(Zt){var r=qt(e,t,n,o);if(null===r)Qo(e,t,o,Yt,n),Ht(e,o);else if(function(e,t,n,o,r){switch(t){case"focusin":return It=zt(It,e,t,n,o,r),!0;case"dragenter":return xt=zt(xt,e,t,n,o,r),!0;case"mouseover":return Lt=zt(Lt,e,t,n,o,r),!0;case"pointerover":var i=r.pointerId;return Ft.set(i,zt(Ft.get(i)||null,e,t,n,o,r)),!0;case"gotpointercapture":return i=r.pointerId,St.set(i,zt(St.get(i)||null,e,t,n,o,r)),!0}return!1}(r,e,t,n,o))o.stopPropagation();else if(Ht(e,o),4&t&&-1<Mt.indexOf(e)){for(;null!==r;){var i=br(r);if(null!==i&&vt(i),null===(i=qt(e,t,n,o))&&Qo(e,t,o,Yt,n),i===r)break;r=i}null!==r&&o.stopPropagation()}else Qo(e,t,o,null,n)}}var Yt=null;function qt(e,t,n,o){if(Yt=null,null!==(e=_r(e=ve(o))))if(null===(t=je(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ke()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case ot:return 536870912;default:return 16}default:return 16}}var Gt=null,Kt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Kt,o=n.length,r="value"in Gt?Gt.value:Gt.textContent,i=r.length;for(e=0;e<o&&n[e]===r[e];e++);var a=o-e;for(t=1;t<=a&&n[o-t]===r[i-t];t++);return Jt=r.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function on(){return!1}function rn(e){function t(t,n,o,r,i){for(var a in this._reactName=t,this._targetInst=o,this.type=n,this.nativeEvent=r,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(r):r[a]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?nn:on,this.isPropagationStopped=on,this}return T(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,un,ln,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=rn(sn),dn=T({},sn,{view:0,detail:0}),fn=rn(dn),hn=T({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,un=e.screenY-ln.screenY):un=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:un}}),mn=rn(hn),An=rn(T({},hn,{dataTransfer:0})),pn=rn(T({},dn,{relatedTarget:0})),Cn=rn(T({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=T({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_n=rn(gn),bn=rn(T({},sn,{data:0})),vn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=yn[e])&&!!t[e]}function kn(){return Dn}var Bn=T({},dn,{key:function(e){if(e.key){var t=vn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),En=rn(Bn),In=rn(T({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),xn=rn(T({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Ln=rn(T({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Fn=T({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Sn=rn(Fn),Vn=[9,13,27,32],Mn=c&&"CompositionEvent"in window,Hn=null;c&&"documentMode"in document&&(Hn=document.documentMode);var zn=c&&"TextEvent"in window&&!Hn,Tn=c&&(!Mn||Hn&&8<Hn&&11>=Hn),Nn=String.fromCharCode(32),Rn=!1;function Pn(e,t){switch(e){case"keyup":return-1!==Vn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function On(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Qn(e,t,n,o){Be(o),0<(t=Wo(t,"onChange")).length&&(n=new cn("onChange","change",null,n,o),e.push({event:n,listeners:t}))}var $n=null,Wn=null;function Yn(e){Ro(e,0)}function qn(e){if(W(vr(e)))return e}function Xn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Kn;if(c){var Jn="oninput"in document;if(!Jn){var eo=document.createElement("div");eo.setAttribute("oninput","return;"),Jn="function"==typeof eo.oninput}Kn=Jn}else Kn=!1;Gn=Kn&&(!document.documentMode||9<document.documentMode)}function to(){$n&&($n.detachEvent("onpropertychange",no),Wn=$n=null)}function no(e){if("value"===e.propertyName&&qn(Wn)){var t=[];Qn(t,Wn,e,ve(e)),Fe(Yn,t)}}function oo(e,t,n){"focusin"===e?(to(),Wn=n,($n=t).attachEvent("onpropertychange",no)):"focusout"===e&&to()}function ro(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Wn)}function io(e,t){if("click"===e)return qn(t)}function ao(e,t){if("input"===e||"change"===e)return qn(t)}var uo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lo(e,t){if(uo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++){var r=n[o];if(!d.call(t,r)||!uo(e[r],t[r]))return!1}return!0}function so(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function co(e,t){var n,o=so(e);for(e=0;o;){if(3===o.nodeType){if(n=e+o.textContent.length,e<=t&&n>=t)return{node:o,offset:t-e};e=n}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=so(o)}}function fo(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fo(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function ho(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Y((e=t.contentWindow).document)}return t}function mo(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Ao(e){var t=ho(),n=e.focusedElem,o=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fo(n.ownerDocument.documentElement,n)){if(null!==o&&mo(n))if(t=o.start,void 0===(e=o.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var r=n.textContent.length,i=Math.min(o.start,r);o=void 0===o.end?i:Math.min(o.end,r),!e.extend&&i>o&&(r=o,o=i,i=r),r=co(n,i);var a=co(n,o);r&&a&&(1!==e.rangeCount||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(r.node,r.offset),e.removeAllRanges(),i>o?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var po=c&&"documentMode"in document&&11>=document.documentMode,Co=null,go=null,_o=null,bo=!1;function vo(e,t,n){var o=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;bo||null==Co||Co!==Y(o)||(o="selectionStart"in(o=Co)&&mo(o)?{start:o.selectionStart,end:o.selectionEnd}:{anchorNode:(o=(o.ownerDocument&&o.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:o.anchorOffset,focusNode:o.focusNode,focusOffset:o.focusOffset},_o&&lo(_o,o)||(_o=o,0<(o=Wo(go,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:o}),t.target=Co)))}function wo(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var yo={animationend:wo("Animation","AnimationEnd"),animationiteration:wo("Animation","AnimationIteration"),animationstart:wo("Animation","AnimationStart"),transitionend:wo("Transition","TransitionEnd")},Do={},ko={};function Bo(e){if(Do[e])return Do[e];if(!yo[e])return e;var t,n=yo[e];for(t in n)if(n.hasOwnProperty(t)&&t in ko)return Do[e]=n[t];return e}c&&(ko=document.createElement("div").style,"AnimationEvent"in window||(delete yo.animationend.animation,delete yo.animationiteration.animation,delete yo.animationstart.animation),"TransitionEvent"in window||delete yo.transitionend.transition);var Eo=Bo("animationend"),Io=Bo("animationiteration"),xo=Bo("animationstart"),Lo=Bo("transitionend"),Fo=new Map,So="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Vo(e,t){Fo.set(e,t),l(t,[e])}for(var Mo=0;Mo<So.length;Mo++){var Ho=So[Mo];Vo(Ho.toLowerCase(),"on"+(Ho[0].toUpperCase()+Ho.slice(1)))}Vo(Eo,"onAnimationEnd"),Vo(Io,"onAnimationIteration"),Vo(xo,"onAnimationStart"),Vo("dblclick","onDoubleClick"),Vo("focusin","onFocus"),Vo("focusout","onBlur"),Vo(Lo,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zo="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),To=new Set("cancel close invalid load scroll toggle".split(" ").concat(zo));function No(e,t,n){var o=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,o,r,a,u,l,s){if(Oe.apply(this,arguments),ze){if(!ze)throw Error(i(198));var c=Te;ze=!1,Te=null,Ne||(Ne=!0,Re=c)}}(o,t,void 0,e),e.currentTarget=null}function Ro(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var o=e[n],r=o.event;o=o.listeners;e:{var i=void 0;if(t)for(var a=o.length-1;0<=a;a--){var u=o[a],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==i&&r.isPropagationStopped())break e;No(r,u,s),i=l}else for(a=0;a<o.length;a++){if(l=(u=o[a]).instance,s=u.currentTarget,u=u.listener,l!==i&&r.isPropagationStopped())break e;No(r,u,s),i=l}}}if(Ne)throw e=Re,Ne=!1,Re=null,e}function Po(e,t){var n=t[pr];void 0===n&&(n=t[pr]=new Set);var o=e+"__bubble";n.has(o)||(Zo(t,e,2,!1),n.add(o))}function Oo(e,t,n){var o=0;t&&(o|=4),Zo(n,e,o,t)}var jo="_reactListening"+Math.random().toString(36).slice(2);function Uo(e){if(!e[jo]){e[jo]=!0,a.forEach((function(t){"selectionchange"!==t&&(To.has(t)||Oo(t,!1,e),Oo(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jo]||(t[jo]=!0,Oo("selectionchange",!1,t))}}function Zo(e,t,n,o){switch(Xt(t)){case 1:var r=Qt;break;case 4:r=$t;break;default:r=Wt}n=r.bind(null,t,n,e),r=void 0,!Ve||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),o?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function Qo(e,t,n,o,r){var i=o;if(!(1&t||2&t||null===o))e:for(;;){if(null===o)return;var a=o.tag;if(3===a||4===a){var u=o.stateNode.containerInfo;if(u===r||8===u.nodeType&&u.parentNode===r)break;if(4===a)for(a=o.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;a=a.return}for(;null!==u;){if(null===(a=_r(u)))return;if(5===(l=a.tag)||6===l){o=i=a;continue e}u=u.parentNode}}o=o.return}Fe((function(){var o=i,r=ve(n),a=[];e:{var u=Fo.get(e);if(void 0!==u){var l=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=En;break;case"focusin":s="focus",l=pn;break;case"focusout":s="blur",l=pn;break;case"beforeblur":case"afterblur":l=pn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=An;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=xn;break;case Eo:case Io:case xo:l=Cn;break;case Lo:l=Ln;break;case"scroll":l=fn;break;case"wheel":l=Sn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=In}var c=!!(4&t),d=!c&&"scroll"===e,f=c?null!==u?u+"Capture":null:u;c=[];for(var h,m=o;null!==m;){var A=(h=m).stateNode;if(5===h.tag&&null!==A&&(h=A,null!==f&&null!=(A=Se(m,f))&&c.push($o(m,A,h))),d)break;m=m.return}0<c.length&&(u=new l(u,s,null,n,r),a.push({event:u,listeners:c}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===be||!(s=n.relatedTarget||n.fromElement)||!_r(s)&&!s[Ar])&&(l||u)&&(u=r.window===r?r:(u=r.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=o,null!==(s=(s=n.relatedTarget||n.toElement)?_r(s):null)&&(s!==(d=je(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=o),l!==s)){if(c=mn,A="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=In,A="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==l?u:vr(l),h=null==s?u:vr(s),(u=new c(A,m+"leave",l,n,r)).target=d,u.relatedTarget=h,A=null,_r(r)===o&&((c=new c(f,m+"enter",s,n,r)).target=h,c.relatedTarget=d,A=c),d=A,l&&s)e:{for(f=s,m=0,h=c=l;h;h=Yo(h))m++;for(h=0,A=f;A;A=Yo(A))h++;for(;0<m-h;)c=Yo(c),m--;for(;0<h-m;)f=Yo(f),h--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=Yo(c),f=Yo(f)}c=null}else c=null;null!==l&&qo(a,u,l,c,!1),null!==s&&null!==d&&qo(a,d,s,c,!0)}if("select"===(l=(u=o?vr(o):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var p=Xn;else if(Zn(u))if(Gn)p=ao;else{p=ro;var C=oo}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(p=io);switch(p&&(p=p(e,o))?Qn(a,p,n,r):(C&&C(e,u,o),"focusout"===e&&(C=u._wrapperState)&&C.controlled&&"number"===u.type&&ee(u,"number",u.value)),C=o?vr(o):window,e){case"focusin":(Zn(C)||"true"===C.contentEditable)&&(Co=C,go=o,_o=null);break;case"focusout":_o=go=Co=null;break;case"mousedown":bo=!0;break;case"contextmenu":case"mouseup":case"dragend":bo=!1,vo(a,n,r);break;case"selectionchange":if(po)break;case"keydown":case"keyup":vo(a,n,r)}var g;if(Mn)e:{switch(e){case"compositionstart":var _="onCompositionStart";break e;case"compositionend":_="onCompositionEnd";break e;case"compositionupdate":_="onCompositionUpdate";break e}_=void 0}else jn?Pn(e,n)&&(_="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(_="onCompositionStart");_&&(Tn&&"ko"!==n.locale&&(jn||"onCompositionStart"!==_?"onCompositionEnd"===_&&jn&&(g=en()):(Kt="value"in(Gt=r)?Gt.value:Gt.textContent,jn=!0)),0<(C=Wo(o,_)).length&&(_=new bn(_,e,null,n,r),a.push({event:_,listeners:C}),(g||null!==(g=On(n)))&&(_.data=g))),(g=zn?function(e,t){switch(e){case"compositionend":return On(t);case"keypress":return 32!==t.which?null:(Rn=!0,Nn);case"textInput":return(e=t.data)===Nn&&Rn?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Mn&&Pn(e,t)?(e=en(),Jt=Kt=Gt=null,jn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Tn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(o=Wo(o,"onBeforeInput")).length&&(r=new bn("onBeforeInput","beforeinput",null,n,r),a.push({event:r,listeners:o}),r.data=g)}Ro(a,t)}))}function $o(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wo(e,t){for(var n=t+"Capture",o=[];null!==e;){var r=e,i=r.stateNode;5===r.tag&&null!==i&&(r=i,null!=(i=Se(e,n))&&o.unshift($o(e,i,r)),null!=(i=Se(e,t))&&o.push($o(e,i,r))),e=e.return}return o}function Yo(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qo(e,t,n,o,r){for(var i=t._reactName,a=[];null!==n&&n!==o;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===o)break;5===u.tag&&null!==s&&(u=s,r?null!=(l=Se(n,i))&&a.unshift($o(n,l,u)):r||null!=(l=Se(n,i))&&a.push($o(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Xo=/\r\n?/g,Go=/\u0000|\uFFFD/g;function Ko(e){return("string"==typeof e?e:""+e).replace(Xo,"\n").replace(Go,"")}function Jo(e,t,n){if(t=Ko(t),Ko(e)!==t&&n)throw Error(i(425))}function er(){}var tr=null,nr=null;function or(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var rr="function"==typeof setTimeout?setTimeout:void 0,ir="function"==typeof clearTimeout?clearTimeout:void 0,ar="function"==typeof Promise?Promise:void 0,ur="function"==typeof queueMicrotask?queueMicrotask:void 0!==ar?function(e){return ar.resolve(null).then(e).catch(lr)}:rr;function lr(e){setTimeout((function(){throw e}))}function sr(e,t){var n=t,o=0;do{var r=n.nextSibling;if(e.removeChild(n),r&&8===r.nodeType)if("/$"===(n=r.data)){if(0===o)return e.removeChild(r),void jt(t);o--}else"$"!==n&&"$?"!==n&&"$!"!==n||o++;n=r}while(n);jt(t)}function cr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function dr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fr=Math.random().toString(36).slice(2),hr="__reactFiber$"+fr,mr="__reactProps$"+fr,Ar="__reactContainer$"+fr,pr="__reactEvents$"+fr,Cr="__reactListeners$"+fr,gr="__reactHandles$"+fr;function _r(e){var t=e[hr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ar]||n[hr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=dr(e);null!==e;){if(n=e[hr])return n;e=dr(e)}return t}n=(e=n).parentNode}return null}function br(e){return!(e=e[hr]||e[Ar])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function vr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function wr(e){return e[mr]||null}var yr=[],Dr=-1;function kr(e){return{current:e}}function Br(e){0>Dr||(e.current=yr[Dr],yr[Dr]=null,Dr--)}function Er(e,t){Dr++,yr[Dr]=e.current,e.current=t}var Ir={},xr=kr(Ir),Lr=kr(!1),Fr=Ir;function Sr(e,t){var n=e.type.contextTypes;if(!n)return Ir;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var r,i={};for(r in n)i[r]=t[r];return o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Vr(e){return null!=e.childContextTypes}function Mr(){Br(Lr),Br(xr)}function Hr(e,t,n){if(xr.current!==Ir)throw Error(i(168));Er(xr,t),Er(Lr,n)}function zr(e,t,n){var o=e.stateNode;if(t=t.childContextTypes,"function"!=typeof o.getChildContext)return n;for(var r in o=o.getChildContext())if(!(r in t))throw Error(i(108,U(e)||"Unknown",r));return T({},n,o)}function Tr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ir,Fr=xr.current,Er(xr,e),Er(Lr,Lr.current),!0}function Nr(e,t,n){var o=e.stateNode;if(!o)throw Error(i(169));n?(e=zr(e,t,Fr),o.__reactInternalMemoizedMergedChildContext=e,Br(Lr),Br(xr),Er(xr,e)):Br(Lr),Er(Lr,n)}var Rr=null,Pr=!1,Or=!1;function jr(e){null===Rr?Rr=[e]:Rr.push(e)}function Ur(){if(!Or&&null!==Rr){Or=!0;var e=0,t=_t;try{var n=Rr;for(_t=1;e<n.length;e++){var o=n[e];do{o=o(!0)}while(null!==o)}Rr=null,Pr=!1}catch(t){throw null!==Rr&&(Rr=Rr.slice(e+1)),We(Je,Ur),t}finally{_t=t,Or=!1}}return null}var Zr=[],Qr=0,$r=null,Wr=0,Yr=[],qr=0,Xr=null,Gr=1,Kr="";function Jr(e,t){Zr[Qr++]=Wr,Zr[Qr++]=$r,$r=e,Wr=t}function ei(e,t,n){Yr[qr++]=Gr,Yr[qr++]=Kr,Yr[qr++]=Xr,Xr=e;var o=Gr;e=Kr;var r=32-at(o)-1;o&=~(1<<r),n+=1;var i=32-at(t)+r;if(30<i){var a=r-r%5;i=(o&(1<<a)-1).toString(32),o>>=a,r-=a,Gr=1<<32-at(t)+r|n<<r|o,Kr=i+e}else Gr=1<<i|n<<r|o,Kr=e}function ti(e){null!==e.return&&(Jr(e,1),ei(e,1,0))}function ni(e){for(;e===$r;)$r=Zr[--Qr],Zr[Qr]=null,Wr=Zr[--Qr],Zr[Qr]=null;for(;e===Xr;)Xr=Yr[--qr],Yr[qr]=null,Kr=Yr[--qr],Yr[qr]=null,Gr=Yr[--qr],Yr[qr]=null}var oi=null,ri=null,ii=!1,ai=null;function ui(e,t){var n=Fs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function li(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,oi=e,ri=cr(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,oi=e,ri=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Xr?{id:Gr,overflow:Kr}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Fs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,oi=e,ri=null,!0);default:return!1}}function si(e){return!(!(1&e.mode)||128&e.flags)}function ci(e){if(ii){var t=ri;if(t){var n=t;if(!li(e,t)){if(si(e))throw Error(i(418));t=cr(n.nextSibling);var o=oi;t&&li(e,t)?ui(o,n):(e.flags=-4097&e.flags|2,ii=!1,oi=e)}}else{if(si(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,oi=e}}}function di(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;oi=e}function fi(e){if(e!==oi)return!1;if(!ii)return di(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!or(e.type,e.memoizedProps)),t&&(t=ri)){if(si(e))throw hi(),Error(i(418));for(;t;)ui(e,t),t=cr(t.nextSibling)}if(di(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ri=cr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ri=null}}else ri=oi?cr(e.stateNode.nextSibling):null;return!0}function hi(){for(var e=ri;e;)e=cr(e.nextSibling)}function mi(){ri=oi=null,ii=!1}function Ai(e){null===ai?ai=[e]:ai.push(e)}var pi=b.ReactCurrentBatchConfig;function Ci(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var o=n.stateNode}if(!o)throw Error(i(147,e));var r=o,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=r.refs;null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function gi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function _i(e){return(0,e._init)(e._payload)}function bi(e){function t(t,n){if(e){var o=t.deletions;null===o?(t.deletions=[n],t.flags|=16):o.push(n)}}function n(n,o){if(!e)return null;for(;null!==o;)t(n,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Vs(e,t)).index=0,e.sibling=null,e}function a(t,n,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<n?(t.flags|=2,n):o:(t.flags|=2,n):(t.flags|=1048576,n)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,o){return null===t||6!==t.tag?((t=Ts(n,e.mode,o)).return=e,t):((t=r(t,n)).return=e,t)}function s(e,t,n,o){var i=n.type;return i===y?d(e,t,n.props.children,o,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===S&&_i(i)===t.type)?((o=r(t,n.props)).ref=Ci(e,t,n),o.return=e,o):((o=Ms(n.type,n.key,n.props,null,e.mode,o)).ref=Ci(e,t,n),o.return=e,o)}function c(e,t,n,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ns(n,e.mode,o)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function d(e,t,n,o,i){return null===t||7!==t.tag?((t=Hs(n,e.mode,o,i)).return=e,t):((t=r(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ts(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case v:return(n=Ms(t.type,t.key,t.props,null,e.mode,n)).ref=Ci(e,null,t),n.return=e,n;case w:return(t=Ns(t,e.mode,n)).return=e,t;case S:return f(e,(0,t._init)(t._payload),n)}if(te(t)||H(t))return(t=Hs(t,e.mode,n,null)).return=e,t;gi(e,t)}return null}function h(e,t,n,o){var r=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==r?null:l(e,t,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case v:return n.key===r?s(e,t,n,o):null;case w:return n.key===r?c(e,t,n,o):null;case S:return h(e,t,(r=n._init)(n._payload),o)}if(te(n)||H(n))return null!==r?null:d(e,t,n,o,null);gi(e,n)}return null}function m(e,t,n,o,r){if("string"==typeof o&&""!==o||"number"==typeof o)return l(t,e=e.get(n)||null,""+o,r);if("object"==typeof o&&null!==o){switch(o.$$typeof){case v:return s(t,e=e.get(null===o.key?n:o.key)||null,o,r);case w:return c(t,e=e.get(null===o.key?n:o.key)||null,o,r);case S:return m(e,t,n,(0,o._init)(o._payload),r)}if(te(o)||H(o))return d(t,e=e.get(n)||null,o,r,null);gi(t,o)}return null}function A(r,i,u,l){for(var s=null,c=null,d=i,A=i=0,p=null;null!==d&&A<u.length;A++){d.index>A?(p=d,d=null):p=d.sibling;var C=h(r,d,u[A],l);if(null===C){null===d&&(d=p);break}e&&d&&null===C.alternate&&t(r,d),i=a(C,i,A),null===c?s=C:c.sibling=C,c=C,d=p}if(A===u.length)return n(r,d),ii&&Jr(r,A),s;if(null===d){for(;A<u.length;A++)null!==(d=f(r,u[A],l))&&(i=a(d,i,A),null===c?s=d:c.sibling=d,c=d);return ii&&Jr(r,A),s}for(d=o(r,d);A<u.length;A++)null!==(p=m(d,r,A,u[A],l))&&(e&&null!==p.alternate&&d.delete(null===p.key?A:p.key),i=a(p,i,A),null===c?s=p:c.sibling=p,c=p);return e&&d.forEach((function(e){return t(r,e)})),ii&&Jr(r,A),s}function p(r,u,l,s){var c=H(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var d=c=null,A=u,p=u=0,C=null,g=l.next();null!==A&&!g.done;p++,g=l.next()){A.index>p?(C=A,A=null):C=A.sibling;var _=h(r,A,g.value,s);if(null===_){null===A&&(A=C);break}e&&A&&null===_.alternate&&t(r,A),u=a(_,u,p),null===d?c=_:d.sibling=_,d=_,A=C}if(g.done)return n(r,A),ii&&Jr(r,p),c;if(null===A){for(;!g.done;p++,g=l.next())null!==(g=f(r,g.value,s))&&(u=a(g,u,p),null===d?c=g:d.sibling=g,d=g);return ii&&Jr(r,p),c}for(A=o(r,A);!g.done;p++,g=l.next())null!==(g=m(A,r,p,g.value,s))&&(e&&null!==g.alternate&&A.delete(null===g.key?p:g.key),u=a(g,u,p),null===d?c=g:d.sibling=g,d=g);return e&&A.forEach((function(e){return t(r,e)})),ii&&Jr(r,p),c}return function e(o,i,a,l){if("object"==typeof a&&null!==a&&a.type===y&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case v:e:{for(var s=a.key,c=i;null!==c;){if(c.key===s){if((s=a.type)===y){if(7===c.tag){n(o,c.sibling),(i=r(c,a.props.children)).return=o,o=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===S&&_i(s)===c.type){n(o,c.sibling),(i=r(c,a.props)).ref=Ci(o,c,a),i.return=o,o=i;break e}n(o,c);break}t(o,c),c=c.sibling}a.type===y?((i=Hs(a.props.children,o.mode,l,a.key)).return=o,o=i):((l=Ms(a.type,a.key,a.props,null,o.mode,l)).ref=Ci(o,i,a),l.return=o,o=l)}return u(o);case w:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(o,i.sibling),(i=r(i,a.children||[])).return=o,o=i;break e}n(o,i);break}t(o,i),i=i.sibling}(i=Ns(a,o.mode,l)).return=o,o=i}return u(o);case S:return e(o,i,(c=a._init)(a._payload),l)}if(te(a))return A(o,i,a,l);if(H(a))return p(o,i,a,l);gi(o,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(o,i.sibling),(i=r(i,a)).return=o,o=i):(n(o,i),(i=Ts(a,o.mode,l)).return=o,o=i),u(o)):n(o,i)}}var vi=bi(!0),wi=bi(!1),yi=kr(null),Di=null,ki=null,Bi=null;function Ei(){Bi=ki=Di=null}function Ii(e){var t=yi.current;Br(yi),e._currentValue=t}function xi(e,t,n){for(;null!==e;){var o=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==o&&(o.childLanes|=t)):null!==o&&(o.childLanes&t)!==t&&(o.childLanes|=t),e===n)break;e=e.return}}function Li(e,t){Di=e,Bi=ki=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(_u=!0),e.firstContext=null)}function Fi(e){var t=e._currentValue;if(Bi!==e)if(e={context:e,memoizedValue:t,next:null},null===ki){if(null===Di)throw Error(i(308));ki=e,Di.dependencies={lanes:0,firstContext:e}}else ki=ki.next=e;return t}var Si=null;function Vi(e){null===Si?Si=[e]:Si.push(e)}function Mi(e,t,n,o){var r=t.interleaved;return null===r?(n.next=n,Vi(t)):(n.next=r.next,r.next=n),t.interleaved=n,Hi(e,o)}function Hi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var zi=!1;function Ti(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ni(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ri(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Pi(e,t,n){var o=e.updateQueue;if(null===o)return null;if(o=o.shared,2&Il){var r=o.pending;return null===r?t.next=t:(t.next=r.next,r.next=t),o.pending=t,Hi(e,n)}return null===(r=o.interleaved)?(t.next=t,Vi(o)):(t.next=r.next,r.next=t),o.interleaved=t,Hi(e,n)}function Oi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var o=t.lanes;n|=o&=e.pendingLanes,t.lanes=n,gt(e,n)}}function ji(e,t){var n=e.updateQueue,o=e.alternate;if(null!==o&&n===(o=o.updateQueue)){var r=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?r=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?r=i=t:i=i.next=t}else r=i=t;return n={baseState:o.baseState,firstBaseUpdate:r,lastBaseUpdate:i,shared:o.shared,effects:o.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ui(e,t,n,o){var r=e.updateQueue;zi=!1;var i=r.firstBaseUpdate,a=r.lastBaseUpdate,u=r.shared.pending;if(null!==u){r.shared.pending=null;var l=u,s=l.next;l.next=null,null===a?i=s:a.next=s,a=l;var c=e.alternate;null!==c&&(u=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===u?c.firstBaseUpdate=s:u.next=s,c.lastBaseUpdate=l)}if(null!==i){var d=r.baseState;for(a=0,c=s=l=null,u=i;;){var f=u.lane,h=u.eventTime;if((o&f)===f){null!==c&&(c=c.next={eventTime:h,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var m=e,A=u;switch(f=t,h=n,A.tag){case 1:if("function"==typeof(m=A.payload)){d=m.call(h,d,f);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=A.payload)?m.call(h,d,f):m))break e;d=T({},d,f);break e;case 2:zi=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(f=r.effects)?r.effects=[u]:f.push(u))}else h={eventTime:h,lane:f,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===c?(s=c=h,l=d):c=c.next=h,a|=f;if(null===(u=u.next)){if(null===(u=r.shared.pending))break;u=(f=u).next,f.next=null,r.lastBaseUpdate=f,r.shared.pending=null}}if(null===c&&(l=d),r.baseState=l,r.firstBaseUpdate=s,r.lastBaseUpdate=c,null!==(t=r.shared.interleaved)){r=t;do{a|=r.lane,r=r.next}while(r!==t)}else null===i&&(r.shared.lanes=0);zl|=a,e.lanes=a,e.memoizedState=d}}function Zi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var o=e[t],r=o.callback;if(null!==r){if(o.callback=null,o=n,"function"!=typeof r)throw Error(i(191,r));r.call(o)}}}var Qi={},$i=kr(Qi),Wi=kr(Qi),Yi=kr(Qi);function qi(e){if(e===Qi)throw Error(i(174));return e}function Xi(e,t){switch(Er(Yi,t),Er(Wi,e),Er($i,Qi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Br($i),Er($i,t)}function Gi(){Br($i),Br(Wi),Br(Yi)}function Ki(e){qi(Yi.current);var t=qi($i.current),n=le(t,e.type);t!==n&&(Er(Wi,e),Er($i,n))}function Ji(e){Wi.current===e&&(Br($i),Br(Wi))}var ea=kr(0);function ta(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var na=[];function oa(){for(var e=0;e<na.length;e++)na[e]._workInProgressVersionPrimary=null;na.length=0}var ra=b.ReactCurrentDispatcher,ia=b.ReactCurrentBatchConfig,aa=0,ua=null,la=null,sa=null,ca=!1,da=!1,fa=0,ha=0;function ma(){throw Error(i(321))}function Aa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!uo(e[n],t[n]))return!1;return!0}function pa(e,t,n,o,r,a){if(aa=a,ua=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ra.current=null===e||null===e.memoizedState?Ja:eu,e=n(o,r),da){a=0;do{if(da=!1,fa=0,25<=a)throw Error(i(301));a+=1,sa=la=null,t.updateQueue=null,ra.current=tu,e=n(o,r)}while(da)}if(ra.current=Ka,t=null!==la&&null!==la.next,aa=0,sa=la=ua=null,ca=!1,t)throw Error(i(300));return e}function Ca(){var e=0!==fa;return fa=0,e}function ga(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===sa?ua.memoizedState=sa=e:sa=sa.next=e,sa}function _a(){if(null===la){var e=ua.alternate;e=null!==e?e.memoizedState:null}else e=la.next;var t=null===sa?ua.memoizedState:sa.next;if(null!==t)sa=t,la=e;else{if(null===e)throw Error(i(310));e={memoizedState:(la=e).memoizedState,baseState:la.baseState,baseQueue:la.baseQueue,queue:la.queue,next:null},null===sa?ua.memoizedState=sa=e:sa=sa.next=e}return sa}function ba(e,t){return"function"==typeof t?t(e):t}function va(e){var t=_a(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var o=la,r=o.baseQueue,a=n.pending;if(null!==a){if(null!==r){var u=r.next;r.next=a.next,a.next=u}o.baseQueue=r=a,n.pending=null}if(null!==r){a=r.next,o=o.baseState;var l=u=null,s=null,c=a;do{var d=c.lane;if((aa&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),o=c.hasEagerState?c.eagerState:e(o,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(l=s=f,u=o):s=s.next=f,ua.lanes|=d,zl|=d}c=c.next}while(null!==c&&c!==a);null===s?u=o:s.next=l,uo(o,t.memoizedState)||(_u=!0),t.memoizedState=o,t.baseState=u,t.baseQueue=s,n.lastRenderedState=o}if(null!==(e=n.interleaved)){r=e;do{a=r.lane,ua.lanes|=a,zl|=a,r=r.next}while(r!==e)}else null===r&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function wa(e){var t=_a(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var o=n.dispatch,r=n.pending,a=t.memoizedState;if(null!==r){n.pending=null;var u=r=r.next;do{a=e(a,u.action),u=u.next}while(u!==r);uo(a,t.memoizedState)||(_u=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,o]}function ya(){}function Da(e,t){var n=ua,o=_a(),r=t(),a=!uo(o.memoizedState,r);if(a&&(o.memoizedState=r,_u=!0),o=o.queue,za(Ea.bind(null,n,o,e),[e]),o.getSnapshot!==t||a||null!==sa&&1&sa.memoizedState.tag){if(n.flags|=2048,Fa(9,Ba.bind(null,n,o,r,t),void 0,null),null===xl)throw Error(i(349));30&aa||ka(n,t,r)}return r}function ka(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ua.updateQueue)?(t={lastEffect:null,stores:null},ua.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ba(e,t,n,o){t.value=n,t.getSnapshot=o,Ia(t)&&xa(e)}function Ea(e,t,n){return n((function(){Ia(t)&&xa(e)}))}function Ia(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!uo(e,n)}catch(e){return!0}}function xa(e){var t=Hi(e,1);null!==t&&ns(t,e,1,-1)}function La(e){var t=ga();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ba,lastRenderedState:e},t.queue=e,e=e.dispatch=Ya.bind(null,ua,e),[t.memoizedState,e]}function Fa(e,t,n,o){return e={tag:e,create:t,destroy:n,deps:o,next:null},null===(t=ua.updateQueue)?(t={lastEffect:null,stores:null},ua.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(o=n.next,n.next=e,e.next=o,t.lastEffect=e),e}function Sa(){return _a().memoizedState}function Va(e,t,n,o){var r=ga();ua.flags|=e,r.memoizedState=Fa(1|t,n,void 0,void 0===o?null:o)}function Ma(e,t,n,o){var r=_a();o=void 0===o?null:o;var i=void 0;if(null!==la){var a=la.memoizedState;if(i=a.destroy,null!==o&&Aa(o,a.deps))return void(r.memoizedState=Fa(t,n,i,o))}ua.flags|=e,r.memoizedState=Fa(1|t,n,i,o)}function Ha(e,t){return Va(8390656,8,e,t)}function za(e,t){return Ma(2048,8,e,t)}function Ta(e,t){return Ma(4,2,e,t)}function Na(e,t){return Ma(4,4,e,t)}function Ra(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Pa(e,t,n){return n=null!=n?n.concat([e]):null,Ma(4,4,Ra.bind(null,t,e),n)}function Oa(){}function ja(e,t){var n=_a();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&Aa(t,o[1])?o[0]:(n.memoizedState=[e,t],e)}function Ua(e,t){var n=_a();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&Aa(t,o[1])?o[0]:(e=e(),n.memoizedState=[e,t],e)}function Za(e,t,n){return 21&aa?(uo(n,t)||(n=At(),ua.lanes|=n,zl|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,_u=!0),e.memoizedState=n)}function Qa(e,t){var n=_t;_t=0!==n&&4>n?n:4,e(!0);var o=ia.transition;ia.transition={};try{e(!1),t()}finally{_t=n,ia.transition=o}}function $a(){return _a().memoizedState}function Wa(e,t,n){var o=ts(e);n={lane:o,action:n,hasEagerState:!1,eagerState:null,next:null},qa(e)?Xa(t,n):null!==(n=Mi(e,t,n,o))&&(ns(n,e,o,es()),Ga(n,t,o))}function Ya(e,t,n){var o=ts(e),r={lane:o,action:n,hasEagerState:!1,eagerState:null,next:null};if(qa(e))Xa(t,r);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(r.hasEagerState=!0,r.eagerState=u,uo(u,a)){var l=t.interleaved;return null===l?(r.next=r,Vi(t)):(r.next=l.next,l.next=r),void(t.interleaved=r)}}catch(e){}null!==(n=Mi(e,t,r,o))&&(ns(n,e,o,r=es()),Ga(n,t,o))}}function qa(e){var t=e.alternate;return e===ua||null!==t&&t===ua}function Xa(e,t){da=ca=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ga(e,t,n){if(4194240&n){var o=t.lanes;n|=o&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Ka={readContext:Fi,useCallback:ma,useContext:ma,useEffect:ma,useImperativeHandle:ma,useInsertionEffect:ma,useLayoutEffect:ma,useMemo:ma,useReducer:ma,useRef:ma,useState:ma,useDebugValue:ma,useDeferredValue:ma,useTransition:ma,useMutableSource:ma,useSyncExternalStore:ma,useId:ma,unstable_isNewReconciler:!1},Ja={readContext:Fi,useCallback:function(e,t){return ga().memoizedState=[e,void 0===t?null:t],e},useContext:Fi,useEffect:Ha,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Va(4194308,4,Ra.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Va(4194308,4,e,t)},useInsertionEffect:function(e,t){return Va(4,2,e,t)},useMemo:function(e,t){var n=ga();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var o=ga();return t=void 0!==n?n(t):t,o.memoizedState=o.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},o.queue=e,e=e.dispatch=Wa.bind(null,ua,e),[o.memoizedState,e]},useRef:function(e){return e={current:e},ga().memoizedState=e},useState:La,useDebugValue:Oa,useDeferredValue:function(e){return ga().memoizedState=e},useTransition:function(){var e=La(!1),t=e[0];return e=Qa.bind(null,e[1]),ga().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var o=ua,r=ga();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===xl)throw Error(i(349));30&aa||ka(o,t,n)}r.memoizedState=n;var a={value:n,getSnapshot:t};return r.queue=a,Ha(Ea.bind(null,o,a,e),[e]),o.flags|=2048,Fa(9,Ba.bind(null,o,a,n,t),void 0,null),n},useId:function(){var e=ga(),t=xl.identifierPrefix;if(ii){var n=Kr;t=":"+t+"R"+(n=(Gr&~(1<<32-at(Gr)-1)).toString(32)+n),0<(n=fa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ha++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},eu={readContext:Fi,useCallback:ja,useContext:Fi,useEffect:za,useImperativeHandle:Pa,useInsertionEffect:Ta,useLayoutEffect:Na,useMemo:Ua,useReducer:va,useRef:Sa,useState:function(){return va(ba)},useDebugValue:Oa,useDeferredValue:function(e){return Za(_a(),la.memoizedState,e)},useTransition:function(){return[va(ba)[0],_a().memoizedState]},useMutableSource:ya,useSyncExternalStore:Da,useId:$a,unstable_isNewReconciler:!1},tu={readContext:Fi,useCallback:ja,useContext:Fi,useEffect:za,useImperativeHandle:Pa,useInsertionEffect:Ta,useLayoutEffect:Na,useMemo:Ua,useReducer:wa,useRef:Sa,useState:function(){return wa(ba)},useDebugValue:Oa,useDeferredValue:function(e){var t=_a();return null===la?t.memoizedState=e:Za(t,la.memoizedState,e)},useTransition:function(){return[wa(ba)[0],_a().memoizedState]},useMutableSource:ya,useSyncExternalStore:Da,useId:$a,unstable_isNewReconciler:!1};function nu(e,t){if(e&&e.defaultProps){for(var n in t=T({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ou(e,t,n,o){n=null==(n=n(o,t=e.memoizedState))?t:T({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ru={isMounted:function(e){return!!(e=e._reactInternals)&&je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var o=es(),r=ts(e),i=Ri(o,r);i.payload=t,null!=n&&(i.callback=n),null!==(t=Pi(e,i,r))&&(ns(t,e,r,o),Oi(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var o=es(),r=ts(e),i=Ri(o,r);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Pi(e,i,r))&&(ns(t,e,r,o),Oi(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),o=ts(e),r=Ri(n,o);r.tag=2,null!=t&&(r.callback=t),null!==(t=Pi(e,r,o))&&(ns(t,e,o,n),Oi(t,e,o))}};function iu(e,t,n,o,r,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(o,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&lo(n,o)&&lo(r,i))}function au(e,t,n){var o=!1,r=Ir,i=t.contextType;return"object"==typeof i&&null!==i?i=Fi(i):(r=Vr(t)?Fr:xr.current,i=(o=null!=(o=t.contextTypes))?Sr(e,r):Ir),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ru,e.stateNode=t,t._reactInternals=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t}function uu(e,t,n,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&ru.enqueueReplaceState(t,t.state,null)}function lu(e,t,n,o){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs={},Ti(e);var i=t.contextType;"object"==typeof i&&null!==i?r.context=Fi(i):(i=Vr(t)?Fr:xr.current,r.context=Sr(e,i)),r.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(ou(e,t,i,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&ru.enqueueReplaceState(r,r.state,null),Ui(e,n,r,o),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4194308)}function su(e,t){try{var n="",o=t;do{n+=O(o),o=o.return}while(o);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r,digest:null}}function cu(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function du(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=Ri(-1,n)).tag=3,n.payload={element:null};var o=t.value;return n.callback=function(){Zl||(Zl=!0,Ql=o),du(0,t)},n}function mu(e,t,n){(n=Ri(-1,n)).tag=3;var o=e.type.getDerivedStateFromError;if("function"==typeof o){var r=t.value;n.payload=function(){return o(r)},n.callback=function(){du(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){du(0,t),"function"!=typeof o&&(null===$l?$l=new Set([this]):$l.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function Au(e,t,n){var o=e.pingCache;if(null===o){o=e.pingCache=new fu;var r=new Set;o.set(t,r)}else void 0===(r=o.get(t))&&(r=new Set,o.set(t,r));r.has(n)||(r.add(n),e=ks.bind(null,e,t,n),t.then(e,e))}function pu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function Cu(e,t,n,o,r){return 1&e.mode?(e.flags|=65536,e.lanes=r,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ri(-1,1)).tag=2,Pi(n,t,1))),n.lanes|=1),e)}var gu=b.ReactCurrentOwner,_u=!1;function bu(e,t,n,o){t.child=null===e?wi(t,null,n,o):vi(t,e.child,n,o)}function vu(e,t,n,o,r){n=n.render;var i=t.ref;return Li(t,r),o=pa(e,t,n,o,i,r),n=Ca(),null===e||_u?(ii&&n&&ti(t),t.flags|=1,bu(e,t,o,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Zu(e,t,r))}function wu(e,t,n,o,r){if(null===e){var i=n.type;return"function"!=typeof i||Ss(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ms(n.type,null,o,t,t.mode,r)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,yu(e,t,i,o,r))}if(i=e.child,0===(e.lanes&r)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:lo)(a,o)&&e.ref===t.ref)return Zu(e,t,r)}return t.flags|=1,(e=Vs(i,o)).ref=t.ref,e.return=t,t.child=e}function yu(e,t,n,o,r){if(null!==e){var i=e.memoizedProps;if(lo(i,o)&&e.ref===t.ref){if(_u=!1,t.pendingProps=o=i,0===(e.lanes&r))return t.lanes=e.lanes,Zu(e,t,r);131072&e.flags&&(_u=!0)}}return Bu(e,t,n,o,r)}function Du(e,t,n){var o=t.pendingProps,r=o.children,i=null!==e?e.memoizedState:null;if("hidden"===o.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Er(Vl,Sl),Sl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},o=null!==i?i.baseLanes:n,Er(Vl,Sl),Sl|=o}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Er(Vl,Sl),Sl|=n;else null!==i?(o=i.baseLanes|n,t.memoizedState=null):o=n,Er(Vl,Sl),Sl|=o;return bu(e,t,r,n),t.child}function ku(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Bu(e,t,n,o,r){var i=Vr(n)?Fr:xr.current;return i=Sr(t,i),Li(t,r),n=pa(e,t,n,o,i,r),o=Ca(),null===e||_u?(ii&&o&&ti(t),t.flags|=1,bu(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,Zu(e,t,r))}function Eu(e,t,n,o,r){if(Vr(n)){var i=!0;Tr(t)}else i=!1;if(Li(t,r),null===t.stateNode)Uu(e,t),au(t,n,o),lu(t,n,o,r),o=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;s="object"==typeof s&&null!==s?Fi(s):Sr(t,s=Vr(n)?Fr:xr.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==o||l!==s)&&uu(t,a,o,s),zi=!1;var f=t.memoizedState;a.state=f,Ui(t,o,a,r),l=t.memoizedState,u!==o||f!==l||Lr.current||zi?("function"==typeof c&&(ou(t,n,c,o),l=t.memoizedState),(u=zi||iu(t,n,u,o,f,l,s))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=o,t.memoizedState=l),a.props=o,a.state=l,a.context=s,o=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),o=!1)}else{a=t.stateNode,Ni(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:nu(t.type,u),a.props=s,d=t.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Fi(l):Sr(t,l=Vr(n)?Fr:xr.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==d||f!==l)&&uu(t,a,o,l),zi=!1,f=t.memoizedState,a.state=f,Ui(t,o,a,r);var m=t.memoizedState;u!==d||f!==m||Lr.current||zi?("function"==typeof h&&(ou(t,n,h,o),m=t.memoizedState),(s=zi||iu(t,n,s,o,f,m,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(o,m,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(o,m,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=o,t.memoizedState=m),a.props=o,a.state=m,a.context=l,o=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),o=!1)}return Iu(e,t,n,o,i,r)}function Iu(e,t,n,o,r,i){ku(e,t);var a=!!(128&t.flags);if(!o&&!a)return r&&Nr(t,n,!1),Zu(e,t,i);o=t.stateNode,gu.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:o.render();return t.flags|=1,null!==e&&a?(t.child=vi(t,e.child,null,i),t.child=vi(t,null,u,i)):bu(e,t,u,i),t.memoizedState=o.state,r&&Nr(t,n,!0),t.child}function xu(e){var t=e.stateNode;t.pendingContext?Hr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Hr(0,t.context,!1),Xi(e,t.containerInfo)}function Lu(e,t,n,o,r){return mi(),Ai(r),t.flags|=256,bu(e,t,n,o),t.child}var Fu,Su,Vu,Mu,Hu={dehydrated:null,treeContext:null,retryLane:0};function zu(e){return{baseLanes:e,cachePool:null,transitions:null}}function Tu(e,t,n){var o,r=t.pendingProps,a=ea.current,u=!1,l=!!(128&t.flags);if((o=l)||(o=(null===e||null!==e.memoizedState)&&!!(2&a)),o?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Er(ea,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=r.children,e=r.fallback,u?(r=t.mode,u=t.child,l={mode:"hidden",children:l},1&r||null===u?u=zs(l,r,0,null):(u.childLanes=0,u.pendingProps=l),e=Hs(e,r,n,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=zu(n),t.memoizedState=Hu,e):Nu(t,l));if(null!==(a=e.memoizedState)&&null!==(o=a.dehydrated))return function(e,t,n,o,r,a,u){if(n)return 256&t.flags?(t.flags&=-257,Ru(e,t,u,o=cu(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=o.fallback,r=t.mode,o=zs({mode:"visible",children:o.children},r,0,null),(a=Hs(a,r,u,null)).flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,1&t.mode&&vi(t,e.child,null,u),t.child.memoizedState=zu(u),t.memoizedState=Hu,a);if(!(1&t.mode))return Ru(e,t,u,null);if("$!"===r.data){if(o=r.nextSibling&&r.nextSibling.dataset)var l=o.dgst;return o=l,Ru(e,t,u,o=cu(a=Error(i(419)),o,void 0))}if(l=0!==(u&e.childLanes),_u||l){if(null!==(o=xl)){switch(u&-u){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}0!==(r=0!==(r&(o.suspendedLanes|u))?0:r)&&r!==a.retryLane&&(a.retryLane=r,Hi(e,r),ns(o,e,r,-1))}return As(),Ru(e,t,u,o=cu(Error(i(421))))}return"$?"===r.data?(t.flags|=128,t.child=e.child,t=Es.bind(null,e),r._reactRetry=t,null):(e=a.treeContext,ri=cr(r.nextSibling),oi=t,ii=!0,ai=null,null!==e&&(Yr[qr++]=Gr,Yr[qr++]=Kr,Yr[qr++]=Xr,Gr=e.id,Kr=e.overflow,Xr=t),(t=Nu(t,o.children)).flags|=4096,t)}(e,t,l,r,o,a,n);if(u){u=r.fallback,l=t.mode,o=(a=e.child).sibling;var s={mode:"hidden",children:r.children};return 1&l||t.child===a?(r=Vs(a,s)).subtreeFlags=14680064&a.subtreeFlags:((r=t.child).childLanes=0,r.pendingProps=s,t.deletions=null),null!==o?u=Vs(o,u):(u=Hs(u,l,n,null)).flags|=2,u.return=t,r.return=t,r.sibling=u,t.child=r,r=u,u=t.child,l=null===(l=e.child.memoizedState)?zu(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},u.memoizedState=l,u.childLanes=e.childLanes&~n,t.memoizedState=Hu,r}return e=(u=e.child).sibling,r=Vs(u,{mode:"visible",children:r.children}),!(1&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Nu(e,t){return(t=zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ru(e,t,n,o){return null!==o&&Ai(o),vi(t,e.child,null,n),(e=Nu(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Pu(e,t,n){e.lanes|=t;var o=e.alternate;null!==o&&(o.lanes|=t),xi(e.return,t,n)}function Ou(e,t,n,o,r){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:o,tail:n,tailMode:r}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=o,i.tail=n,i.tailMode=r)}function ju(e,t,n){var o=t.pendingProps,r=o.revealOrder,i=o.tail;if(bu(e,t,o.children,n),2&(o=ea.current))o=1&o|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Pu(e,n,t);else if(19===e.tag)Pu(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}o&=1}if(Er(ea,o),1&t.mode)switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===ta(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Ou(t,!1,r,n,i);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===ta(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Ou(t,!0,n,null,i);break;case"together":Ou(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Uu(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Zu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,0===(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Vs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qu(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var o=null;null!==n;)null!==n.alternate&&(o=n),n=n.sibling;null===o?t||null===e.tail?e.tail=null:e.tail.sibling=null:o.sibling=null}}function $u(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,o=0;if(t)for(var r=e.child;null!==r;)n|=r.lanes|r.childLanes,o|=14680064&r.subtreeFlags,o|=14680064&r.flags,r.return=e,r=r.sibling;else for(r=e.child;null!==r;)n|=r.lanes|r.childLanes,o|=r.subtreeFlags,o|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=o,e.childLanes=n,t}function Wu(e,t,n){var o=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return $u(t),null;case 1:case 17:return Vr(t.type)&&Mr(),$u(t),null;case 3:return o=t.stateNode,Gi(),Br(Lr),Br(xr),oa(),o.pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(fi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ai&&(as(ai),ai=null))),Su(e,t),$u(t),null;case 5:Ji(t);var r=qi(Yi.current);if(n=t.type,null!==e&&null!=t.stateNode)Vu(e,t,n,o,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!o){if(null===t.stateNode)throw Error(i(166));return $u(t),null}if(e=qi($i.current),fi(t)){o=t.stateNode,n=t.type;var a=t.memoizedProps;switch(o[hr]=t,o[mr]=a,e=!!(1&t.mode),n){case"dialog":Po("cancel",o),Po("close",o);break;case"iframe":case"object":case"embed":Po("load",o);break;case"video":case"audio":for(r=0;r<zo.length;r++)Po(zo[r],o);break;case"source":Po("error",o);break;case"img":case"image":case"link":Po("error",o),Po("load",o);break;case"details":Po("toggle",o);break;case"input":X(o,a),Po("invalid",o);break;case"select":o._wrapperState={wasMultiple:!!a.multiple},Po("invalid",o);break;case"textarea":re(o,a),Po("invalid",o)}for(var l in ge(n,a),r=null,a)if(a.hasOwnProperty(l)){var s=a[l];"children"===l?"string"==typeof s?o.textContent!==s&&(!0!==a.suppressHydrationWarning&&Jo(o.textContent,s,e),r=["children",s]):"number"==typeof s&&o.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Jo(o.textContent,s,e),r=["children",""+s]):u.hasOwnProperty(l)&&null!=s&&"onScroll"===l&&Po("scroll",o)}switch(n){case"input":$(o),J(o,a,!0);break;case"textarea":$(o),ae(o);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(o.onclick=er)}o=r,t.updateQueue=o,null!==o&&(t.flags|=4)}else{l=9===r.nodeType?r:r.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof o.is?e=l.createElement(n,{is:o.is}):(e=l.createElement(n),"select"===n&&(l=e,o.multiple?l.multiple=!0:o.size&&(l.size=o.size))):e=l.createElementNS(e,n),e[hr]=t,e[mr]=o,Fu(e,t,!1,!1),t.stateNode=e;e:{switch(l=_e(n,o),n){case"dialog":Po("cancel",e),Po("close",e),r=o;break;case"iframe":case"object":case"embed":Po("load",e),r=o;break;case"video":case"audio":for(r=0;r<zo.length;r++)Po(zo[r],e);r=o;break;case"source":Po("error",e),r=o;break;case"img":case"image":case"link":Po("error",e),Po("load",e),r=o;break;case"details":Po("toggle",e),r=o;break;case"input":X(e,o),r=q(e,o),Po("invalid",e);break;case"option":default:r=o;break;case"select":e._wrapperState={wasMultiple:!!o.multiple},r=T({},o,{value:void 0}),Po("invalid",e);break;case"textarea":re(e,o),r=oe(e,o),Po("invalid",e)}for(a in ge(n,r),s=r)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?pe(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(u.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Po("scroll",e):null!=c&&_(e,a,c,l))}switch(n){case"input":$(e),J(e,o,!1);break;case"textarea":$(e),ae(e);break;case"option":null!=o.value&&e.setAttribute("value",""+Z(o.value));break;case"select":e.multiple=!!o.multiple,null!=(a=o.value)?ne(e,!!o.multiple,a,!1):null!=o.defaultValue&&ne(e,!!o.multiple,o.defaultValue,!0);break;default:"function"==typeof r.onClick&&(e.onclick=er)}switch(n){case"button":case"input":case"select":case"textarea":o=!!o.autoFocus;break e;case"img":o=!0;break e;default:o=!1}}o&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return $u(t),null;case 6:if(e&&null!=t.stateNode)Mu(e,t,e.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw Error(i(166));if(n=qi(Yi.current),qi($i.current),fi(t)){if(o=t.stateNode,n=t.memoizedProps,o[hr]=t,(a=o.nodeValue!==n)&&null!==(e=oi))switch(e.tag){case 3:Jo(o.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jo(o.nodeValue,n,!!(1&e.mode))}a&&(t.flags|=4)}else(o=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[hr]=t,t.stateNode=o}return $u(t),null;case 13:if(Br(ea),o=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==ri&&1&t.mode&&!(128&t.flags))hi(),mi(),t.flags|=98560,a=!1;else if(a=fi(t),null!==o&&null!==o.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[hr]=t}else mi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;$u(t),a=!1}else null!==ai&&(as(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((o=null!==o)!=(null!==e&&null!==e.memoizedState)&&o&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ea.current?0===Ml&&(Ml=3):As())),null!==t.updateQueue&&(t.flags|=4),$u(t),null);case 4:return Gi(),Su(e,t),null===e&&Uo(t.stateNode.containerInfo),$u(t),null;case 10:return Ii(t.type._context),$u(t),null;case 19:if(Br(ea),null===(a=t.memoizedState))return $u(t),null;if(o=!!(128&t.flags),null===(l=a.rendering))if(o)Qu(a,!1);else{if(0!==Ml||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ta(e))){for(t.flags|=128,Qu(a,!1),null!==(o=l.updateQueue)&&(t.updateQueue=o,t.flags|=4),t.subtreeFlags=0,o=n,n=t.child;null!==n;)e=o,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Er(ea,1&ea.current|2),t.child}e=e.sibling}null!==a.tail&&Ge()>jl&&(t.flags|=128,o=!0,Qu(a,!1),t.lanes=4194304)}else{if(!o)if(null!==(e=ta(l))){if(t.flags|=128,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Qu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!ii)return $u(t),null}else 2*Ge()-a.renderingStartTime>jl&&1073741824!==n&&(t.flags|=128,o=!0,Qu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Ge(),t.sibling=null,n=ea.current,Er(ea,o?1&n|2:1&n),t):($u(t),null);case 22:case 23:return ds(),o=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==o&&(t.flags|=8192),o&&1&t.mode?!!(1073741824&Sl)&&($u(t),6&t.subtreeFlags&&(t.flags|=8192)):$u(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Yu(e,t){switch(ni(t),t.tag){case 1:return Vr(t.type)&&Mr(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Gi(),Br(Lr),Br(xr),oa(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Ji(t),null;case 13:if(Br(ea),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));mi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Br(ea),null;case 4:return Gi(),null;case 10:return Ii(t.type._context),null;case 22:case 23:return ds(),null;default:return null}}Fu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Su=function(){},Vu=function(e,t,n,o){var r=e.memoizedProps;if(r!==o){e=t.stateNode,qi($i.current);var i,a=null;switch(n){case"input":r=q(e,r),o=q(e,o),a=[];break;case"select":r=T({},r,{value:void 0}),o=T({},o,{value:void 0}),a=[];break;case"textarea":r=oe(e,r),o=oe(e,o),a=[];break;default:"function"!=typeof r.onClick&&"function"==typeof o.onClick&&(e.onclick=er)}for(c in ge(n,o),n=null,r)if(!o.hasOwnProperty(c)&&r.hasOwnProperty(c)&&null!=r[c])if("style"===c){var l=r[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in o){var s=o[c];if(l=null!=r?r[c]:void 0,o.hasOwnProperty(c)&&s!==l&&(null!=s||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&l[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Po("scroll",e),a||l===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Mu=function(e,t,n,o){n!==o&&(t.flags|=4)};var qu=!1,Xu=!1,Gu="function"==typeof WeakSet?WeakSet:Set,Ku=null;function Ju(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ds(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Ds(e,t,n)}}var tl=!1;function nl(e,t,n){var o=t.updateQueue;if(null!==(o=null!==o?o.lastEffect:null)){var r=o=o.next;do{if((r.tag&e)===e){var i=r.destroy;r.destroy=void 0,void 0!==i&&el(t,n,i)}r=r.next}while(r!==o)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var o=n.create;n.destroy=o()}n=n.next}while(n!==t)}}function rl(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[hr],delete t[mr],delete t[pr],delete t[Cr],delete t[gr]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var o=e.tag;if(5===o||6===o)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=er));else if(4!==o&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function sl(e,t,n){var o=e.tag;if(5===o||6===o)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==o&&null!==(e=e.child))for(sl(e,t,n),e=e.sibling;null!==e;)sl(e,t,n),e=e.sibling}var cl=null,dl=!1;function fl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(rt,n)}catch(e){}switch(n.tag){case 5:Xu||Ju(n,t);case 6:var o=cl,r=dl;cl=null,fl(e,t,n),dl=r,null!==(cl=o)&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?sr(e.parentNode,n):1===e.nodeType&&sr(e,n),jt(e)):sr(cl,n.stateNode));break;case 4:o=cl,r=dl,cl=n.stateNode.containerInfo,dl=!0,fl(e,t,n),cl=o,dl=r;break;case 0:case 11:case 14:case 15:if(!Xu&&null!==(o=n.updateQueue)&&null!==(o=o.lastEffect)){r=o=o.next;do{var i=r,a=i.destroy;i=i.tag,void 0!==a&&(2&i||4&i)&&el(n,t,a),r=r.next}while(r!==o)}fl(e,t,n);break;case 1:if(!Xu&&(Ju(n,t),"function"==typeof(o=n.stateNode).componentWillUnmount))try{o.props=n.memoizedProps,o.state=n.memoizedState,o.componentWillUnmount()}catch(e){Ds(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Xu=(o=Xu)||null!==n.memoizedState,fl(e,t,n),Xu=o):fl(e,t,n);break;default:fl(e,t,n)}}function ml(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Gu),t.forEach((function(t){var o=Is.bind(null,e,t);n.has(t)||(n.add(t),t.then(o,o))}))}}function Al(e,t){var n=t.deletions;if(null!==n)for(var o=0;o<n.length;o++){var r=n[o];try{var a=e,u=t,l=u;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,dl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===cl)throw Error(i(160));hl(a,u,r),cl=null,dl=!1;var s=r.alternate;null!==s&&(s.return=null),r.return=null}catch(e){Ds(r,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)pl(t,e),t=t.sibling}function pl(e,t){var n=e.alternate,o=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Al(t,e),Cl(e),4&o){try{nl(3,e,e.return),ol(3,e)}catch(t){Ds(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Ds(e,e.return,t)}}break;case 1:Al(t,e),Cl(e),512&o&&null!==n&&Ju(n,n.return);break;case 5:if(Al(t,e),Cl(e),512&o&&null!==n&&Ju(n,n.return),32&e.flags){var r=e.stateNode;try{fe(r,"")}catch(t){Ds(e,e.return,t)}}if(4&o&&null!=(r=e.stateNode)){var a=e.memoizedProps,u=null!==n?n.memoizedProps:a,l=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===l&&"radio"===a.type&&null!=a.name&&G(r,a),_e(l,u);var c=_e(l,a);for(u=0;u<s.length;u+=2){var d=s[u],f=s[u+1];"style"===d?pe(r,f):"dangerouslySetInnerHTML"===d?de(r,f):"children"===d?fe(r,f):_(r,d,f,c)}switch(l){case"input":K(r,a);break;case"textarea":ie(r,a);break;case"select":var h=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!a.multiple;var m=a.value;null!=m?ne(r,!!a.multiple,m,!1):h!==!!a.multiple&&(null!=a.defaultValue?ne(r,!!a.multiple,a.defaultValue,!0):ne(r,!!a.multiple,a.multiple?[]:"",!1))}r[mr]=a}catch(t){Ds(e,e.return,t)}}break;case 6:if(Al(t,e),Cl(e),4&o){if(null===e.stateNode)throw Error(i(162));r=e.stateNode,a=e.memoizedProps;try{r.nodeValue=a}catch(t){Ds(e,e.return,t)}}break;case 3:if(Al(t,e),Cl(e),4&o&&null!==n&&n.memoizedState.isDehydrated)try{jt(t.containerInfo)}catch(t){Ds(e,e.return,t)}break;case 4:default:Al(t,e),Cl(e);break;case 13:Al(t,e),Cl(e),8192&(r=e.child).flags&&(a=null!==r.memoizedState,r.stateNode.isHidden=a,!a||null!==r.alternate&&null!==r.alternate.memoizedState||(Ol=Ge())),4&o&&ml(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xu=(c=Xu)||d,Al(t,e),Xu=c):Al(t,e),Cl(e),8192&o){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Ku=e,d=e.child;null!==d;){for(f=Ku=d;null!==Ku;){switch(m=(h=Ku).child,h.tag){case 0:case 11:case 14:case 15:nl(4,h,h.return);break;case 1:Ju(h,h.return);var A=h.stateNode;if("function"==typeof A.componentWillUnmount){o=h,n=h.return;try{t=o,A.props=t.memoizedProps,A.state=t.memoizedState,A.componentWillUnmount()}catch(e){Ds(o,n,e)}}break;case 5:Ju(h,h.return);break;case 22:if(null!==h.memoizedState){vl(f);continue}}null!==m?(m.return=h,Ku=m):vl(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{r=f.stateNode,c?"function"==typeof(a=r.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=f.stateNode,u=null!=(s=f.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,l.style.display=Ae("display",u))}catch(t){Ds(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Ds(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:Al(t,e),Cl(e),4&o&&ml(e);case 21:}}function Cl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var o=n;break e}n=n.return}throw Error(i(160))}switch(o.tag){case 5:var r=o.stateNode;32&o.flags&&(fe(r,""),o.flags&=-33),sl(e,ul(e),r);break;case 3:case 4:var a=o.stateNode.containerInfo;ll(e,ul(e),a);break;default:throw Error(i(161))}}catch(t){Ds(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gl(e,t,n){Ku=e,_l(e,t,n)}function _l(e,t,n){for(var o=!!(1&e.mode);null!==Ku;){var r=Ku,i=r.child;if(22===r.tag&&o){var a=null!==r.memoizedState||qu;if(!a){var u=r.alternate,l=null!==u&&null!==u.memoizedState||Xu;u=qu;var s=Xu;if(qu=a,(Xu=l)&&!s)for(Ku=r;null!==Ku;)l=(a=Ku).child,22===a.tag&&null!==a.memoizedState?wl(r):null!==l?(l.return=a,Ku=l):wl(r);for(;null!==i;)Ku=i,_l(i,t,n),i=i.sibling;Ku=r,qu=u,Xu=s}bl(e)}else 8772&r.subtreeFlags&&null!==i?(i.return=r,Ku=i):bl(e)}}function bl(e){for(;null!==Ku;){var t=Ku;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Xu||ol(5,t);break;case 1:var o=t.stateNode;if(4&t.flags&&!Xu)if(null===n)o.componentDidMount();else{var r=t.elementType===t.type?n.memoizedProps:nu(t.type,n.memoizedProps);o.componentDidUpdate(r,n.memoizedState,o.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Zi(t,a,o);break;case 3:var u=t.updateQueue;if(null!==u){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Zi(t,u,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&jt(f)}}}break;default:throw Error(i(163))}Xu||512&t.flags&&rl(t)}catch(e){Ds(t,t.return,e)}}if(t===e){Ku=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ku=n;break}Ku=t.return}}function vl(e){for(;null!==Ku;){var t=Ku;if(t===e){Ku=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ku=n;break}Ku=t.return}}function wl(e){for(;null!==Ku;){var t=Ku;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ol(4,t)}catch(e){Ds(t,n,e)}break;case 1:var o=t.stateNode;if("function"==typeof o.componentDidMount){var r=t.return;try{o.componentDidMount()}catch(e){Ds(t,r,e)}}var i=t.return;try{rl(t)}catch(e){Ds(t,i,e)}break;case 5:var a=t.return;try{rl(t)}catch(e){Ds(t,a,e)}}}catch(e){Ds(t,t.return,e)}if(t===e){Ku=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Ku=u;break}Ku=t.return}}var yl,Dl=Math.ceil,kl=b.ReactCurrentDispatcher,Bl=b.ReactCurrentOwner,El=b.ReactCurrentBatchConfig,Il=0,xl=null,Ll=null,Fl=0,Sl=0,Vl=kr(0),Ml=0,Hl=null,zl=0,Tl=0,Nl=0,Rl=null,Pl=null,Ol=0,jl=1/0,Ul=null,Zl=!1,Ql=null,$l=null,Wl=!1,Yl=null,ql=0,Xl=0,Gl=null,Kl=-1,Jl=0;function es(){return 6&Il?Ge():-1!==Kl?Kl:Kl=Ge()}function ts(e){return 1&e.mode?2&Il&&0!==Fl?Fl&-Fl:null!==pi.transition?(0===Jl&&(Jl=At()),Jl):0!==(e=_t)?e:e=void 0===(e=window.event)?16:Xt(e.type):1}function ns(e,t,n,o){if(50<Xl)throw Xl=0,Gl=null,Error(i(185));Ct(e,n,o),2&Il&&e===xl||(e===xl&&(!(2&Il)&&(Tl|=n),4===Ml&&us(e,Fl)),os(e,o),1===n&&0===Il&&!(1&t.mode)&&(jl=Ge()+500,Pr&&Ur()))}function os(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,o=e.pingedLanes,r=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),u=1<<a,l=r[a];-1===l?0!==(u&n)&&0===(u&o)||(r[a]=ht(u,t)):l<=t&&(e.expiredLanes|=u),i&=~u}}(e,t);var o=ft(e,e===xl?Fl:0);if(0===o)null!==n&&Ye(n),e.callbackNode=null,e.callbackPriority=0;else if(t=o&-o,e.callbackPriority!==t){if(null!=n&&Ye(n),1===t)0===e.tag?function(e){Pr=!0,jr(e)}(ls.bind(null,e)):jr(ls.bind(null,e)),ur((function(){!(6&Il)&&Ur()})),n=null;else{switch(bt(o)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=ot}n=xs(n,rs.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rs(e,t){if(Kl=-1,Jl=0,6&Il)throw Error(i(327));var n=e.callbackNode;if(ws()&&e.callbackNode!==n)return null;var o=ft(e,e===xl?Fl:0);if(0===o)return null;if(30&o||0!==(o&e.expiredLanes)||t)t=ps(e,o);else{t=o;var r=Il;Il|=2;var a=ms();for(xl===e&&Fl===t||(Ul=null,jl=Ge()+500,fs(e,t));;)try{gs();break}catch(t){hs(e,t)}Ei(),kl.current=a,Il=r,null!==Ll?t=0:(xl=null,Fl=0,t=Ml)}if(0!==t){if(2===t&&0!==(r=mt(e))&&(o=r,t=is(e,r)),1===t)throw n=Hl,fs(e,0),us(e,o),os(e,Ge()),n;if(6===t)us(e,o);else{if(r=e.current.alternate,!(30&o||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var o=0;o<n.length;o++){var r=n[o],i=r.getSnapshot;r=r.value;try{if(!uo(i(),r))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(r)||(t=ps(e,o),2===t&&(a=mt(e),0!==a&&(o=a,t=is(e,a))),1!==t)))throw n=Hl,fs(e,0),us(e,o),os(e,Ge()),n;switch(e.finishedWork=r,e.finishedLanes=o,t){case 0:case 1:throw Error(i(345));case 2:case 5:vs(e,Pl,Ul);break;case 3:if(us(e,o),(130023424&o)===o&&10<(t=Ol+500-Ge())){if(0!==ft(e,0))break;if(((r=e.suspendedLanes)&o)!==o){es(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=rr(vs.bind(null,e,Pl,Ul),t);break}vs(e,Pl,Ul);break;case 4:if(us(e,o),(4194240&o)===o)break;for(t=e.eventTimes,r=-1;0<o;){var u=31-at(o);a=1<<u,(u=t[u])>r&&(r=u),o&=~a}if(o=r,10<(o=(120>(o=Ge()-o)?120:480>o?480:1080>o?1080:1920>o?1920:3e3>o?3e3:4320>o?4320:1960*Dl(o/1960))-o)){e.timeoutHandle=rr(vs.bind(null,e,Pl,Ul),o);break}vs(e,Pl,Ul);break;default:throw Error(i(329))}}}return os(e,Ge()),e.callbackNode===n?rs.bind(null,e):null}function is(e,t){var n=Rl;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=ps(e,t))&&(t=Pl,Pl=n,null!==t&&as(t)),e}function as(e){null===Pl?Pl=e:Pl.push.apply(Pl,e)}function us(e,t){for(t&=~Nl,t&=~Tl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),o=1<<n;e[n]=-1,t&=~o}}function ls(e){if(6&Il)throw Error(i(327));ws();var t=ft(e,0);if(!(1&t))return os(e,Ge()),null;var n=ps(e,t);if(0!==e.tag&&2===n){var o=mt(e);0!==o&&(t=o,n=is(e,o))}if(1===n)throw n=Hl,fs(e,0),us(e,t),os(e,Ge()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,vs(e,Pl,Ul),os(e,Ge()),null}function ss(e,t){var n=Il;Il|=1;try{return e(t)}finally{0===(Il=n)&&(jl=Ge()+500,Pr&&Ur())}}function cs(e){null!==Yl&&0===Yl.tag&&!(6&Il)&&ws();var t=Il;Il|=1;var n=El.transition,o=_t;try{if(El.transition=null,_t=1,e)return e()}finally{_t=o,El.transition=n,!(6&(Il=t))&&Ur()}}function ds(){Sl=Vl.current,Br(Vl)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ir(n)),null!==Ll)for(n=Ll.return;null!==n;){var o=n;switch(ni(o),o.tag){case 1:null!=(o=o.type.childContextTypes)&&Mr();break;case 3:Gi(),Br(Lr),Br(xr),oa();break;case 5:Ji(o);break;case 4:Gi();break;case 13:case 19:Br(ea);break;case 10:Ii(o.type._context);break;case 22:case 23:ds()}n=n.return}if(xl=e,Ll=e=Vs(e.current,null),Fl=Sl=t,Ml=0,Hl=null,Nl=Tl=zl=0,Pl=Rl=null,null!==Si){for(t=0;t<Si.length;t++)if(null!==(o=(n=Si[t]).interleaved)){n.interleaved=null;var r=o.next,i=n.pending;if(null!==i){var a=i.next;i.next=r,o.next=a}n.pending=o}Si=null}return e}function hs(e,t){for(;;){var n=Ll;try{if(Ei(),ra.current=Ka,ca){for(var o=ua.memoizedState;null!==o;){var r=o.queue;null!==r&&(r.pending=null),o=o.next}ca=!1}if(aa=0,sa=la=ua=null,da=!1,fa=0,Bl.current=null,null===n||null===n.return){Ml=1,Hl=t,Ll=null;break}e:{var a=e,u=n.return,l=n,s=t;if(t=Fl,l.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=l,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=pu(u);if(null!==m){m.flags&=-257,Cu(m,u,l,0,t),1&m.mode&&Au(a,c,t),s=c;var A=(t=m).updateQueue;if(null===A){var p=new Set;p.add(s),t.updateQueue=p}else A.add(s);break e}if(!(1&t)){Au(a,c,t),As();break e}s=Error(i(426))}else if(ii&&1&l.mode){var C=pu(u);if(null!==C){!(65536&C.flags)&&(C.flags|=256),Cu(C,u,l,0,t),Ai(su(s,l));break e}}a=s=su(s,l),4!==Ml&&(Ml=2),null===Rl?Rl=[a]:Rl.push(a),a=u;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,ji(a,hu(0,s,t));break e;case 1:l=s;var g=a.type,_=a.stateNode;if(!(128&a.flags||"function"!=typeof g.getDerivedStateFromError&&(null===_||"function"!=typeof _.componentDidCatch||null!==$l&&$l.has(_)))){a.flags|=65536,t&=-t,a.lanes|=t,ji(a,mu(a,l,t));break e}}a=a.return}while(null!==a)}bs(n)}catch(e){t=e,Ll===n&&null!==n&&(Ll=n=n.return);continue}break}}function ms(){var e=kl.current;return kl.current=Ka,null===e?Ka:e}function As(){0!==Ml&&3!==Ml&&2!==Ml||(Ml=4),null===xl||!(268435455&zl)&&!(268435455&Tl)||us(xl,Fl)}function ps(e,t){var n=Il;Il|=2;var o=ms();for(xl===e&&Fl===t||(Ul=null,fs(e,t));;)try{Cs();break}catch(t){hs(e,t)}if(Ei(),Il=n,kl.current=o,null!==Ll)throw Error(i(261));return xl=null,Fl=0,Ml}function Cs(){for(;null!==Ll;)_s(Ll)}function gs(){for(;null!==Ll&&!qe();)_s(Ll)}function _s(e){var t=yl(e.alternate,e,Sl);e.memoizedProps=e.pendingProps,null===t?bs(e):Ll=t,Bl.current=null}function bs(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Yu(n,t)))return n.flags&=32767,void(Ll=n);if(null===e)return Ml=6,void(Ll=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Wu(n,t,Sl)))return void(Ll=n);if(null!==(t=t.sibling))return void(Ll=t);Ll=t=e}while(null!==t);0===Ml&&(Ml=5)}function vs(e,t,n){var o=_t,r=El.transition;try{El.transition=null,_t=1,function(e,t,n,o){do{ws()}while(null!==Yl);if(6&Il)throw Error(i(327));n=e.finishedWork;var r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var o=e.eventTimes;for(e=e.expirationTimes;0<n;){var r=31-at(n),i=1<<r;t[r]=0,o[r]=-1,e[r]=-1,n&=~i}}(e,a),e===xl&&(Ll=xl=null,Fl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Wl||(Wl=!0,xs(tt,(function(){return ws(),null}))),a=!!(15990&n.flags),15990&n.subtreeFlags||a){a=El.transition,El.transition=null;var u=_t;_t=1;var l=Il;Il|=4,Bl.current=null,function(e,t){if(tr=Zt,mo(e=ho())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var o=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(o&&0!==o.rangeCount){n=o.anchorNode;var r=o.anchorOffset,a=o.focusNode;o=o.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var u=0,l=-1,s=-1,c=0,d=0,f=e,h=null;t:for(;;){for(var m;f!==n||0!==r&&3!==f.nodeType||(l=u+r),f!==a||0!==o&&3!==f.nodeType||(s=u+o),3===f.nodeType&&(u+=f.nodeValue.length),null!==(m=f.firstChild);)h=f,f=m;for(;;){if(f===e)break t;if(h===n&&++c===r&&(l=u),h===a&&++d===o&&(s=u),null!==(m=f.nextSibling))break;h=(f=h).parentNode}f=m}n=-1===l||-1===s?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(nr={focusedElem:e,selectionRange:n},Zt=!1,Ku=t;null!==Ku;)if(e=(t=Ku).child,1028&t.subtreeFlags&&null!==e)e.return=t,Ku=e;else for(;null!==Ku;){t=Ku;try{var A=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==A){var p=A.memoizedProps,C=A.memoizedState,g=t.stateNode,_=g.getSnapshotBeforeUpdate(t.elementType===t.type?p:nu(t.type,p),C);g.__reactInternalSnapshotBeforeUpdate=_}break;case 3:var b=t.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(i(163))}}catch(e){Ds(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ku=e;break}Ku=t.return}A=tl,tl=!1}(e,n),pl(n,e),Ao(nr),Zt=!!tr,nr=tr=null,e.current=n,gl(n,e,r),Xe(),Il=l,_t=u,El.transition=a}else e.current=n;if(Wl&&(Wl=!1,Yl=e,ql=r),0===(a=e.pendingLanes)&&($l=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(rt,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),os(e,Ge()),null!==t)for(o=e.onRecoverableError,n=0;n<t.length;n++)o((r=t[n]).value,{componentStack:r.stack,digest:r.digest});if(Zl)throw Zl=!1,e=Ql,Ql=null,e;!!(1&ql)&&0!==e.tag&&ws(),1&(a=e.pendingLanes)?e===Gl?Xl++:(Xl=0,Gl=e):Xl=0,Ur()}(e,t,n,o)}finally{El.transition=r,_t=o}return null}function ws(){if(null!==Yl){var e=bt(ql),t=El.transition,n=_t;try{if(El.transition=null,_t=16>e?16:e,null===Yl)var o=!1;else{if(e=Yl,Yl=null,ql=0,6&Il)throw Error(i(331));var r=Il;for(Il|=4,Ku=e.current;null!==Ku;){var a=Ku,u=a.child;if(16&Ku.flags){var l=a.deletions;if(null!==l){for(var s=0;s<l.length;s++){var c=l[s];for(Ku=c;null!==Ku;){var d=Ku;switch(d.tag){case 0:case 11:case 15:nl(8,d,a)}var f=d.child;if(null!==f)f.return=d,Ku=f;else for(;null!==Ku;){var h=(d=Ku).sibling,m=d.return;if(il(d),d===c){Ku=null;break}if(null!==h){h.return=m,Ku=h;break}Ku=m}}}var A=a.alternate;if(null!==A){var p=A.child;if(null!==p){A.child=null;do{var C=p.sibling;p.sibling=null,p=C}while(null!==p)}}Ku=a}}if(2064&a.subtreeFlags&&null!==u)u.return=a,Ku=u;else e:for(;null!==Ku;){if(2048&(a=Ku).flags)switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Ku=g;break e}Ku=a.return}}var _=e.current;for(Ku=_;null!==Ku;){var b=(u=Ku).child;if(2064&u.subtreeFlags&&null!==b)b.return=u,Ku=b;else e:for(u=_;null!==Ku;){if(2048&(l=Ku).flags)try{switch(l.tag){case 0:case 11:case 15:ol(9,l)}}catch(e){Ds(l,l.return,e)}if(l===u){Ku=null;break e}var v=l.sibling;if(null!==v){v.return=l.return,Ku=v;break e}Ku=l.return}}if(Il=r,Ur(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(rt,e)}catch(e){}o=!0}return o}finally{_t=n,El.transition=t}}return!1}function ys(e,t,n){e=Pi(e,t=hu(0,t=su(n,t),1),1),t=es(),null!==e&&(Ct(e,1,t),os(e,t))}function Ds(e,t,n){if(3===e.tag)ys(e,e,n);else for(;null!==t;){if(3===t.tag){ys(t,e,n);break}if(1===t.tag){var o=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof o.componentDidCatch&&(null===$l||!$l.has(o))){t=Pi(t,e=mu(t,e=su(n,e),1),1),e=es(),null!==t&&(Ct(t,1,e),os(t,e));break}}t=t.return}}function ks(e,t,n){var o=e.pingCache;null!==o&&o.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,xl===e&&(Fl&n)===n&&(4===Ml||3===Ml&&(130023424&Fl)===Fl&&500>Ge()-Ol?fs(e,0):Nl|=n),os(e,t)}function Bs(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Hi(e,t))&&(Ct(e,t,n),os(e,n))}function Es(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Bs(e,n)}function Is(e,t){var n=0;switch(e.tag){case 13:var o=e.stateNode,r=e.memoizedState;null!==r&&(n=r.retryLane);break;case 19:o=e.stateNode;break;default:throw Error(i(314))}null!==o&&o.delete(t),Bs(e,n)}function xs(e,t){return We(e,t)}function Ls(e,t,n,o){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Fs(e,t,n,o){return new Ls(e,t,n,o)}function Ss(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vs(e,t){var n=e.alternate;return null===n?((n=Fs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ms(e,t,n,o,r,a){var u=2;if(o=e,"function"==typeof e)Ss(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case y:return Hs(n.children,r,a,t);case D:u=8,r|=8;break;case k:return(e=Fs(12,n,t,2|r)).elementType=k,e.lanes=a,e;case x:return(e=Fs(13,n,t,r)).elementType=x,e.lanes=a,e;case L:return(e=Fs(19,n,t,r)).elementType=L,e.lanes=a,e;case V:return zs(n,r,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:u=10;break e;case E:u=9;break e;case I:u=11;break e;case F:u=14;break e;case S:u=16,o=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fs(u,n,t,r)).elementType=e,t.type=o,t.lanes=a,t}function Hs(e,t,n,o){return(e=Fs(7,e,o,t)).lanes=n,e}function zs(e,t,n,o){return(e=Fs(22,e,o,t)).elementType=V,e.lanes=n,e.stateNode={isHidden:!1},e}function Ts(e,t,n){return(e=Fs(6,e,null,t)).lanes=n,e}function Ns(e,t,n){return(t=Fs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Rs(e,t,n,o,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=pt(0),this.expirationTimes=pt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=pt(0),this.identifierPrefix=o,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Ps(e,t,n,o,r,i,a,u,l){return e=new Rs(e,t,n,u,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Fs(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:o,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ti(i),e}function Os(e){if(!e)return Ir;e:{if(je(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Vr(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Vr(n))return zr(e,n,t)}return t}function js(e,t,n,o,r,i,a,u,l){return(e=Ps(n,o,!0,e,0,i,0,u,l)).context=Os(null),n=e.current,(i=Ri(o=es(),r=ts(n))).callback=null!=t?t:null,Pi(n,i,r),e.current.lanes=r,Ct(e,r,o),os(e,o),e}function Us(e,t,n,o){var r=t.current,i=es(),a=ts(r);return n=Os(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ri(i,a)).payload={element:e},null!==(o=void 0===o?null:o)&&(t.callback=o),null!==(e=Pi(r,t,a))&&(ns(e,r,a,i),Oi(e,r,a)),a}function Zs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $s(e,t){Qs(e,t),(e=e.alternate)&&Qs(e,t)}yl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Lr.current)_u=!0;else{if(0===(e.lanes&n)&&!(128&t.flags))return _u=!1,function(e,t,n){switch(t.tag){case 3:xu(t),mi();break;case 5:Ki(t);break;case 1:Vr(t.type)&&Tr(t);break;case 4:Xi(t,t.stateNode.containerInfo);break;case 10:var o=t.type._context,r=t.memoizedProps.value;Er(yi,o._currentValue),o._currentValue=r;break;case 13:if(null!==(o=t.memoizedState))return null!==o.dehydrated?(Er(ea,1&ea.current),t.flags|=128,null):0!==(n&t.child.childLanes)?Tu(e,t,n):(Er(ea,1&ea.current),null!==(e=Zu(e,t,n))?e.sibling:null);Er(ea,1&ea.current);break;case 19:if(o=0!==(n&t.childLanes),128&e.flags){if(o)return ju(e,t,n);t.flags|=128}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),Er(ea,ea.current),o)break;return null;case 22:case 23:return t.lanes=0,Du(e,t,n)}return Zu(e,t,n)}(e,t,n);_u=!!(131072&e.flags)}else _u=!1,ii&&1048576&t.flags&&ei(t,Wr,t.index);switch(t.lanes=0,t.tag){case 2:var o=t.type;Uu(e,t),e=t.pendingProps;var r=Sr(t,xr.current);Li(t,n),r=pa(null,t,o,e,r,n);var a=Ca();return t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Vr(o)?(a=!0,Tr(t)):a=!1,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,Ti(t),r.updater=ru,t.stateNode=r,r._reactInternals=t,lu(t,o,e,n),t=Iu(null,t,o,!0,a,n)):(t.tag=0,ii&&a&&ti(t),bu(null,t,r,n),t=t.child),t;case 16:o=t.elementType;e:{switch(Uu(e,t),e=t.pendingProps,o=(r=o._init)(o._payload),t.type=o,r=t.tag=function(e){if("function"==typeof e)return Ss(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===F)return 14}return 2}(o),e=nu(o,e),r){case 0:t=Bu(null,t,o,e,n);break e;case 1:t=Eu(null,t,o,e,n);break e;case 11:t=vu(null,t,o,e,n);break e;case 14:t=wu(null,t,o,nu(o.type,e),n);break e}throw Error(i(306,o,""))}return t;case 0:return o=t.type,r=t.pendingProps,Bu(e,t,o,r=t.elementType===o?r:nu(o,r),n);case 1:return o=t.type,r=t.pendingProps,Eu(e,t,o,r=t.elementType===o?r:nu(o,r),n);case 3:e:{if(xu(t),null===e)throw Error(i(387));o=t.pendingProps,r=(a=t.memoizedState).element,Ni(e,t),Ui(t,o,null,n);var u=t.memoizedState;if(o=u.element,a.isDehydrated){if(a={element:o,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Lu(e,t,o,n,r=su(Error(i(423)),t));break e}if(o!==r){t=Lu(e,t,o,n,r=su(Error(i(424)),t));break e}for(ri=cr(t.stateNode.containerInfo.firstChild),oi=t,ii=!0,ai=null,n=wi(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mi(),o===r){t=Zu(e,t,n);break e}bu(e,t,o,n)}t=t.child}return t;case 5:return Ki(t),null===e&&ci(t),o=t.type,r=t.pendingProps,a=null!==e?e.memoizedProps:null,u=r.children,or(o,r)?u=null:null!==a&&or(o,a)&&(t.flags|=32),ku(e,t),bu(e,t,u,n),t.child;case 6:return null===e&&ci(t),null;case 13:return Tu(e,t,n);case 4:return Xi(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=vi(t,null,o,n):bu(e,t,o,n),t.child;case 11:return o=t.type,r=t.pendingProps,vu(e,t,o,r=t.elementType===o?r:nu(o,r),n);case 7:return bu(e,t,t.pendingProps,n),t.child;case 8:case 12:return bu(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(o=t.type._context,r=t.pendingProps,a=t.memoizedProps,u=r.value,Er(yi,o._currentValue),o._currentValue=u,null!==a)if(uo(a.value,u)){if(a.children===r.children&&!Lr.current){t=Zu(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){u=a.child;for(var s=l.firstContext;null!==s;){if(s.context===o){if(1===a.tag){(s=Ri(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),xi(a.return,n,t),l.lanes|=n;break}s=s.next}}else if(10===a.tag)u=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(u=a.return))throw Error(i(341));u.lanes|=n,null!==(l=u.alternate)&&(l.lanes|=n),xi(u,n,t),u=a.sibling}else u=a.child;if(null!==u)u.return=a;else for(u=a;null!==u;){if(u===t){u=null;break}if(null!==(a=u.sibling)){a.return=u.return,u=a;break}u=u.return}a=u}bu(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,o=t.pendingProps.children,Li(t,n),o=o(r=Fi(r)),t.flags|=1,bu(e,t,o,n),t.child;case 14:return r=nu(o=t.type,t.pendingProps),wu(e,t,o,r=nu(o.type,r),n);case 15:return yu(e,t,t.type,t.pendingProps,n);case 17:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:nu(o,r),Uu(e,t),t.tag=1,Vr(o)?(e=!0,Tr(t)):e=!1,Li(t,n),au(t,o,r),lu(t,o,r,n),Iu(null,t,o,!0,e,n);case 19:return ju(e,t,n);case 22:return Du(e,t,n)}throw Error(i(156,t.tag))};var Ws="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function qs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Gs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ks(){}function Js(e,t,n,o,r){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof r){var u=r;r=function(){var e=Zs(a);u.call(e)}}Us(t,a,e,r)}else a=function(e,t,n,o,r){if(r){if("function"==typeof o){var i=o;o=function(){var e=Zs(a);i.call(e)}}var a=js(t,o,e,0,null,!1,0,"",Ks);return e._reactRootContainer=a,e[Ar]=a.current,Uo(8===e.nodeType?e.parentNode:e),cs(),a}for(;r=e.lastChild;)e.removeChild(r);if("function"==typeof o){var u=o;o=function(){var e=Zs(l);u.call(e)}}var l=Ps(e,0,!1,null,0,!1,0,"",Ks);return e._reactRootContainer=l,e[Ar]=l.current,Uo(8===e.nodeType?e.parentNode:e),cs((function(){Us(t,l,n,o)})),l}(n,t,e,r,o);return Zs(a)}qs.prototype.render=Ys.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Us(e,t,null,null)},qs.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Us(null,e,null,null)})),t[Ar]=null}},qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Dt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Vt.length&&0!==t&&t<Vt[n].priority;n++);Vt.splice(n,0,e),0===n&&Tt(e)}},vt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(gt(t,1|n),os(t,Ge()),!(6&Il)&&(jl=Ge()+500,Ur()))}break;case 13:cs((function(){var t=Hi(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),$s(e,1)}},wt=function(e){if(13===e.tag){var t=Hi(e,134217728);null!==t&&ns(t,e,134217728,es()),$s(e,134217728)}},yt=function(e){if(13===e.tag){var t=ts(e),n=Hi(e,t);null!==n&&ns(n,e,t,es()),$s(e,t)}},Dt=function(){return _t},kt=function(e,t){var n=_t;try{return _t=e,t()}finally{_t=n}},we=function(e,t,n){switch(t){case"input":if(K(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var r=wr(o);if(!r)throw Error(i(90));W(o),K(o,r)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ie=ss,xe=cs;var ec={usingClientEntryPoint:!1,Events:[br,vr,wr,Be,Ee,ss]},tc={findFiberByHostInstance:_r,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Qe(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{rt=oc.inject(nc),it=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(i(200));return function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(i(299));var n=!1,o="",r=Ws;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(o=t.identifierPrefix),void 0!==t.onRecoverableError&&(r=t.onRecoverableError)),t=Ps(e,1,!1,null,0,n,0,o,r),e[Ar]=t.current,Uo(8===e.nodeType?e.parentNode:e),new Ys(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Qe(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Gs(t))throw Error(i(200));return Js(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(i(405));var o=null!=n&&n.hydratedSources||null,r=!1,a="",u=Ws;if(null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(u=n.onRecoverableError)),t=js(t,null,e,1,null!=n?n:null,r,0,a,u),e[Ar]=t.current,Uo(e),o)for(e=0;e<o.length;e++)r=(r=(n=o[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,r]:t.mutableSourceEagerHydrationData.push(n,r);return new qs(t)},t.render=function(e,t,n){if(!Gs(t))throw Error(i(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Gs(e))throw Error(i(40));return!!e._reactRootContainer&&(cs((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[Ar]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,o){if(!Gs(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Js(e,t,n,!1,o)},t.version="18.3.1-next-f1338f8080-20240426"},2732:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Stack-Stack-module_stack_e97AoN {\n    position: relative;\n}\n\ndiv.node_modules-\\@tolokoban-ui-lib-dist-view-Stack-Stack-module_stack_e97AoN > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Stack/Stack.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;AACb",sourcesContent:[".stack {\n    position: relative;\n}\n\ndiv.stack > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n}\n"],sourceRoot:""}]),a.locals={stack:"node_modules-@tolokoban-ui-lib-dist-view-Stack-Stack-module_stack_e97AoN"};const u=a},2776:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Combo-Combo-module_ui-view-ComboView_HITkgB {\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Combo-Combo-module_ui-view-ComboView_HITkgB.node_modules-\\@tolokoban-ui-lib-dist-view-Combo-Combo-module_wide_CUxrK3 {\n    display: flex;\n    width: 100%;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Combo/Combo.module.css"],names:[],mappings:"AAAA;IACI,oBAAoB;IACpB,sBAAsB;IACtB,2BAA2B;IAC3B,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,WAAW;AACf",sourcesContent:[".ui-view-ComboView {\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n}\n\n.ui-view-ComboView.wide {\n    display: flex;\n    width: 100%;\n}\n"],sourceRoot:""}]),a.locals={"ui-view-ComboView":"node_modules-@tolokoban-ui-lib-dist-view-Combo-Combo-module_ui-view-ComboView_HITkgB",wide:"node_modules-@tolokoban-ui-lib-dist-view-Combo-Combo-module_wide_CUxrK3"};const u=a},3012:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Spinner-Spinner-module_SpinnerHorizontal_xZCJHR {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Spinner-Spinner-module_SpinnerHorizontal_xZCJHR > svg {\n    width: 1em;\n    height: 1em;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Spinner-Spinner-module_SpinnerVertical_On0vVC {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    gap: 1em;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Spinner-Spinner-module_SpinnerVertical_On0vVC > svg {\n    width: 5em;\n    height: 5em;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Spinner/Spinner.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,UAAU;IACV,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,UAAU;IACV,WAAW;AACf",sourcesContent:[".SpinnerHorizontal {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n}\n\n.SpinnerHorizontal > svg {\n    width: 1em;\n    height: 1em;\n}\n\n.SpinnerVertical {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    gap: 1em;\n}\n\n.SpinnerVertical > svg {\n    width: 5em;\n    height: 5em;\n}\n"],sourceRoot:""}]),a.locals={SpinnerHorizontal:"node_modules-@tolokoban-ui-lib-dist-view-Spinner-Spinner-module_SpinnerHorizontal_xZCJHR",SpinnerVertical:"node_modules-@tolokoban-ui-lib-dist-view-Spinner-Spinner-module_SpinnerVertical_On0vVC"};const u=a},3080:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,'.node_modules-\\@tolokoban-ui-lib-dist-view-Scroll-Scroll-module_Scroll_pHxU4w {\n    --banner-color: var(--theme-color-neutral-7);\n    position: relative;\n    margin: 0;\n    padding: 0;\n    background: var(--theme-color-neutral-7);\n    color: var(--theme-color-on-neutral-7);\n    height: 100%;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Scroll-Scroll-module_Scroll_pHxU4w::before,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Scroll-Scroll-module_Scroll_pHxU4w::after {\n    content: "";\n    position: absolute;\n    width: 100%;\n    height: var(--banner-size);\n    z-index: 1;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Scroll-Scroll-module_Scroll_pHxU4w::before {\n    top: 0;\n    background: linear-gradient(to bottom, var(--banner-color), transparent);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Scroll-Scroll-module_Scroll_pHxU4w::after {\n    bottom: 0;\n    background: linear-gradient(to top, var(--banner-color), transparent);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Scroll-Scroll-module_Scroll_pHxU4w > div {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: auto;\n    z-index: 0;\n    padding: var(--banner-size) 0;\n}\n',"",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Scroll/Scroll.module.css"],names:[],mappings:"AAAA;IACI,4CAA4C;IAC5C,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,wCAAwC;IACxC,sCAAsC;IACtC,YAAY;AAChB;;AAEA;;IAEI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,0BAA0B;IAC1B,UAAU;AACd;;AAEA;IACI,MAAM;IACN,wEAAwE;AAC5E;;AAEA;IACI,SAAS;IACT,qEAAqE;AACzE;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;IACT,UAAU;IACV,cAAc;IACd,UAAU;IACV,6BAA6B;AACjC",sourcesContent:['.Scroll {\n    --banner-color: var(--theme-color-neutral-7);\n    position: relative;\n    margin: 0;\n    padding: 0;\n    background: var(--theme-color-neutral-7);\n    color: var(--theme-color-on-neutral-7);\n    height: 100%;\n}\n\n.Scroll::before,\n.Scroll::after {\n    content: "";\n    position: absolute;\n    width: 100%;\n    height: var(--banner-size);\n    z-index: 1;\n}\n\n.Scroll::before {\n    top: 0;\n    background: linear-gradient(to bottom, var(--banner-color), transparent);\n}\n\n.Scroll::after {\n    bottom: 0;\n    background: linear-gradient(to top, var(--banner-color), transparent);\n}\n\n.Scroll > div {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: auto;\n    z-index: 0;\n    padding: var(--banner-size) 0;\n}\n'],sourceRoot:""}]),a.locals={Scroll:"node_modules-@tolokoban-ui-lib-dist-view-Scroll-Scroll-module_Scroll_pHxU4w"};const u=a},3442:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_main_kUuXyV {\n    font: inherit;\n    border: none;\n    box-shadow: none;\n    text-decoration: none;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin: 0.25rem;\n    cursor: pointer;\n    border-radius: 200vmax;\n    font-size: 80%;\n    padding: 0;\n    line-height: 1.5;\n    max-height: 1.5em;\n    overflow: hidden;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_main_kUuXyV.node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_outline_m0hDhI {\n    border: 1px solid currentColor;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_main_kUuXyV > svg {\n    width: 1.5em;\n    height: 1.5em;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_main_kUuXyV > div.node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_thumbnail_dK6aDZ {\n    overflow: hidden;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_main_kUuXyV > div.node_modules-\\@tolokoban-ui-lib-dist-view-Chip-Chip-module_label_PRV_cD {\n    margin: 0 0.5em;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Chip/Chip.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,qBAAqB;IACrB,oBAAoB;IACpB,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,cAAc;IACd,UAAU;IACV,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,eAAe;AACnB",sourcesContent:[".main {\n    font: inherit;\n    border: none;\n    box-shadow: none;\n    text-decoration: none;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin: 0.25rem;\n    cursor: pointer;\n    border-radius: 200vmax;\n    font-size: 80%;\n    padding: 0;\n    line-height: 1.5;\n    max-height: 1.5em;\n    overflow: hidden;\n}\n\n.main.outline {\n    border: 1px solid currentColor;\n}\n\n.main > svg {\n    width: 1.5em;\n    height: 1.5em;\n}\n\n.main > div.thumbnail {\n    overflow: hidden;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n}\n\n.main > div.label {\n    margin: 0 0.5em;\n}\n"],sourceRoot:""}]),a.locals={main:"node_modules-@tolokoban-ui-lib-dist-view-Chip-Chip-module_main_kUuXyV",outline:"node_modules-@tolokoban-ui-lib-dist-view-Chip-Chip-module_outline_m0hDhI",thumbnail:"node_modules-@tolokoban-ui-lib-dist-view-Chip-Chip-module_thumbnail_dK6aDZ",label:"node_modules-@tolokoban-ui-lib-dist-view-Chip-Chip-module_label_PRV_cD"};const u=a},3580:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Tab-Tab-module_Tab_za7LLe {\n    \n}","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Tab/Tab.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Tab {\n    \n}"],sourceRoot:""}]),a.locals={Tab:"node_modules-@tolokoban-ui-lib-dist-view-Tab-Tab-module_Tab_za7LLe"};const u=a},3608:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Strip-Strip-module_Strip_XwwkHc {\n    display: grid;\n    place-items: stretch;\n    padding: 0;\n    margin: 0;\n    gap: 0;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Strip/Strip.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,oBAAoB;IACpB,UAAU;IACV,SAAS;IACT,MAAM;AACV",sourcesContent:[".Strip {\n    display: grid;\n    place-items: stretch;\n    padding: 0;\n    margin: 0;\n    gap: 0;\n}\n"],sourceRoot:""}]),a.locals={Strip:"node_modules-@tolokoban-ui-lib-dist-view-Strip-Strip-module_Strip_XwwkHc"};const u=a},4050:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC {\n    --custom-color-main-alpha: #f908;\n    --custom-color-main: #f90;\n    --custom-color-text: #000;\n    --custom-thickness: 0.125em;\n    font: inherit;\n    appearance: none;\n    border: none;\n    outline: none;\n    background: none;\n    cursor: pointer;\n    border-radius: 0;\n    transition: all 0.2s;\n    position: relative;\n    font-variant: small-caps;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1em;\n    overflow: hidden;\n    text-decoration: none;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC > * {\n    flex: 0 0 auto;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC > div.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_label_i9PxYv {\n    flex: 1 1 auto;\n    min-width: 0;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    gap: 1em;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_icon_y_nRxq {\n    justify-content: space-between;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC:focus {\n    outline-offset: var(--custom-thickness);\n    outline-style: dotted;\n    outline-width: var(--custom-thickness);\n    outline-color: var(--custom-color-main);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_elevated_Vi6oUq,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_filled_QAPtW1 {\n    background: var(--custom-color-main);\n    color: var(--custom-color-text);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_elevated_Vi6oUq {\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_outlined_BVDWix {\n    border: var(--custom-thickness) solid var(--custom-color-main);\n    color: var(--custom-color-main);\n    background: transparent;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_text_T9PLSd {\n    color: var(--custom-color-text);\n    background: transparent;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC:disabled,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_disabled_tmZJlU {\n    cursor: default;\n    box-shadow: none;\n    opacity: 0.5;\n    pointer-events: none;\n    font-style: italic;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC:not(:disabled):active {\n    transform: translateY(0.25em);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_elevated_Vi6oUq:not(:disabled):active {\n    box-shadow: 0 0.25em 0.5em #0005;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC:not(:disabled):hover {\n    filter: brightness(150%);\n    backdrop-filter: brightness(50%);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_elevated_Vi6oUq:not(:disabled):hover,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC.node_modules-\\@tolokoban-ui-lib-dist-view-Button-Button-module_filled_QAPtW1:not(:disabled):hover {\n    filter: brightness(120%);\n    backdrop-filter: none;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Button/Button.module.css"],names:[],mappings:"AAAA;IACI,gCAAgC;IAChC,yBAAyB;IACzB,yBAAyB;IACzB,2BAA2B;IAC3B,aAAa;IACb,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,eAAe;IACf,gBAAgB;IAChB,oBAAoB;IACpB,kBAAkB;IAClB,wBAAwB;IACxB,oBAAoB;IACpB,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,QAAQ;IACR,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;IACnB,uBAAuB;IACvB,oBAAoB;IACpB,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,uCAAuC;IACvC,qBAAqB;IACrB,sCAAsC;IACtC,uCAAuC;AAC3C;;AAEA;;IAEI,oCAAoC;IACpC,+BAA+B;AACnC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,8DAA8D;IAC9D,+BAA+B;IAC/B,uBAAuB;AAC3B;;AAEA;IACI,+BAA+B;IAC/B,uBAAuB;AAC3B;;AAEA;;IAEI,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,wBAAwB;IACxB,gCAAgC;AACpC;;AAEA;;IAEI,wBAAwB;IACxB,qBAAqB;AACzB",sourcesContent:[".Button {\n    --custom-color-main-alpha: #f908;\n    --custom-color-main: #f90;\n    --custom-color-text: #000;\n    --custom-thickness: 0.125em;\n    font: inherit;\n    appearance: none;\n    border: none;\n    outline: none;\n    background: none;\n    cursor: pointer;\n    border-radius: 0;\n    transition: all 0.2s;\n    position: relative;\n    font-variant: small-caps;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1em;\n    overflow: hidden;\n    text-decoration: none;\n}\n\n.Button > * {\n    flex: 0 0 auto;\n}\n\n.Button > div.label {\n    flex: 1 1 auto;\n    min-width: 0;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    gap: 1em;\n}\n\n.Button.icon {\n    justify-content: space-between;\n}\n\n.Button:focus {\n    outline-offset: var(--custom-thickness);\n    outline-style: dotted;\n    outline-width: var(--custom-thickness);\n    outline-color: var(--custom-color-main);\n}\n\n.Button.elevated,\n.Button.filled {\n    background: var(--custom-color-main);\n    color: var(--custom-color-text);\n}\n\n.Button.elevated {\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.Button.outlined {\n    border: var(--custom-thickness) solid var(--custom-color-main);\n    color: var(--custom-color-main);\n    background: transparent;\n}\n\n.Button.text {\n    color: var(--custom-color-text);\n    background: transparent;\n}\n\n.Button:disabled,\n.disabled {\n    cursor: default;\n    box-shadow: none;\n    opacity: 0.5;\n    pointer-events: none;\n    font-style: italic;\n}\n\n.Button:not(:disabled):active {\n    transform: translateY(0.25em);\n}\n\n.Button.elevated:not(:disabled):active {\n    box-shadow: 0 0.25em 0.5em #0005;\n}\n\n.Button:not(:disabled):hover {\n    filter: brightness(150%);\n    backdrop-filter: brightness(50%);\n}\n\n.Button.elevated:not(:disabled):hover,\n.Button.filled:not(:disabled):hover {\n    filter: brightness(120%);\n    backdrop-filter: none;\n}\n"],sourceRoot:""}]),a.locals={Button:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_Button_QUnudC",label:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_label_i9PxYv",icon:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_icon_y_nRxq",elevated:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_elevated_Vi6oUq",filled:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_filled_QAPtW1",outlined:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_outlined_BVDWix",text:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_text_T9PLSd",disabled:"node_modules-@tolokoban-ui-lib-dist-view-Button-Button-module_disabled_tmZJlU"};const u=a},4160:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-InputImage-InputImage-module_InputImage_xlfXNr {\n    position: relative;\n    background-repeat: repeat;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputImage-InputImage-module_InputImage_xlfXNr > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputImage-InputImage-module_busy_T1dWKQ {\n    transition: all 0.3s;\n    opacity: 1;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputImage-InputImage-module_notBusy_Iu26Fl {\n    transition: all 0.3s;\n    opacity: 0;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/InputImage/InputImage.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,oBAAoB;IACpB,UAAU;AACd;;AAEA;IACI,oBAAoB;IACpB,UAAU;AACd",sourcesContent:[".InputImage {\n    position: relative;\n    background-repeat: repeat;\n}\n\n.InputImage > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.busy {\n    transition: all 0.3s;\n    opacity: 1;\n}\n\n.notBusy {\n    transition: all 0.3s;\n    opacity: 0;\n}\n"],sourceRoot:""}]),a.locals={InputImage:"node_modules-@tolokoban-ui-lib-dist-view-InputImage-InputImage-module_InputImage_xlfXNr",busy:"node_modules-@tolokoban-ui-lib-dist-view-InputImage-InputImage-module_busy_T1dWKQ",notBusy:"node_modules-@tolokoban-ui-lib-dist-view-InputImage-InputImage-module_notBusy_Iu26Fl"};const u=a},4192:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Panel-Panel-module_Panel_BWay5Q {\n    margin: 0;\n    padding: 0;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Panel-Panel-module_Panel_BWay5Q > *.flex-0 {\n    flex: 0 0 auto;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Panel-Panel-module_Panel_BWay5Q > *.flex-1 {\n    flex: 1 1 auto;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Panel/Panel.module.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".Panel {\n    margin: 0;\n    padding: 0;\n}\n\n.Panel > :global(*.flex-0) {\n    flex: 0 0 auto;\n}\n\n.Panel > :global(*.flex-1) {\n    flex: 1 1 auto;\n}\n"],sourceRoot:""}]),a.locals={Panel:"node_modules-@tolokoban-ui-lib-dist-view-Panel-Panel-module_Panel_BWay5Q"};const u=a},4252:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,'.node_modules-\\@tolokoban-ui-lib-dist-view-InputText-InputText-module_InputText_LSYDKY {\n    font: inherit;\n    background: transparent;\n    width: auto;\n    border: 1px solid color-mix(in srgb, currentColor, transparent 90%);\n    background-color: color-mix(\n        in srgb,\n        var(--theme-color-input),\n        transparent 40%\n    );\n    padding: 0 0.5em;\n    line-height: 2em;\n    height: 2em;\n    color: inherit;\n    border-bottom: 2px solid currentColor;\n    transition: all 0.2s;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputText-InputText-module_InputText_LSYDKY:focus {\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n    border: none;\n    outline: none;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputText-InputText-module_InputText_LSYDKY.node_modules-\\@tolokoban-ui-lib-dist-view-InputText-InputText-module_invalid_xAzW1X {\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n}\n\ninput.node_modules-\\@tolokoban-ui-lib-dist-view-InputText-InputText-module_InputText_LSYDKY[type="number"]::-webkit-inner-spin-button,\ninput.node_modules-\\@tolokoban-ui-lib-dist-view-InputText-InputText-module_InputText_LSYDKY[type="number"]::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n}\n\ninput.node_modules-\\@tolokoban-ui-lib-dist-view-InputText-InputText-module_InputText_LSYDKY[type="number"] {\n    -moz-appearance: textfield;\n}\n',"",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/InputText/InputText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX,mEAAmE;IACnE;;;;KAIC;IACD,gBAAgB;IAChB,gBAAgB;IAChB,WAAW;IACX,cAAc;IACd,qCAAqC;IACrC,oBAAoB;AACxB;;AAEA;IACI,0CAA0C;IAC1C,kCAAkC;IAClC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,0CAA0C;IAC1C,kCAAkC;AACtC;;AAEA;;IAEI,wBAAwB;IACxB,SAAS;AACb;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:['.InputText {\n    font: inherit;\n    background: transparent;\n    width: auto;\n    border: 1px solid color-mix(in srgb, currentColor, transparent 90%);\n    background-color: color-mix(\n        in srgb,\n        var(--theme-color-input),\n        transparent 40%\n    );\n    padding: 0 0.5em;\n    line-height: 2em;\n    height: 2em;\n    color: inherit;\n    border-bottom: 2px solid currentColor;\n    transition: all 0.2s;\n}\n\n.InputText:focus {\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n    border: none;\n    outline: none;\n}\n\n.InputText.invalid {\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n}\n\ninput.InputText[type="number"]::-webkit-inner-spin-button,\ninput.InputText[type="number"]::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n}\n\ninput.InputText[type="number"] {\n    -moz-appearance: textfield;\n}\n'],sourceRoot:""}]),a.locals={InputText:"node_modules-@tolokoban-ui-lib-dist-view-InputText-InputText-module_InputText_LSYDKY",invalid:"node_modules-@tolokoban-ui-lib-dist-view-InputText-InputText-module_invalid_xAzW1X"};const u=a},4714:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-modal-provider-module_screen_j2kqFF {\n    position: fixed;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    pointer-events: none;\n    z-index: 999999;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/modal/provider.module.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,UAAU;IACV,oBAAoB;IACpB,eAAe;AACnB",sourcesContent:[".screen {\n    position: fixed;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    pointer-events: none;\n    z-index: 999999;\n}\n"],sourceRoot:""}]),a.locals={screen:"node_modules-@tolokoban-ui-lib-dist-modal-provider-module_screen_j2kqFF"};const u=a},4848:(e,t,n)=>{"use strict";e.exports=n(1020)},4870:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Dialog-Dialog-module_Dialog_Ygfa3B {\n    display: inline-block;\n    --custom-color-header-text: var(--theme-color-on-neutral-4);\n    --custom-color-header-back: var(--theme-color-neutral-4);\n    --custom-color-main-text: var(--theme-color-on-neutral-4);\n    --custom-color-main-back: var(--theme-color-neutral-4);\n    --custom-color-footer-text: var(--theme-color-on-neutral-6);\n    --custom-color-footer-back: var(--theme-color-neutral-6);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Dialog-Dialog-module_Dialog_Ygfa3B > header.node_modules-\\@tolokoban-ui-lib-dist-view-Dialog-Dialog-module_header_G6bQ4S {\n    padding: var(--theme-gap-S) var(--theme-gap-M);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Dialog-Dialog-module_Dialog_Ygfa3B > footer {\n    display: flex;\n    justify-content: space-around;\n    gap: 1em;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Dialog/Dialog.module.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,2DAA2D;IAC3D,wDAAwD;IACxD,yDAAyD;IACzD,sDAAsD;IACtD,2DAA2D;IAC3D,wDAAwD;AAC5D;;AAEA;IACI,8CAA8C;AAClD;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,QAAQ;AACZ",sourcesContent:[".Dialog {\n    display: inline-block;\n    --custom-color-header-text: var(--theme-color-on-neutral-4);\n    --custom-color-header-back: var(--theme-color-neutral-4);\n    --custom-color-main-text: var(--theme-color-on-neutral-4);\n    --custom-color-main-back: var(--theme-color-neutral-4);\n    --custom-color-footer-text: var(--theme-color-on-neutral-6);\n    --custom-color-footer-back: var(--theme-color-neutral-6);\n}\n\n.Dialog > header.header {\n    padding: var(--theme-gap-S) var(--theme-gap-M);\n}\n\n.Dialog > footer {\n    display: flex;\n    justify-content: space-around;\n    gap: 1em;\n}\n"],sourceRoot:""}]),a.locals={Dialog:"node_modules-@tolokoban-ui-lib-dist-view-Dialog-Dialog-module_Dialog_Ygfa3B",header:"node_modules-@tolokoban-ui-lib-dist-view-Dialog-Dialog-module_header_G6bQ4S"};const u=a},5056:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},5072:e=>{"use strict";var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],u=0;u<e.length;u++){var l=e[u],s=o.base?l[0]+o.base:l[0],c=i[s]||0,d="".concat(s," ").concat(c);i[s]=c+1;var f=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var m=r(h,o);o.byIndex=u,t.splice(u,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var u=n(i[a]);t[u].references--}for(var l=o(e,r),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},5287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),o=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),l=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},A=Object.assign,p={};function C(e,t,n){this.props=e,this.context=t,this.refs=p,this.updater=n||m}function g(){}function _(e,t,n){this.props=e,this.context=t,this.refs=p,this.updater=n||m}C.prototype.isReactComponent={},C.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},C.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=C.prototype;var b=_.prototype=new g;b.constructor=_,A(b,C.prototype),b.isPureReactComponent=!0;var v=Array.isArray,w=Object.prototype.hasOwnProperty,y={current:null},D={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,o){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,r)&&!D.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=o;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:n,type:e,key:a,ref:u,props:i,_owner:y.current}}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var E=/\/+/g;function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function x(e,t,r,i,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case o:l=!0}}if(l)return a=a(l=e),e=""===i?"."+I(l,0):i,v(a)?(r="",null!=e&&(r=e.replace(E,"$&/")+"/"),x(a,t,r,"",(function(e){return e}))):null!=a&&(B(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,r+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+e)),t.push(a)),1;if(l=0,i=""===i?".":i+":",v(e))for(var s=0;s<e.length;s++){var c=i+I(u=e[s],s);l+=x(u,t,r,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)l+=x(u=u.value,t,r,c=i+I(u,s++),a);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function L(e,t,n){if(null==e)return e;var o=[],r=0;return x(e,o,"","",(function(e){return t.call(n,e,r++)})),o}function F(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var S={current:null},V={transition:null},M={ReactCurrentDispatcher:S,ReactCurrentBatchConfig:V,ReactCurrentOwner:y};function H(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:L,forEach:function(e,t,n){L(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!B(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=C,t.Fragment=r,t.Profiler=a,t.PureComponent=_,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.act=H,t.cloneElement=function(e,t,o){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=A({},e.props),i=e.key,a=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,u=y.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)w.call(t,s)&&!D.hasOwnProperty(s)&&(r[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)r.children=o;else if(1<s){l=Array(s);for(var c=0;c<s;c++)l[c]=arguments[c+2];r.children=l}return{$$typeof:n,type:e.type,key:i,ref:a,props:r,_owner:u}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=B,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:F}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=V.transition;V.transition={};try{e()}finally{V.transition=t}},t.unstable_act=H,t.useCallback=function(e,t){return S.current.useCallback(e,t)},t.useContext=function(e){return S.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return S.current.useDeferredValue(e)},t.useEffect=function(e,t){return S.current.useEffect(e,t)},t.useId=function(){return S.current.useId()},t.useImperativeHandle=function(e,t,n){return S.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.current.useMemo(e,t)},t.useReducer=function(e,t,n){return S.current.useReducer(e,t,n)},t.useRef=function(e){return S.current.useRef(e)},t.useState=function(e){return S.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.current.useTransition()},t.version="18.3.1"},5338:(e,t,n)=>{"use strict";var o=n(961);t.H=o.createRoot,o.hydrateRoot},5366:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga {\n    --custom-color-back: var(--theme-color-neutral-2);\n    --custom-color-text: var(--theme-color-on-neutral-2);\n    --custom-color-highlight-back: var(--theme-color-primary-5);\n    --custom-color-highlight-text: var(--theme-color-on-primary-5);\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n    gap: 0;\n    margin: 0.25em;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_vertical_wdclJM {\n    flex-direction: row;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > header {\n    flex: 0 0 auto;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: stretch;\n    flex-wrap: wrap-reverse;\n    padding: 0;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_vertical_wdclJM > header {\n    /* flex-direction: column; */\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > header > div {\n    background: var(--custom-color-back);\n    color: var(--custom-color-text);\n    border-top: 2px solid var(--custom-color-highlight-back);\n    border-radius: 2px 2px 0 0;\n    font-weight: bold;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > header > button {\n    all: inherit;\n    display: inline-block;\n    cursor: pointer;\n    transition: all 0.2s;\n    opacity: 0.6;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > header > button:hover,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > header > button:active {\n    background: var(--custom-color-highlight-back);\n    color: var(--custom-color-highlight-text);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > header > button,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > header > div {\n    margin: 0;\n    padding: 0 0.5em;\n    display: grid;\n    place-items: center;\n    height: 2em;\n    max-height: 2em;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_vertical_wdclJM > header > button,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_vertical_wdclJM > header > div {\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga > main {\n    flex: 1 1 auto;\n    padding: 0.5em;\n    background: linear-gradient(\n        to bottom,\n        var(--custom-color-back),\n        transparent\n    );\n    color: var(--custom-color-text);\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Tabs/Tabs.module.css"],names:[],mappings:"AAAA;IACI,iDAAiD;IACjD,oDAAoD;IACpD,2DAA2D;IAC3D,8DAA8D;IAC9D,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,oBAAoB;IACpB,MAAM;IACN,cAAc;AAClB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,oBAAoB;IACpB,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,4BAA4B;IAC5B,yBAAyB;IACzB,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;IACpC,+BAA+B;IAC/B,wDAAwD;IACxD,0BAA0B;IAC1B,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,qBAAqB;IACrB,eAAe;IACf,oBAAoB;IACpB,YAAY;AAChB;;AAEA;;IAEI,8CAA8C;IAC9C,yCAAyC;AAC7C;;AAEA;;IAEI,SAAS;IACT,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,WAAW;IACX,eAAe;IACf,gBAAgB;IAChB,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;;IAEI,yBAAyB;IACzB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,cAAc;IACd;;;;KAIC;IACD,+BAA+B;AACnC",sourcesContent:[".Tabs {\n    --custom-color-back: var(--theme-color-neutral-2);\n    --custom-color-text: var(--theme-color-on-neutral-2);\n    --custom-color-highlight-back: var(--theme-color-primary-5);\n    --custom-color-highlight-text: var(--theme-color-on-primary-5);\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n    gap: 0;\n    margin: 0.25em;\n}\n\n.Tabs.vertical {\n    flex-direction: row;\n}\n\n.Tabs > header {\n    flex: 0 0 auto;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: stretch;\n    flex-wrap: wrap-reverse;\n    padding: 0;\n}\n\n.Tabs.vertical > header {\n    /* flex-direction: column; */\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n}\n\n.Tabs > header > div {\n    background: var(--custom-color-back);\n    color: var(--custom-color-text);\n    border-top: 2px solid var(--custom-color-highlight-back);\n    border-radius: 2px 2px 0 0;\n    font-weight: bold;\n}\n\n.Tabs > header > button {\n    all: inherit;\n    display: inline-block;\n    cursor: pointer;\n    transition: all 0.2s;\n    opacity: 0.6;\n}\n\n.Tabs > header > button:hover,\n.Tabs > header > button:active {\n    background: var(--custom-color-highlight-back);\n    color: var(--custom-color-highlight-text);\n}\n\n.Tabs > header > button,\n.Tabs > header > div {\n    margin: 0;\n    padding: 0 0.5em;\n    display: grid;\n    place-items: center;\n    height: 2em;\n    max-height: 2em;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.Tabs.vertical > header > button,\n.Tabs.vertical > header > div {\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n}\n\n.Tabs > main {\n    flex: 1 1 auto;\n    padding: 0.5em;\n    background: linear-gradient(\n        to bottom,\n        var(--custom-color-back),\n        transparent\n    );\n    color: var(--custom-color-text);\n}\n"],sourceRoot:""}]),a.locals={Tabs:"node_modules-@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_Tabs_Pj8bga",vertical:"node_modules-@tolokoban-ui-lib-dist-view-Tabs-Tabs-module_vertical_wdclJM"};const u=a},6044:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-modal-container-module_container_QCrWEY {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    overflow: auto;\n    pointer-events: all;\n    z-index: 999999;\n    backdrop-filter: blur(1px);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-modal-container-module_L_gXSa9Q {\n    justify-items: start;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-modal-container-module_R_ylDkL7 {\n    justify-items: end;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-modal-container-module_T_sXb6iQ {\n    align-items: start;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-modal-container-module_B_hgl6XV {\n    align-items: end;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/modal/container.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,SAAS;IACT,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,cAAc;IACd,mBAAmB;IACnB,eAAe;IACf,0BAA0B;AAC9B;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[".container {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    overflow: auto;\n    pointer-events: all;\n    z-index: 999999;\n    backdrop-filter: blur(1px);\n}\n\n.L {\n    justify-items: start;\n}\n\n.R {\n    justify-items: end;\n}\n\n.T {\n    align-items: start;\n}\n\n.B {\n    align-items: end;\n}\n"],sourceRoot:""}]),a.locals={container:"node_modules-@tolokoban-ui-lib-dist-modal-container-module_container_QCrWEY",L:"node_modules-@tolokoban-ui-lib-dist-modal-container-module_L_gXSa9Q",R:"node_modules-@tolokoban-ui-lib-dist-modal-container-module_R_ylDkL7",T:"node_modules-@tolokoban-ui-lib-dist-modal-container-module_T_sXb6iQ",B:"node_modules-@tolokoban-ui-lib-dist-modal-container-module_B_hgl6XV"};const u=a},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var u=0;u<this.length;u++){var l=this[u][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},6327:(e,t,n)=>{"use strict";function o(e,t,n=0){var o=new Map;for(let[r,i]of e.entries()){let e=s.unpack_from("<"+i,t,n);n+=s.calcsize(i),1==e.length&&(e=e[0]),o.set(r,e)}return o}function r(e){e||e()}function i(e){var t="<"+Array.from(e.values()).join("");return s.calcsize(t)}function a(e,t=8){return Math.ceil(e/t)*t}n.d(t,{ZH:()=>lr});var u={u:"Uint",i:"Int",f:"Float"};function l(e){var t,n,o=s._is_big_endian(e);if(/S/.test(e))t="getString",n=0|((e.match(/S(\d*)/)||[])[1]||1);else{let[o,r,i]=e.match(/[<>=!@]?(i|u|f)(\d*)/);n=parseInt(i||4,10),t="get"+u[r]+(8*n).toFixed()}return[t,o,n]}var s=new class{constructor(){this.big_endian=function(){const e=new Uint8Array(4);return!((new Uint32Array(e.buffer)[0]=1)&e[0])}(),this.getters={s:"getUint8",b:"getInt8",B:"getUint8",h:"getInt16",H:"getUint16",i:"getInt32",I:"getUint32",l:"getInt32",L:"getUint32",q:"getInt64",Q:"getUint64",e:"getFloat16",f:"getFloat32",d:"getFloat64"},this.byte_lengths={s:1,b:1,B:1,h:2,H:2,i:4,I:4,l:4,L:4,q:8,Q:8,e:2,f:4,d:8};let e=Object.keys(this.byte_lengths).join("");this.fmt_size_regex="(\\d*)(["+e+"])"}calcsize(e){for(var t,n=0,o=new RegExp(this.fmt_size_regex,"g");null!==(t=o.exec(e));){let e=parseInt(t[1]||1,10),o=t[2];n+=e*this.byte_lengths[o]}return n}_is_big_endian(e){return!/^</.test(e)&&(!!/^(!|>)/.test(e)||this.big_endian)}unpack_from(e,t,n){n=Number(n||0);for(var o,r=new c(t,0),i=[],a=this._is_big_endian(e),u=new RegExp(this.fmt_size_regex,"g");null!==(o=u.exec(e));){let e=parseInt(o[1]||1,10),u=o[2],s=this.getters[u],c=this.byte_lengths[u];if("s"==u)i.push((new TextDecoder).decode(t.slice(n,n+e))),n+=e;else for(var l=0;l<e;l++)i.push(r[s](n,!a)),n+=c}return i}},c=class extends DataView{getFloat16(e,t){let n=[this.getUint8(e),this.getUint8(e+1)];t||n.reverse();let[o,r]=n;return function(e,t){let n,o=(124&t)>>2,r=((3&t)<<8)+e;return n=31==o?0==r?1/0:NaN:0==o?2**-14*(r/1024):2**(o-15)*(1+r/1024),(128&t)>>7?-n:n}(o,r)}getUint64(e,t){const n=BigInt(this.getUint32(e,t)),o=BigInt(this.getUint32(e+4,t));return Number(t?n+(o<<32n):(n<<32n)+o)}getInt64(e,t){var n,o;t?(n=this.getUint32(e,!0),o=this.getInt32(e+4,!0)):(o=this.getInt32(e,!1),n=this.getUint32(e+4,!1));let r=BigInt(n)+(BigInt(o)<<32n);return Number(r)}getString(e,t,n){const o=this.buffer.slice(e,e+n);return(new TextDecoder).decode(o)}getVLENStruct(e,t,n){return[this.getUint32(e,t),this.getUint64(e+4,t),this.getUint32(e+12,t)]}};function d(e){return e.toString(2).length}function f(e,t,n=0,o=!0){let r=new Uint8Array(t.slice(n,n+e));return o||r.reverse(),r.reduce(((e,t,n)=>e+(t<<8*n)),0)}var h=class{constructor(e,t){this.buf=e,this.offset=t,this.dtype=this.determine_dtype()}determine_dtype(){let e=o(m,this.buf,this.offset);this.offset+=A;let t=15&e.get("class_and_version");if(t==p)return this._determine_dtype_fixed_point(e);if(t==C)return this._determine_dtype_floating_point(e);if(t==g)throw"Time datatype class not supported.";if(t==_)return this._determine_dtype_string(e);if(t==b)throw"Bitfield datatype class not supported.";if(t==v)throw"Opaque datatype class not supported.";if(t==w)return this._determine_dtype_compound(e);if(t==y)return["REFERENCE",e.get("size")];if(t==D)return this.determine_dtype();if(t==B)throw"Array datatype class not supported.";if(t==k){let t=this._determine_dtype_vlen(e);return"VLEN_SEQUENCE"==t[0]&&(t=["VLEN_SEQUENCE",this.determine_dtype()]),t}throw"Invalid datatype class "+t}_determine_dtype_fixed_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var n,o;return n=(8&e.get("class_bit_field_0"))>0?"i":"u",o=1&e.get("class_bit_field_0")?">":"<",this.offset+=4,o+n+t.toFixed()}_determine_dtype_floating_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var n;return n=1&e.get("class_bit_field_0")?">":"<",this.offset+=12,n+"f"+t.toFixed()}_determine_dtype_string(e){return"S"+e.get("size").toFixed()}_determine_dtype_vlen(e){return 1&~e.get("class_bit_field_0")?["VLEN_SEQUENCE",0,0]:["VLEN_STRING",e.get("class_bit_field_0")>>4,1&e.get("class_bit_field_1")]}_determine_dtype_compound(e){throw"Compound type not yet implemented!"}},m=new Map([["class_and_version","B"],["class_bit_field_0","B"],["class_bit_field_1","B"],["class_bit_field_2","B"],["size","I"]]),A=i(m),p=(i(new Map([["offset","I"],["dimensionality","B"],["reserved_0","B"],["reserved_1","B"],["reserved_2","B"],["permutation","I"],["reserved_3","I"],["dim_size_1","I"],["dim_size_2","I"],["dim_size_3","I"],["dim_size_4","I"]])),0),C=1,g=2,_=3,b=4,v=5,w=6,y=7,D=8,k=9,B=10;function E(e){let t=e.length;for(;--t>=0;)e[t]=0}var I=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),x=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),L=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),F=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),S=new Array(576);E(S);var V=new Array(60);E(V);var M=new Array(512);E(M);var H=new Array(256);E(H);var z=new Array(29);E(z);var T,N,R,P=new Array(30);function O(e,t,n,o,r){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=o,this.max_length=r,this.has_stree=e&&e.length}function j(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}E(P);var U=e=>e<256?M[e]:M[256+(e>>>7)],Z=(e,t)=>{e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255},Q=(e,t,n)=>{e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,Z(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)},$=(e,t,n)=>{Q(e,n[2*t],n[2*t+1])},W=(e,t)=>{let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1},Y=(e,t,n)=>{const o=new Array(16);let r,i,a=0;for(r=1;r<=15;r++)a=a+n[r-1]<<1,o[r]=a;for(i=0;i<=t;i++){let t=e[2*i+1];0!==t&&(e[2*i]=W(o[t]++,t))}},q=e=>{let t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},X=e=>{e.bi_valid>8?Z(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},G=(e,t,n,o)=>{const r=2*t,i=2*n;return e[r]<e[i]||e[r]===e[i]&&o[t]<=o[n]},K=(e,t,n)=>{const o=e.heap[n];let r=n<<1;for(;r<=e.heap_len&&(r<e.heap_len&&G(t,e.heap[r+1],e.heap[r],e.depth)&&r++,!G(t,o,e.heap[r],e.depth));)e.heap[n]=e.heap[r],n=r,r<<=1;e.heap[n]=o},J=(e,t,n)=>{let o,r,i,a,u=0;if(0!==e.sym_next)do{o=255&e.pending_buf[e.sym_buf+u++],o+=(255&e.pending_buf[e.sym_buf+u++])<<8,r=e.pending_buf[e.sym_buf+u++],0===o?$(e,r,t):(i=H[r],$(e,i+256+1,t),a=I[i],0!==a&&(r-=z[i],Q(e,r,a)),o--,i=U(o),$(e,i,n),a=x[i],0!==a&&(o-=P[i],Q(e,o,a)))}while(u<e.sym_next);$(e,256,t)},ee=(e,t)=>{const n=t.dyn_tree,o=t.stat_desc.static_tree,r=t.stat_desc.has_stree,i=t.stat_desc.elems;let a,u,l,s=-1;for(e.heap_len=0,e.heap_max=573,a=0;a<i;a++)0!==n[2*a]?(e.heap[++e.heap_len]=s=a,e.depth[a]=0):n[2*a+1]=0;for(;e.heap_len<2;)l=e.heap[++e.heap_len]=s<2?++s:0,n[2*l]=1,e.depth[l]=0,e.opt_len--,r&&(e.static_len-=o[2*l+1]);for(t.max_code=s,a=e.heap_len>>1;a>=1;a--)K(e,n,a);l=i;do{a=e.heap[1],e.heap[1]=e.heap[e.heap_len--],K(e,n,1),u=e.heap[1],e.heap[--e.heap_max]=a,e.heap[--e.heap_max]=u,n[2*l]=n[2*a]+n[2*u],e.depth[l]=(e.depth[a]>=e.depth[u]?e.depth[a]:e.depth[u])+1,n[2*a+1]=n[2*u+1]=l,e.heap[1]=l++,K(e,n,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],((e,t)=>{const n=t.dyn_tree,o=t.max_code,r=t.stat_desc.static_tree,i=t.stat_desc.has_stree,a=t.stat_desc.extra_bits,u=t.stat_desc.extra_base,l=t.stat_desc.max_length;let s,c,d,f,h,m,A=0;for(f=0;f<=15;f++)e.bl_count[f]=0;for(n[2*e.heap[e.heap_max]+1]=0,s=e.heap_max+1;s<573;s++)c=e.heap[s],f=n[2*n[2*c+1]+1]+1,f>l&&(f=l,A++),n[2*c+1]=f,c>o||(e.bl_count[f]++,h=0,c>=u&&(h=a[c-u]),m=n[2*c],e.opt_len+=m*(f+h),i&&(e.static_len+=m*(r[2*c+1]+h)));if(0!==A){do{for(f=l-1;0===e.bl_count[f];)f--;e.bl_count[f]--,e.bl_count[f+1]+=2,e.bl_count[l]--,A-=2}while(A>0);for(f=l;0!==f;f--)for(c=e.bl_count[f];0!==c;)d=e.heap[--s],d>o||(n[2*d+1]!==f&&(e.opt_len+=(f-n[2*d+1])*n[2*d],n[2*d+1]=f),c--)}})(e,t),Y(n,s,e.bl_count)},te=(e,t,n)=>{let o,r,i=-1,a=t[1],u=0,l=7,s=4;for(0===a&&(l=138,s=3),t[2*(n+1)+1]=65535,o=0;o<=n;o++)r=a,a=t[2*(o+1)+1],++u<l&&r===a||(u<s?e.bl_tree[2*r]+=u:0!==r?(r!==i&&e.bl_tree[2*r]++,e.bl_tree[32]++):u<=10?e.bl_tree[34]++:e.bl_tree[36]++,u=0,i=r,0===a?(l=138,s=3):r===a?(l=6,s=3):(l=7,s=4))},ne=(e,t,n)=>{let o,r,i=-1,a=t[1],u=0,l=7,s=4;for(0===a&&(l=138,s=3),o=0;o<=n;o++)if(r=a,a=t[2*(o+1)+1],!(++u<l&&r===a)){if(u<s)do{$(e,r,e.bl_tree)}while(0!==--u);else 0!==r?(r!==i&&($(e,r,e.bl_tree),u--),$(e,16,e.bl_tree),Q(e,u-3,2)):u<=10?($(e,17,e.bl_tree),Q(e,u-3,3)):($(e,18,e.bl_tree),Q(e,u-11,7));u=0,i=r,0===a?(l=138,s=3):r===a?(l=6,s=3):(l=7,s=4)}},oe=!1,re=(e,t,n,o)=>{Q(e,0+(o?1:0),3),X(e),Z(e,n),Z(e,~n),n&&e.pending_buf.set(e.window.subarray(t,t+n),e.pending),e.pending+=n},ie={_tr_init:e=>{oe||((()=>{let e,t,n,o,r;const i=new Array(16);for(n=0,o=0;o<28;o++)for(z[o]=n,e=0;e<1<<I[o];e++)H[n++]=o;for(H[n-1]=o,r=0,o=0;o<16;o++)for(P[o]=r,e=0;e<1<<x[o];e++)M[r++]=o;for(r>>=7;o<30;o++)for(P[o]=r<<7,e=0;e<1<<x[o]-7;e++)M[256+r++]=o;for(t=0;t<=15;t++)i[t]=0;for(e=0;e<=143;)S[2*e+1]=8,e++,i[8]++;for(;e<=255;)S[2*e+1]=9,e++,i[9]++;for(;e<=279;)S[2*e+1]=7,e++,i[7]++;for(;e<=287;)S[2*e+1]=8,e++,i[8]++;for(Y(S,287,i),e=0;e<30;e++)V[2*e+1]=5,V[2*e]=W(e,5);T=new O(S,I,257,286,15),N=new O(V,x,0,30,15),R=new O(new Array(0),L,0,19,7)})(),oe=!0),e.l_desc=new j(e.dyn_ltree,T),e.d_desc=new j(e.dyn_dtree,N),e.bl_desc=new j(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,q(e)},_tr_stored_block:re,_tr_flush_block:(e,t,n,o)=>{let r,i,a=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=(e=>{let t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0})(e)),ee(e,e.l_desc),ee(e,e.d_desc),a=(e=>{let t;for(te(e,e.dyn_ltree,e.l_desc.max_code),te(e,e.dyn_dtree,e.d_desc.max_code),ee(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*F[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t})(e),r=e.opt_len+3+7>>>3,i=e.static_len+3+7>>>3,i<=r&&(r=i)):r=i=n+5,n+4<=r&&-1!==t?re(e,t,n,o):4===e.strategy||i===r?(Q(e,2+(o?1:0),3),J(e,S,V)):(Q(e,4+(o?1:0),3),((e,t,n,o)=>{let r;for(Q(e,t-257,5),Q(e,n-1,5),Q(e,o-4,4),r=0;r<o;r++)Q(e,e.bl_tree[2*F[r]+1],3);ne(e,e.dyn_ltree,t-1),ne(e,e.dyn_dtree,n-1)})(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),J(e,e.dyn_ltree,e.dyn_dtree)),q(e),o&&X(e)},_tr_tally:(e,t,n)=>(e.pending_buf[e.sym_buf+e.sym_next++]=t,e.pending_buf[e.sym_buf+e.sym_next++]=t>>8,e.pending_buf[e.sym_buf+e.sym_next++]=n,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(H[n]+256+1)]++,e.dyn_dtree[2*U(t)]++),e.sym_next===e.sym_end),_tr_align:e=>{Q(e,2,3),$(e,256,S),(e=>{16===e.bi_valid?(Z(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)})(e)}},ae=(e,t,n,o)=>{let r=65535&e,i=e>>>16&65535,a=0;for(;0!==n;){a=n>2e3?2e3:n,n-=a;do{r=r+t[o++]|0,i=i+r|0}while(--a);r%=65521,i%=65521}return r|i<<16},ue=new Uint32Array((()=>{let e,t=[];for(var n=0;n<256;n++){e=n;for(var o=0;o<8;o++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t})()),le=(e,t,n,o)=>{const r=ue,i=o+n;e^=-1;for(let n=o;n<i;n++)e=e>>>8^r[255&(e^t[n])];return-1^e},se={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},ce={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},{_tr_init:de,_tr_stored_block:fe,_tr_flush_block:he,_tr_tally:me,_tr_align:Ae}=ie,{Z_NO_FLUSH:pe,Z_PARTIAL_FLUSH:Ce,Z_FULL_FLUSH:ge,Z_FINISH:_e,Z_BLOCK:be,Z_OK:ve,Z_STREAM_END:we,Z_STREAM_ERROR:ye,Z_DATA_ERROR:De,Z_BUF_ERROR:ke,Z_DEFAULT_COMPRESSION:Be,Z_FILTERED:Ee,Z_HUFFMAN_ONLY:Ie,Z_RLE:xe,Z_FIXED:Le,Z_DEFAULT_STRATEGY:Fe,Z_UNKNOWN:Se,Z_DEFLATED:Ve}=ce,Me=258,He=262,ze=42,Te=113,Ne=666,Re=(e,t)=>(e.msg=se[t],t),Pe=e=>2*e-(e>4?9:0),Oe=e=>{let t=e.length;for(;--t>=0;)e[t]=0},je=e=>{let t,n,o,r=e.w_size;t=e.hash_size,o=t;do{n=e.head[--o],e.head[o]=n>=r?n-r:0}while(--t);t=r,o=t;do{n=e.prev[--o],e.prev[o]=n>=r?n-r:0}while(--t)},Ue=(e,t,n)=>(t<<e.hash_shift^n)&e.hash_mask,Ze=e=>{const t=e.state;let n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(e.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+n),e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))},Qe=(e,t)=>{he(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Ze(e.strm)},$e=(e,t)=>{e.pending_buf[e.pending++]=t},We=(e,t)=>{e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t},Ye=(e,t,n,o)=>{let r=e.avail_in;return r>o&&(r=o),0===r?0:(e.avail_in-=r,t.set(e.input.subarray(e.next_in,e.next_in+r),n),1===e.state.wrap?e.adler=ae(e.adler,t,r,n):2===e.state.wrap&&(e.adler=le(e.adler,t,r,n)),e.next_in+=r,e.total_in+=r,r)},qe=(e,t)=>{let n,o,r=e.max_chain_length,i=e.strstart,a=e.prev_length,u=e.nice_match;const l=e.strstart>e.w_size-He?e.strstart-(e.w_size-He):0,s=e.window,c=e.w_mask,d=e.prev,f=e.strstart+Me;let h=s[i+a-1],m=s[i+a];e.prev_length>=e.good_match&&(r>>=2),u>e.lookahead&&(u=e.lookahead);do{if(n=t,s[n+a]===m&&s[n+a-1]===h&&s[n]===s[i]&&s[++n]===s[i+1]){i+=2,n++;do{}while(s[++i]===s[++n]&&s[++i]===s[++n]&&s[++i]===s[++n]&&s[++i]===s[++n]&&s[++i]===s[++n]&&s[++i]===s[++n]&&s[++i]===s[++n]&&s[++i]===s[++n]&&i<f);if(o=Me-(f-i),i=f-Me,o>a){if(e.match_start=t,a=o,o>=u)break;h=s[i+a-1],m=s[i+a]}}}while((t=d[t&c])>l&&0!==--r);return a<=e.lookahead?a:e.lookahead},Xe=e=>{const t=e.w_size;let n,o,r;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-He)&&(e.window.set(e.window.subarray(t,t+t-o),0),e.match_start-=t,e.strstart-=t,e.block_start-=t,e.insert>e.strstart&&(e.insert=e.strstart),je(e),o+=t),0===e.strm.avail_in)break;if(n=Ye(e.strm,e.window,e.strstart+e.lookahead,o),e.lookahead+=n,e.lookahead+e.insert>=3)for(r=e.strstart-e.insert,e.ins_h=e.window[r],e.ins_h=Ue(e,e.ins_h,e.window[r+1]);e.insert&&(e.ins_h=Ue(e,e.ins_h,e.window[r+3-1]),e.prev[r&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=r,r++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<He&&0!==e.strm.avail_in)},Ge=(e,t)=>{let n,o,r,i=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,a=0,u=e.strm.avail_in;do{if(n=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r)break;if(r=e.strm.avail_out-r,o=e.strstart-e.block_start,n>o+e.strm.avail_in&&(n=o+e.strm.avail_in),n>r&&(n=r),n<i&&(0===n&&t!==_e||t===pe||n!==o+e.strm.avail_in))break;a=t===_e&&n===o+e.strm.avail_in?1:0,fe(e,0,0,a),e.pending_buf[e.pending-4]=n,e.pending_buf[e.pending-3]=n>>8,e.pending_buf[e.pending-2]=~n,e.pending_buf[e.pending-1]=~n>>8,Ze(e.strm),o&&(o>n&&(o=n),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+o),e.strm.next_out),e.strm.next_out+=o,e.strm.avail_out-=o,e.strm.total_out+=o,e.block_start+=o,n-=o),n&&(Ye(e.strm,e.strm.output,e.strm.next_out,n),e.strm.next_out+=n,e.strm.avail_out-=n,e.strm.total_out+=n)}while(0===a);return u-=e.strm.avail_in,u&&(u>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=u&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-u,e.strm.next_in),e.strstart),e.strstart+=u,e.insert+=u>e.w_size-e.insert?e.w_size-e.insert:u),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),a?4:t!==pe&&t!==_e&&0===e.strm.avail_in&&e.strstart===e.block_start?2:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(Ye(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,i=r>e.w_size?e.w_size:r,o=e.strstart-e.block_start,(o>=i||(o||t===_e)&&t!==pe&&0===e.strm.avail_in&&o<=r)&&(n=o>r?r:o,a=t===_e&&0===e.strm.avail_in&&n===o?1:0,fe(e,e.block_start,n,a),e.block_start+=n,Ze(e.strm)),a?3:1)},Ke=(e,t)=>{let n,o;for(;;){if(e.lookahead<He){if(Xe(e),e.lookahead<He&&t===pe)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=Ue(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-He&&(e.match_length=qe(e,n)),e.match_length>=3)if(o=me(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=Ue(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!==--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=Ue(e,e.ins_h,e.window[e.strstart+1]);else o=me(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(o&&(Qe(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,t===_e?(Qe(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(Qe(e,!1),0===e.strm.avail_out)?1:2},Je=(e,t)=>{let n,o,r;for(;;){if(e.lookahead<He){if(Xe(e),e.lookahead<He&&t===pe)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=Ue(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-He&&(e.match_length=qe(e,n),e.match_length<=5&&(e.strategy===Ee||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){r=e.strstart+e.lookahead-3,o=me(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=r&&(e.ins_h=Ue(e,e.ins_h,e.window[e.strstart+3-1]),n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!==--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,o&&(Qe(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if(o=me(e,0,e.window[e.strstart-1]),o&&Qe(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(o=me(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,t===_e?(Qe(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(Qe(e,!1),0===e.strm.avail_out)?1:2};function et(e,t,n,o,r){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=o,this.func=r}var tt=[new et(0,0,0,0,Ge),new et(4,4,8,4,Ke),new et(4,5,16,8,Ke),new et(4,6,32,32,Ke),new et(4,4,16,16,Je),new et(8,16,32,32,Je),new et(8,16,128,128,Je),new et(8,32,128,256,Je),new et(32,128,258,1024,Je),new et(32,258,258,4096,Je)];function nt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Ve,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),Oe(this.dyn_ltree),Oe(this.dyn_dtree),Oe(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),Oe(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),Oe(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}var ot=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.status!==ze&&57!==t.status&&69!==t.status&&73!==t.status&&91!==t.status&&103!==t.status&&t.status!==Te&&t.status!==Ne?1:0},rt=e=>{if(ot(e))return Re(e,ye);e.total_in=e.total_out=0,e.data_type=Se;const t=e.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=2===t.wrap?57:t.wrap?ze:Te,e.adler=2===t.wrap?0:1,t.last_flush=-2,de(t),ve},it=e=>{const t=rt(e);var n;return t===ve&&((n=e.state).window_size=2*n.w_size,Oe(n.head),n.max_lazy_match=tt[n.level].max_lazy,n.good_match=tt[n.level].good_length,n.nice_match=tt[n.level].nice_length,n.max_chain_length=tt[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=2,n.match_available=0,n.ins_h=0),t},at=(e,t,n,o,r,i)=>{if(!e)return ye;let a=1;if(t===Be&&(t=6),o<0?(a=0,o=-o):o>15&&(a=2,o-=16),r<1||r>9||n!==Ve||o<8||o>15||t<0||t>9||i<0||i>Le||8===o&&1!==a)return Re(e,ye);8===o&&(o=9);const u=new nt;return e.state=u,u.strm=e,u.status=ze,u.wrap=a,u.gzhead=null,u.w_bits=o,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=r+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new Uint8Array(2*u.w_size),u.head=new Uint16Array(u.hash_size),u.prev=new Uint16Array(u.w_size),u.lit_bufsize=1<<r+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new Uint8Array(u.pending_buf_size),u.sym_buf=u.lit_bufsize,u.sym_end=3*(u.lit_bufsize-1),u.level=t,u.strategy=i,u.method=n,it(e)},ut=at,lt=(e,t)=>ot(e)||2!==e.state.wrap?ye:(e.state.gzhead=t,ve),st=(e,t)=>{if(ot(e)||t>be||t<0)return e?Re(e,ye):ye;const n=e.state;if(!e.output||0!==e.avail_in&&!e.input||n.status===Ne&&t!==_e)return Re(e,0===e.avail_out?ke:ye);const o=n.last_flush;if(n.last_flush=t,0!==n.pending){if(Ze(e),0===e.avail_out)return n.last_flush=-1,ve}else if(0===e.avail_in&&Pe(t)<=Pe(o)&&t!==_e)return Re(e,ke);if(n.status===Ne&&0!==e.avail_in)return Re(e,ke);if(n.status===ze&&0===n.wrap&&(n.status=Te),n.status===ze){let t=Ve+(n.w_bits-8<<4)<<8,o=-1;if(o=n.strategy>=Ie||n.level<2?0:n.level<6?1:6===n.level?2:3,t|=o<<6,0!==n.strstart&&(t|=32),t+=31-t%31,We(n,t),0!==n.strstart&&(We(n,e.adler>>>16),We(n,65535&e.adler)),e.adler=1,n.status=Te,Ze(e),0!==n.pending)return n.last_flush=-1,ve}if(57===n.status)if(e.adler=0,$e(n,31),$e(n,139),$e(n,8),n.gzhead)$e(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),$e(n,255&n.gzhead.time),$e(n,n.gzhead.time>>8&255),$e(n,n.gzhead.time>>16&255),$e(n,n.gzhead.time>>24&255),$e(n,9===n.level?2:n.strategy>=Ie||n.level<2?4:0),$e(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&($e(n,255&n.gzhead.extra.length),$e(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=le(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69;else if($e(n,0),$e(n,0),$e(n,0),$e(n,0),$e(n,0),$e(n,9===n.level?2:n.strategy>=Ie||n.level<2?4:0),$e(n,3),n.status=Te,Ze(e),0!==n.pending)return n.last_flush=-1,ve;if(69===n.status){if(n.gzhead.extra){let t=n.pending,o=(65535&n.gzhead.extra.length)-n.gzindex;for(;n.pending+o>n.pending_buf_size;){let r=n.pending_buf_size-n.pending;if(n.pending_buf.set(n.gzhead.extra.subarray(n.gzindex,n.gzindex+r),n.pending),n.pending=n.pending_buf_size,n.gzhead.hcrc&&n.pending>t&&(e.adler=le(e.adler,n.pending_buf,n.pending-t,t)),n.gzindex+=r,Ze(e),0!==n.pending)return n.last_flush=-1,ve;t=0,o-=r}let r=new Uint8Array(n.gzhead.extra);n.pending_buf.set(r.subarray(n.gzindex,n.gzindex+o),n.pending),n.pending+=o,n.gzhead.hcrc&&n.pending>t&&(e.adler=le(e.adler,n.pending_buf,n.pending-t,t)),n.gzindex=0}n.status=73}if(73===n.status){if(n.gzhead.name){let t,o=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>o&&(e.adler=le(e.adler,n.pending_buf,n.pending-o,o)),Ze(e),0!==n.pending)return n.last_flush=-1,ve;o=0}t=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,$e(n,t)}while(0!==t);n.gzhead.hcrc&&n.pending>o&&(e.adler=le(e.adler,n.pending_buf,n.pending-o,o)),n.gzindex=0}n.status=91}if(91===n.status){if(n.gzhead.comment){let t,o=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>o&&(e.adler=le(e.adler,n.pending_buf,n.pending-o,o)),Ze(e),0!==n.pending)return n.last_flush=-1,ve;o=0}t=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,$e(n,t)}while(0!==t);n.gzhead.hcrc&&n.pending>o&&(e.adler=le(e.adler,n.pending_buf,n.pending-o,o))}n.status=103}if(103===n.status){if(n.gzhead.hcrc){if(n.pending+2>n.pending_buf_size&&(Ze(e),0!==n.pending))return n.last_flush=-1,ve;$e(n,255&e.adler),$e(n,e.adler>>8&255),e.adler=0}if(n.status=Te,Ze(e),0!==n.pending)return n.last_flush=-1,ve}if(0!==e.avail_in||0!==n.lookahead||t!==pe&&n.status!==Ne){let o=0===n.level?Ge(n,t):n.strategy===Ie?((e,t)=>{let n;for(;;){if(0===e.lookahead&&(Xe(e),0===e.lookahead)){if(t===pe)return 1;break}if(e.match_length=0,n=me(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(Qe(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===_e?(Qe(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(Qe(e,!1),0===e.strm.avail_out)?1:2})(n,t):n.strategy===xe?((e,t)=>{let n,o,r,i;const a=e.window;for(;;){if(e.lookahead<=Me){if(Xe(e),e.lookahead<=Me&&t===pe)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(r=e.strstart-1,o=a[r],o===a[++r]&&o===a[++r]&&o===a[++r])){i=e.strstart+Me;do{}while(o===a[++r]&&o===a[++r]&&o===a[++r]&&o===a[++r]&&o===a[++r]&&o===a[++r]&&o===a[++r]&&o===a[++r]&&r<i);e.match_length=Me-(i-r),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=me(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=me(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(Qe(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===_e?(Qe(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(Qe(e,!1),0===e.strm.avail_out)?1:2})(n,t):tt[n.level].func(n,t);if(3!==o&&4!==o||(n.status=Ne),1===o||3===o)return 0===e.avail_out&&(n.last_flush=-1),ve;if(2===o&&(t===Ce?Ae(n):t!==be&&(fe(n,0,0,!1),t===ge&&(Oe(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),Ze(e),0===e.avail_out))return n.last_flush=-1,ve}return t!==_e?ve:n.wrap<=0?we:(2===n.wrap?($e(n,255&e.adler),$e(n,e.adler>>8&255),$e(n,e.adler>>16&255),$e(n,e.adler>>24&255),$e(n,255&e.total_in),$e(n,e.total_in>>8&255),$e(n,e.total_in>>16&255),$e(n,e.total_in>>24&255)):(We(n,e.adler>>>16),We(n,65535&e.adler)),Ze(e),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?ve:we)},ct=e=>{if(ot(e))return ye;const t=e.state.status;return e.state=null,t===Te?Re(e,De):ve},dt=(e,t)=>{let n=t.length;if(ot(e))return ye;const o=e.state,r=o.wrap;if(2===r||1===r&&o.status!==ze||o.lookahead)return ye;if(1===r&&(e.adler=ae(e.adler,t,n,0)),o.wrap=0,n>=o.w_size){0===r&&(Oe(o.head),o.strstart=0,o.block_start=0,o.insert=0);let e=new Uint8Array(o.w_size);e.set(t.subarray(n-o.w_size,n),0),t=e,n=o.w_size}const i=e.avail_in,a=e.next_in,u=e.input;for(e.avail_in=n,e.next_in=0,e.input=t,Xe(o);o.lookahead>=3;){let e=o.strstart,t=o.lookahead-2;do{o.ins_h=Ue(o,o.ins_h,o.window[e+3-1]),o.prev[e&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=e,e++}while(--t);o.strstart=e,o.lookahead=2,Xe(o)}return o.strstart+=o.lookahead,o.block_start=o.strstart,o.insert=o.lookahead,o.lookahead=0,o.match_length=o.prev_length=2,o.match_available=0,e.next_in=a,e.input=u,e.avail_in=i,o.wrap=r,ve},ft=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),ht=function(e){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(const t in n)ft(n,t)&&(e[t]=n[t])}}return e},mt=e=>{let t=0;for(let n=0,o=e.length;n<o;n++)t+=e[n].length;const n=new Uint8Array(t);for(let t=0,o=0,r=e.length;t<r;t++){let r=e[t];n.set(r,o),o+=r.length}return n},At=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){At=!1}var pt=new Uint8Array(256);for(let e=0;e<256;e++)pt[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;pt[254]=pt[254]=1;var Ct=e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,n,o,r,i,a=e.length,u=0;for(r=0;r<a;r++)n=e.charCodeAt(r),55296==(64512&n)&&r+1<a&&(o=e.charCodeAt(r+1),56320==(64512&o)&&(n=65536+(n-55296<<10)+(o-56320),r++)),u+=n<128?1:n<2048?2:n<65536?3:4;for(t=new Uint8Array(u),i=0,r=0;i<u;r++)n=e.charCodeAt(r),55296==(64512&n)&&r+1<a&&(o=e.charCodeAt(r+1),56320==(64512&o)&&(n=65536+(n-55296<<10)+(o-56320),r++)),n<128?t[i++]=n:n<2048?(t[i++]=192|n>>>6,t[i++]=128|63&n):n<65536?(t[i++]=224|n>>>12,t[i++]=128|n>>>6&63,t[i++]=128|63&n):(t[i++]=240|n>>>18,t[i++]=128|n>>>12&63,t[i++]=128|n>>>6&63,t[i++]=128|63&n);return t},gt=(e,t)=>{const n=t||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));let o,r;const i=new Array(2*n);for(r=0,o=0;o<n;){let t=e[o++];if(t<128){i[r++]=t;continue}let a=pt[t];if(a>4)i[r++]=65533,o+=a-1;else{for(t&=2===a?31:3===a?15:7;a>1&&o<n;)t=t<<6|63&e[o++],a--;a>1?i[r++]=65533:t<65536?i[r++]=t:(t-=65536,i[r++]=55296|t>>10&1023,i[r++]=56320|1023&t)}}return((e,t)=>{if(t<65534&&e.subarray&&At)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));let n="";for(let o=0;o<t;o++)n+=String.fromCharCode(e[o]);return n})(i,r)},_t=(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let n=t-1;for(;n>=0&&128==(192&e[n]);)n--;return n<0||0===n?t:n+pt[e[n]]>t?n:t},bt=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0},vt=Object.prototype.toString,{Z_NO_FLUSH:wt,Z_SYNC_FLUSH:yt,Z_FULL_FLUSH:Dt,Z_FINISH:kt,Z_OK:Bt,Z_STREAM_END:Et,Z_DEFAULT_COMPRESSION:It,Z_DEFAULT_STRATEGY:xt,Z_DEFLATED:Lt}=ce;function Ft(e){this.options=ht({level:It,method:Lt,chunkSize:16384,windowBits:15,memLevel:8,strategy:xt},e||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new bt,this.strm.avail_out=0;let n=ut(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(n!==Bt)throw new Error(se[n]);if(t.header&&lt(this.strm,t.header),t.dictionary){let e;if(e="string"==typeof t.dictionary?Ct(t.dictionary):"[object ArrayBuffer]"===vt.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,n=dt(this.strm,e),n!==Bt)throw new Error(se[n]);this._dict_set=!0}}function St(e,t){const n=new Ft(t);if(n.push(e,!0),n.err)throw n.msg||se[n.err];return n.result}Ft.prototype.push=function(e,t){const n=this.strm,o=this.options.chunkSize;let r,i;if(this.ended)return!1;for(i=t===~~t?t:!0===t?kt:wt,"string"==typeof e?n.input=Ct(e):"[object ArrayBuffer]"===vt.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;)if(0===n.avail_out&&(n.output=new Uint8Array(o),n.next_out=0,n.avail_out=o),(i===yt||i===Dt)&&n.avail_out<=6)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else{if(r=st(n,i),r===Et)return n.next_out>0&&this.onData(n.output.subarray(0,n.next_out)),r=ct(this.strm),this.onEnd(r),this.ended=!0,r===Bt;if(0!==n.avail_out){if(i>0&&n.next_out>0)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else if(0===n.avail_in)break}else this.onData(n.output)}return!0},Ft.prototype.onData=function(e){this.chunks.push(e)},Ft.prototype.onEnd=function(e){e===Bt&&(this.result=mt(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Vt={Deflate:Ft,deflate:St,deflateRaw:function(e,t){return(t=t||{}).raw=!0,St(e,t)},gzip:function(e,t){return(t=t||{}).gzip=!0,St(e,t)},constants:ce},Mt=16209,Ht=function(e,t){let n,o,r,i,a,u,l,s,c,d,f,h,m,A,p,C,g,_,b,v,w,y,D,k;const B=e.state;n=e.next_in,D=e.input,o=n+(e.avail_in-5),r=e.next_out,k=e.output,i=r-(t-e.avail_out),a=r+(e.avail_out-257),u=B.dmax,l=B.wsize,s=B.whave,c=B.wnext,d=B.window,f=B.hold,h=B.bits,m=B.lencode,A=B.distcode,p=(1<<B.lenbits)-1,C=(1<<B.distbits)-1;e:do{h<15&&(f+=D[n++]<<h,h+=8,f+=D[n++]<<h,h+=8),g=m[f&p];t:for(;;){if(_=g>>>24,f>>>=_,h-=_,_=g>>>16&255,0===_)k[r++]=65535&g;else{if(!(16&_)){if(64&_){if(32&_){B.mode=16191;break e}e.msg="invalid literal/length code",B.mode=Mt;break e}g=m[(65535&g)+(f&(1<<_)-1)];continue t}for(b=65535&g,_&=15,_&&(h<_&&(f+=D[n++]<<h,h+=8),b+=f&(1<<_)-1,f>>>=_,h-=_),h<15&&(f+=D[n++]<<h,h+=8,f+=D[n++]<<h,h+=8),g=A[f&C];;){if(_=g>>>24,f>>>=_,h-=_,_=g>>>16&255,16&_){if(v=65535&g,_&=15,h<_&&(f+=D[n++]<<h,h+=8,h<_&&(f+=D[n++]<<h,h+=8)),v+=f&(1<<_)-1,v>u){e.msg="invalid distance too far back",B.mode=Mt;break e}if(f>>>=_,h-=_,_=r-i,v>_){if(_=v-_,_>s&&B.sane){e.msg="invalid distance too far back",B.mode=Mt;break e}if(w=0,y=d,0===c){if(w+=l-_,_<b){b-=_;do{k[r++]=d[w++]}while(--_);w=r-v,y=k}}else if(c<_){if(w+=l+c-_,_-=c,_<b){b-=_;do{k[r++]=d[w++]}while(--_);if(w=0,c<b){_=c,b-=_;do{k[r++]=d[w++]}while(--_);w=r-v,y=k}}}else if(w+=c-_,_<b){b-=_;do{k[r++]=d[w++]}while(--_);w=r-v,y=k}for(;b>2;)k[r++]=y[w++],k[r++]=y[w++],k[r++]=y[w++],b-=3;b&&(k[r++]=y[w++],b>1&&(k[r++]=y[w++]))}else{w=r-v;do{k[r++]=k[w++],k[r++]=k[w++],k[r++]=k[w++],b-=3}while(b>2);b&&(k[r++]=k[w++],b>1&&(k[r++]=k[w++]))}break}if(64&_){e.msg="invalid distance code",B.mode=Mt;break e}g=A[(65535&g)+(f&(1<<_)-1)]}}break}}while(n<o&&r<a);b=h>>3,n-=b,h-=b<<3,f&=(1<<h)-1,e.next_in=n,e.next_out=r,e.avail_in=n<o?o-n+5:5-(n-o),e.avail_out=r<a?a-r+257:257-(r-a),B.hold=f,B.bits=h},zt=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Tt=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Nt=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Rt=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Pt=(e,t,n,o,r,i,a,u)=>{const l=u.bits;let s,c,d,f,h,m,A=0,p=0,C=0,g=0,_=0,b=0,v=0,w=0,y=0,D=0,k=null;const B=new Uint16Array(16),E=new Uint16Array(16);let I,x,L,F=null;for(A=0;A<=15;A++)B[A]=0;for(p=0;p<o;p++)B[t[n+p]]++;for(_=l,g=15;g>=1&&0===B[g];g--);if(_>g&&(_=g),0===g)return r[i++]=20971520,r[i++]=20971520,u.bits=1,0;for(C=1;C<g&&0===B[C];C++);for(_<C&&(_=C),w=1,A=1;A<=15;A++)if(w<<=1,w-=B[A],w<0)return-1;if(w>0&&(0===e||1!==g))return-1;for(E[1]=0,A=1;A<15;A++)E[A+1]=E[A]+B[A];for(p=0;p<o;p++)0!==t[n+p]&&(a[E[t[n+p]]++]=p);if(0===e?(k=F=a,m=20):1===e?(k=zt,F=Tt,m=257):(k=Nt,F=Rt,m=0),D=0,p=0,A=C,h=i,b=_,v=0,d=-1,y=1<<_,f=y-1,1===e&&y>852||2===e&&y>592)return 1;for(;;){I=A-v,a[p]+1<m?(x=0,L=a[p]):a[p]>=m?(x=F[a[p]-m],L=k[a[p]-m]):(x=96,L=0),s=1<<A-v,c=1<<b,C=c;do{c-=s,r[h+(D>>v)+c]=I<<24|x<<16|L}while(0!==c);for(s=1<<A-1;D&s;)s>>=1;if(0!==s?(D&=s-1,D+=s):D=0,p++,0===--B[A]){if(A===g)break;A=t[n+a[p]]}if(A>_&&(D&f)!==d){for(0===v&&(v=_),h+=C,b=A-v,w=1<<b;b+v<g&&(w-=B[b+v],!(w<=0));)b++,w<<=1;if(y+=1<<b,1===e&&y>852||2===e&&y>592)return 1;d=D&f,r[d]=_<<24|b<<16|h-i}}return 0!==D&&(r[h+D]=A-v<<24|64<<16),u.bits=_,0},{Z_FINISH:Ot,Z_BLOCK:jt,Z_TREES:Ut,Z_OK:Zt,Z_STREAM_END:Qt,Z_NEED_DICT:$t,Z_STREAM_ERROR:Wt,Z_DATA_ERROR:Yt,Z_MEM_ERROR:qt,Z_BUF_ERROR:Xt,Z_DEFLATED:Gt}=ce,Kt=16180,Jt=16190,en=16191,tn=16192,nn=16194,on=16199,rn=16200,an=16206,un=16209,ln=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function sn(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}var cn,dn,fn=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.mode<Kt||t.mode>16211?1:0},hn=e=>{if(fn(e))return Wt;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=Kt,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,Zt},mn=e=>{if(fn(e))return Wt;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,hn(e)},An=(e,t)=>{let n;if(fn(e))return Wt;const o=e.state;return t<0?(n=0,t=-t):(n=5+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?Wt:(null!==o.window&&o.wbits!==t&&(o.window=null),o.wrap=n,o.wbits=t,mn(e))},pn=(e,t)=>{if(!e)return Wt;const n=new sn;e.state=n,n.strm=e,n.window=null,n.mode=Kt;const o=An(e,t);return o!==Zt&&(e.state=null),o},Cn=!0,gn=e=>{if(Cn){cn=new Int32Array(512),dn=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(Pt(1,e.lens,0,288,cn,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;Pt(2,e.lens,0,32,dn,0,e.work,{bits:5}),Cn=!1}e.lencode=cn,e.lenbits=9,e.distcode=dn,e.distbits=5},_n=(e,t,n,o)=>{let r;const i=e.state;return null===i.window&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new Uint8Array(i.wsize)),o>=i.wsize?(i.window.set(t.subarray(n-i.wsize,n),0),i.wnext=0,i.whave=i.wsize):(r=i.wsize-i.wnext,r>o&&(r=o),i.window.set(t.subarray(n-o,n-o+r),i.wnext),(o-=r)?(i.window.set(t.subarray(n-o,n),0),i.wnext=o,i.whave=i.wsize):(i.wnext+=r,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=r))),0},bn=mn,vn=pn,wn=(e,t)=>{let n,o,r,i,a,u,l,s,c,d,f,h,m,A,p,C,g,_,b,v,w,y,D=0;const k=new Uint8Array(4);let B,E;const I=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(fn(e)||!e.output||!e.input&&0!==e.avail_in)return Wt;n=e.state,n.mode===en&&(n.mode=tn),a=e.next_out,r=e.output,l=e.avail_out,i=e.next_in,o=e.input,u=e.avail_in,s=n.hold,c=n.bits,d=u,f=l,y=Zt;e:for(;;)switch(n.mode){case Kt:if(0===n.wrap){n.mode=tn;break}for(;c<16;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(2&n.wrap&&35615===s){0===n.wbits&&(n.wbits=15),n.check=0,k[0]=255&s,k[1]=s>>>8&255,n.check=le(n.check,k,2,0),s=0,c=0,n.mode=16181;break}if(n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&s)<<8)+(s>>8))%31){e.msg="incorrect header check",n.mode=un;break}if((15&s)!==Gt){e.msg="unknown compression method",n.mode=un;break}if(s>>>=4,c-=4,w=8+(15&s),0===n.wbits&&(n.wbits=w),w>15||w>n.wbits){e.msg="invalid window size",n.mode=un;break}n.dmax=1<<n.wbits,n.flags=0,e.adler=n.check=1,n.mode=512&s?16189:en,s=0,c=0;break;case 16181:for(;c<16;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(n.flags=s,(255&n.flags)!==Gt){e.msg="unknown compression method",n.mode=un;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=un;break}n.head&&(n.head.text=s>>8&1),512&n.flags&&4&n.wrap&&(k[0]=255&s,k[1]=s>>>8&255,n.check=le(n.check,k,2,0)),s=0,c=0,n.mode=16182;case 16182:for(;c<32;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}n.head&&(n.head.time=s),512&n.flags&&4&n.wrap&&(k[0]=255&s,k[1]=s>>>8&255,k[2]=s>>>16&255,k[3]=s>>>24&255,n.check=le(n.check,k,4,0)),s=0,c=0,n.mode=16183;case 16183:for(;c<16;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}n.head&&(n.head.xflags=255&s,n.head.os=s>>8),512&n.flags&&4&n.wrap&&(k[0]=255&s,k[1]=s>>>8&255,n.check=le(n.check,k,2,0)),s=0,c=0,n.mode=16184;case 16184:if(1024&n.flags){for(;c<16;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}n.length=s,n.head&&(n.head.extra_len=s),512&n.flags&&4&n.wrap&&(k[0]=255&s,k[1]=s>>>8&255,n.check=le(n.check,k,2,0)),s=0,c=0}else n.head&&(n.head.extra=null);n.mode=16185;case 16185:if(1024&n.flags&&(h=n.length,h>u&&(h=u),h&&(n.head&&(w=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Uint8Array(n.head.extra_len)),n.head.extra.set(o.subarray(i,i+h),w)),512&n.flags&&4&n.wrap&&(n.check=le(n.check,o,h,i)),u-=h,i+=h,n.length-=h),n.length))break e;n.length=0,n.mode=16186;case 16186:if(2048&n.flags){if(0===u)break e;h=0;do{w=o[i+h++],n.head&&w&&n.length<65536&&(n.head.name+=String.fromCharCode(w))}while(w&&h<u);if(512&n.flags&&4&n.wrap&&(n.check=le(n.check,o,h,i)),u-=h,i+=h,w)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=16187;case 16187:if(4096&n.flags){if(0===u)break e;h=0;do{w=o[i+h++],n.head&&w&&n.length<65536&&(n.head.comment+=String.fromCharCode(w))}while(w&&h<u);if(512&n.flags&&4&n.wrap&&(n.check=le(n.check,o,h,i)),u-=h,i+=h,w)break e}else n.head&&(n.head.comment=null);n.mode=16188;case 16188:if(512&n.flags){for(;c<16;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(4&n.wrap&&s!==(65535&n.check)){e.msg="header crc mismatch",n.mode=un;break}s=0,c=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=en;break;case 16189:for(;c<32;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}e.adler=n.check=ln(s),s=0,c=0,n.mode=Jt;case Jt:if(0===n.havedict)return e.next_out=a,e.avail_out=l,e.next_in=i,e.avail_in=u,n.hold=s,n.bits=c,$t;e.adler=n.check=1,n.mode=en;case en:if(t===jt||t===Ut)break e;case tn:if(n.last){s>>>=7&c,c-=7&c,n.mode=an;break}for(;c<3;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}switch(n.last=1&s,s>>>=1,c-=1,3&s){case 0:n.mode=16193;break;case 1:if(gn(n),n.mode=on,t===Ut){s>>>=2,c-=2;break e}break;case 2:n.mode=16196;break;case 3:e.msg="invalid block type",n.mode=un}s>>>=2,c-=2;break;case 16193:for(s>>>=7&c,c-=7&c;c<32;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if((65535&s)!=(s>>>16^65535)){e.msg="invalid stored block lengths",n.mode=un;break}if(n.length=65535&s,s=0,c=0,n.mode=nn,t===Ut)break e;case nn:n.mode=16195;case 16195:if(h=n.length,h){if(h>u&&(h=u),h>l&&(h=l),0===h)break e;r.set(o.subarray(i,i+h),a),u-=h,i+=h,l-=h,a+=h,n.length-=h;break}n.mode=en;break;case 16196:for(;c<14;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(n.nlen=257+(31&s),s>>>=5,c-=5,n.ndist=1+(31&s),s>>>=5,c-=5,n.ncode=4+(15&s),s>>>=4,c-=4,n.nlen>286||n.ndist>30){e.msg="too many length or distance symbols",n.mode=un;break}n.have=0,n.mode=16197;case 16197:for(;n.have<n.ncode;){for(;c<3;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}n.lens[I[n.have++]]=7&s,s>>>=3,c-=3}for(;n.have<19;)n.lens[I[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,B={bits:n.lenbits},y=Pt(0,n.lens,0,19,n.lencode,0,n.work,B),n.lenbits=B.bits,y){e.msg="invalid code lengths set",n.mode=un;break}n.have=0,n.mode=16198;case 16198:for(;n.have<n.nlen+n.ndist;){for(;D=n.lencode[s&(1<<n.lenbits)-1],p=D>>>24,C=D>>>16&255,g=65535&D,!(p<=c);){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(g<16)s>>>=p,c-=p,n.lens[n.have++]=g;else{if(16===g){for(E=p+2;c<E;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(s>>>=p,c-=p,0===n.have){e.msg="invalid bit length repeat",n.mode=un;break}w=n.lens[n.have-1],h=3+(3&s),s>>>=2,c-=2}else if(17===g){for(E=p+3;c<E;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}s>>>=p,c-=p,w=0,h=3+(7&s),s>>>=3,c-=3}else{for(E=p+7;c<E;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}s>>>=p,c-=p,w=0,h=11+(127&s),s>>>=7,c-=7}if(n.have+h>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=un;break}for(;h--;)n.lens[n.have++]=w}}if(n.mode===un)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=un;break}if(n.lenbits=9,B={bits:n.lenbits},y=Pt(1,n.lens,0,n.nlen,n.lencode,0,n.work,B),n.lenbits=B.bits,y){e.msg="invalid literal/lengths set",n.mode=un;break}if(n.distbits=6,n.distcode=n.distdyn,B={bits:n.distbits},y=Pt(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,B),n.distbits=B.bits,y){e.msg="invalid distances set",n.mode=un;break}if(n.mode=on,t===Ut)break e;case on:n.mode=rn;case rn:if(u>=6&&l>=258){e.next_out=a,e.avail_out=l,e.next_in=i,e.avail_in=u,n.hold=s,n.bits=c,Ht(e,f),a=e.next_out,r=e.output,l=e.avail_out,i=e.next_in,o=e.input,u=e.avail_in,s=n.hold,c=n.bits,n.mode===en&&(n.back=-1);break}for(n.back=0;D=n.lencode[s&(1<<n.lenbits)-1],p=D>>>24,C=D>>>16&255,g=65535&D,!(p<=c);){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(C&&!(240&C)){for(_=p,b=C,v=g;D=n.lencode[v+((s&(1<<_+b)-1)>>_)],p=D>>>24,C=D>>>16&255,g=65535&D,!(_+p<=c);){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}s>>>=_,c-=_,n.back+=_}if(s>>>=p,c-=p,n.back+=p,n.length=g,0===C){n.mode=16205;break}if(32&C){n.back=-1,n.mode=en;break}if(64&C){e.msg="invalid literal/length code",n.mode=un;break}n.extra=15&C,n.mode=16201;case 16201:if(n.extra){for(E=n.extra;c<E;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}n.length+=s&(1<<n.extra)-1,s>>>=n.extra,c-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=16202;case 16202:for(;D=n.distcode[s&(1<<n.distbits)-1],p=D>>>24,C=D>>>16&255,g=65535&D,!(p<=c);){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(!(240&C)){for(_=p,b=C,v=g;D=n.distcode[v+((s&(1<<_+b)-1)>>_)],p=D>>>24,C=D>>>16&255,g=65535&D,!(_+p<=c);){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}s>>>=_,c-=_,n.back+=_}if(s>>>=p,c-=p,n.back+=p,64&C){e.msg="invalid distance code",n.mode=un;break}n.offset=g,n.extra=15&C,n.mode=16203;case 16203:if(n.extra){for(E=n.extra;c<E;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}n.offset+=s&(1<<n.extra)-1,s>>>=n.extra,c-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=un;break}n.mode=16204;case 16204:if(0===l)break e;if(h=f-l,n.offset>h){if(h=n.offset-h,h>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=un;break}h>n.wnext?(h-=n.wnext,m=n.wsize-h):m=n.wnext-h,h>n.length&&(h=n.length),A=n.window}else A=r,m=a-n.offset,h=n.length;h>l&&(h=l),l-=h,n.length-=h;do{r[a++]=A[m++]}while(--h);0===n.length&&(n.mode=rn);break;case 16205:if(0===l)break e;r[a++]=n.length,l--,n.mode=rn;break;case an:if(n.wrap){for(;c<32;){if(0===u)break e;u--,s|=o[i++]<<c,c+=8}if(f-=l,e.total_out+=f,n.total+=f,4&n.wrap&&f&&(e.adler=n.check=n.flags?le(n.check,r,f,a-f):ae(n.check,r,f,a-f)),f=l,4&n.wrap&&(n.flags?s:ln(s))!==n.check){e.msg="incorrect data check",n.mode=un;break}s=0,c=0}n.mode=16207;case 16207:if(n.wrap&&n.flags){for(;c<32;){if(0===u)break e;u--,s+=o[i++]<<c,c+=8}if(4&n.wrap&&s!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=un;break}s=0,c=0}n.mode=16208;case 16208:y=Qt;break e;case un:y=Yt;break e;case 16210:return qt;default:return Wt}return e.next_out=a,e.avail_out=l,e.next_in=i,e.avail_in=u,n.hold=s,n.bits=c,(n.wsize||f!==e.avail_out&&n.mode<un&&(n.mode<an||t!==Ot))&&_n(e,e.output,e.next_out,f-e.avail_out),d-=e.avail_in,f-=e.avail_out,e.total_in+=d,e.total_out+=f,n.total+=f,4&n.wrap&&f&&(e.adler=n.check=n.flags?le(n.check,r,f,e.next_out-f):ae(n.check,r,f,e.next_out-f)),e.data_type=n.bits+(n.last?64:0)+(n.mode===en?128:0)+(n.mode===on||n.mode===nn?256:0),(0===d&&0===f||t===Ot)&&y===Zt&&(y=Xt),y},yn=e=>{if(fn(e))return Wt;let t=e.state;return t.window&&(t.window=null),e.state=null,Zt},Dn=(e,t)=>{if(fn(e))return Wt;const n=e.state;return 2&n.wrap?(n.head=t,t.done=!1,Zt):Wt},kn=(e,t)=>{const n=t.length;let o,r,i;return fn(e)?Wt:(o=e.state,0!==o.wrap&&o.mode!==Jt?Wt:o.mode===Jt&&(r=1,r=ae(r,t,n,0),r!==o.check)?Yt:(i=_n(e,t,n,n),i?(o.mode=16210,qt):(o.havedict=1,Zt)))},Bn=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},En=Object.prototype.toString,{Z_NO_FLUSH:In,Z_FINISH:xn,Z_OK:Ln,Z_STREAM_END:Fn,Z_NEED_DICT:Sn,Z_STREAM_ERROR:Vn,Z_DATA_ERROR:Mn,Z_MEM_ERROR:Hn}=ce;function zn(e){this.options=ht({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new bt,this.strm.avail_out=0;let n=vn(this.strm,t.windowBits);if(n!==Ln)throw new Error(se[n]);if(this.header=new Bn,Dn(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=Ct(t.dictionary):"[object ArrayBuffer]"===En.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(n=kn(this.strm,t.dictionary),n!==Ln)))throw new Error(se[n])}function Tn(e,t){const n=new zn(t);if(n.push(e),n.err)throw n.msg||se[n.err];return n.result}zn.prototype.push=function(e,t){const n=this.strm,o=this.options.chunkSize,r=this.options.dictionary;let i,a,u;if(this.ended)return!1;for(a=t===~~t?t:!0===t?xn:In,"[object ArrayBuffer]"===En.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;;){for(0===n.avail_out&&(n.output=new Uint8Array(o),n.next_out=0,n.avail_out=o),i=wn(n,a),i===Sn&&r&&(i=kn(n,r),i===Ln?i=wn(n,a):i===Mn&&(i=Sn));n.avail_in>0&&i===Fn&&n.state.wrap>0&&0!==e[n.next_in];)bn(n),i=wn(n,a);switch(i){case Vn:case Mn:case Sn:case Hn:return this.onEnd(i),this.ended=!0,!1}if(u=n.avail_out,n.next_out&&(0===n.avail_out||i===Fn))if("string"===this.options.to){let e=_t(n.output,n.next_out),t=n.next_out-e,r=gt(n.output,e);n.next_out=t,n.avail_out=o-t,t&&n.output.set(n.output.subarray(e,e+t),0),this.onData(r)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(i!==Ln||0!==u){if(i===Fn)return i=yn(this.strm),this.onEnd(i),this.ended=!0,!0;if(0===n.avail_in)break}}return!0},zn.prototype.onData=function(e){this.chunks.push(e)},zn.prototype.onEnd=function(e){e===Ln&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=mt(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Nn={Inflate:zn,inflate:Tn,inflateRaw:function(e,t){return(t=t||{}).raw=!0,Tn(e,t)},ungzip:Tn,constants:ce},{Deflate:Rn,deflate:Pn,deflateRaw:On,gzip:jn}=Vt,{Inflate:Un,inflate:Zn,inflateRaw:Qn,ungzip:$n}=Nn,Wn=Zn,Yn=new Map([[1,function(e,t){let n=new Uint8Array(e);return Wn(n).buffer}],[2,function(e,t){let n=e.byteLength,o=new Uint8Array(n),r=Math.floor(n/t),i=new DataView(e);for(var a=0;a<t;a++)for(var u=0;u<r;u++)o[a+u*t]=i.getUint8(a*r+u);return o.buffer}],[3,function(e,t){return function(e){for(var t=e.byteLength%2!=0,n=e.byteLength-4,o=new DataView(e),r=0,i=0,a=0;a<n-1;a+=2)i=(i+(r=(r+o.getUint16(a,!0))%65535))%65535;t&&(i=(i+(r=(r+o.getUint8(n-1))%65535))%65535);var[u,l]=s.unpack_from(">HH",e,n);if(r!=(u%=65535)||i!=(l%=65535))throw'ValueError("fletcher32 checksum invalid")'}(e),e.slice(0,-4)}]]),qn=class{constructor(e,t){this.fh=e,this.offset=t,this.depth=null}init(){this.all_nodes=new Map,this._read_root_node(),this._read_children()}_read_children(){let e=this.depth;for(;e>0;){for(var t of this.all_nodes.get(e))for(var n of t.get("addresses"))this._add_node(this._read_node(n,e-1));e--}}_read_root_node(){let e=this._read_node(this.offset,null);this._add_node(e),this.depth=e.get("node_level")}_add_node(e){let t=e.get("node_level");this.all_nodes.has(t)?this.all_nodes.get(t).push(e):this.all_nodes.set(t,[e])}_read_node(e,t){return node=this._read_node_header(e,t),node.set("keys",[]),node.set("addresses",[]),node}_read_node_header(e){throw"NotImplementedError: must define _read_node_header in implementation class"}},Xn=class extends qn{B_LINK_NODE=new Map([["signature","4s"],["node_type","B"],["node_level","B"],["entries_used","H"],["left_sibling","Q"],["right_sibling","Q"]]);_read_node_header(e,t){let n=o(this.B_LINK_NODE,this.fh,e);if(null!=t&&n.get("node_level")!=t)throw"node level does not match";return n}},Gn=class extends Xn{NODE_TYPE=0;constructor(e,t){super(e,t),this.init()}_read_node(e,t){let n=this._read_node_header(e,t);e+=i(this.B_LINK_NODE);let o=[],r=[],a=n.get("entries_used");for(var u=0;u<a;u++){let t=s.unpack_from("<Q",this.fh,e)[0];e+=8;let n=s.unpack_from("<Q",this.fh,e)[0];e+=8,o.push(t),r.push(n)}return o.push(s.unpack_from("<Q",this.fh,e)[0]),n.set("keys",o),n.set("addresses",r),n}symbol_table_addresses(){var e=[],t=this.all_nodes.get(0);for(var n of t)e=e.concat(n.get("addresses"));return e}},Kn=class extends Xn{NODE_TYPE=1;constructor(e,t,n){super(e,t),this.dims=n,this.init()}_read_node(e,t){let n=this._read_node_header(e,t);e+=i(this.B_LINK_NODE);var o=[],r=[];let a=n.get("entries_used");for(var u=0;u<a;u++){let[t,n]=s.unpack_from("<II",this.fh,e);e+=8;let i="<"+this.dims.toFixed()+"Q",a=s.calcsize(i),u=s.unpack_from(i,this.fh,e);e+=a;let l=s.unpack_from("<Q",this.fh,e)[0];e+=8,o.push(new Map([["chunk_size",t],["filter_mask",n],["chunk_offset",u]])),r.push(l)}return n.set("keys",o),n.set("addresses",r),n}construct_data_from_chunks(e,t,n,o){var r,i,a;if(n instanceof Array){let e=n[0];if("REFERENCE"==e){if(8!=n[1])throw"NotImplementedError('Unsupported Reference type')";n="<u8",r="getUint64",i=!1,a=8}else{if("VLEN_STRING"!=e&&"VLEN_SEQUENCE"!=e)throw"NotImplementedError('datatype not implemented')";r="getVLENStruct",i=!1,a=16}}else[r,i,a]=l(n);var u=t.reduce((function(e,t){return e*t}),1),s=e.reduce((function(e,t){return e*t}),1);let d=t.length;var f=1,h=(e.slice().map((function(e){let t=f;return f*=e,t})),f=1,t.slice().reverse().map((function(e){let t=f;return f*=e,t})).reverse()),m=new Array(u);let A=s*a;for(var p of this.all_nodes.get(0)){let n=p.get("keys"),u=p.get("addresses"),l=n.length;for(var C=0;C<l;C++){let l=n[C],f=u[C];var g;if(null==o)g=this.fh.slice(f,f+A);else{g=this.fh.slice(f,f+l.get("chunk_size"));let e=l.get("filter_mask");g=this._filter_chunk(g,e,o,a)}for(var _=l.get("chunk_offset").slice(),b=_.slice(),v=b.map((function(){return 0})),w=new c(g),y=0;y<s;y++){for(var D=d-1;D>=0&&v[D]>=e[D];D--)v[D]=0,b[D]=_[D],D>0&&(v[D-1]+=1,b[D-1]+=1);if(b.slice(0,-1).every((function(e,n){return e<t[n]}))){let e=y*a,t=w[r](e,!i,a);m[b.slice(0,-1).reduce((function(e,t,n){return t*h[n]+e}),0)]=t}v[d-1]+=1,b[d-1]+=1}}}return m}_filter_chunk(e,t,n,o){let r=n.length,i=e.slice();for(var a=r-1;a>=0;a--){if(t&1<<a)continue;let e=n[a],r=e.get("filter_id"),u=e.get("client_data");if(!Yn.has(r))throw'NotImplementedError("Filter with id:'+r.toFixed()+' not supported")';i=Yn.get(r)(i,o,u)}return i}},Jn=class extends qn{B_TREE_HEADER=new Map([["signature","4s"],["version","B"],["node_type","B"],["node_size","I"],["record_size","H"],["depth","H"],["split_percent","B"],["merge_percent","B"],["root_address","Q"],["root_nrecords","H"],["total_nrecords","Q"]]);B_LINK_NODE=new Map([["signature","4s"],["version","B"],["node_type","B"]]);constructor(e,t){super(e,t),this.init()}_read_root_node(){let e=this._read_tree_header(this.offset);this.address_formats=this._calculate_address_formats(e),this.header=e,this.depth=e.get("depth");let t=[e.get("root_address"),e.get("root_nrecords"),e.get("total_nrecords")],n=this._read_node(t,this.depth);this._add_node(n)}_read_tree_header(e){return o(this.B_TREE_HEADER,this.fh,this.offset)}_calculate_address_formats(e){let t=e.get("node_size"),n=e.get("record_size"),o=0,r=0,i=new Map,a=e.get("depth");for(var u=0;u<=a;u++){let e,l,s,c="",d="",f="";if(0==u?(e=0,l=0,s=0):1==u?(e=8,c="<Q",l=this._required_bytes(o),d=this._int_format(l),s=0):(e=8,c="<Q",l=this._required_bytes(o),d=this._int_format(l),s=this._required_bytes(r),f=this._int_format(s)),i.set(u,[e,l,s,c,d,f]),u<a){let i=e+l+s;o=this._nrecords_max(t,n,i),r>0?r*=o:r=o}}return i}_nrecords_max(e,t,n){return Math.floor((e-10-n)/(t+n))}_required_bytes(e){return Math.ceil(d(e)/8)}_int_format(e){return["<B","<H","<I","<Q"][e-1]}_read_node(e,t){let[n,o,r]=e,a=this._read_node_header(n,t);n+=i(this.B_LINK_NODE);let u=this.header.get("record_size"),l=[];for(let e=0;e<o;e++){let e=this._parse_record(this.fh,n,u);n+=u,l.push(e)}let c=[],d=this.address_formats.get(t);if(0!=t){let[e,t,r,i,a,u]=d;for(let l=0;l<=o;l++){let o=s.unpack_from(i,this.fh,n)[0];n+=e;let l=s.unpack_from(a,this.fh,n)[0];n+=t;let d=l;r>0&&(d=s.unpack_from(u,this.fh,n)[0],n+=r),c.push([o,l,d])}}return a.set("keys",l),a.set("addresses",c),a}_read_node_header(e,t){let n=o(this.B_LINK_NODE,this.fh,e);return n.set("node_level",t),n}*iter_records(){for(let e of this.all_nodes.values())for(let t of e)for(let e of t.get("keys"))yield e}_parse_record(e){throw"NotImplementedError"}},eo=class extends Jn{NODE_TYPE=5;_parse_record(e,t,n){let o=s.unpack_from("<I",e,t)[0];return t+=4,new Map([["namehash",o],["heapid",e.slice(t,t+7)]])}},to=class extends Jn{NODE_TYPE=6;_parse_record(e,t,n){let o=s.unpack_from("<Q",e,t)[0];return t+=8,new Map([["creationorder",o],["heapid",e.slice(t,t+7)]])}},no=class{constructor(e,t){let n=s.unpack_from("<B",e,t+8)[0];var r;if(0==n)r=o(so,e,t),this._end_of_sblock=t+co;else{if(2!=n&&3!=n)throw"unsupported superblock version: "+n.toFixed();r=o(fo,e,t),this._end_of_sblock=t+ho}if(r.get("format_signature")!=uo)throw"Incorrect file signature: "+r.get("format_signature");if(8!=r.get("offset_size")||8!=r.get("length_size"))throw"File uses non-64-bit addressing";this.version=r.get("superblock_version"),this._contents=r,this._root_symbol_table=null,this._fh=e}get offset_to_dataobjects(){if(0==this.version){var e=new ro(this._fh,this._end_of_sblock,!0);return this._root_symbol_table=e,e.group_offset}if(2==this.version||3==this.version)return this._contents.get("root_group_address");throw"Not implemented version = "+this.version.toFixed()}},oo=class{constructor(e,t){let n=o(go,e,t);r("HEAP"==n.get("signature")),r(0==n.get("version"));let i=n.get("address_of_data_segment"),a=e.slice(i,i+n.get("data_segment_size"));n.set("heap_data",a),this._contents=n,this.data=a}get_object_name(e){let t=new Uint8Array(this.data).indexOf(0,e)-e;return s.unpack_from("<"+t.toFixed()+"s",this.data,e)[0]}},ro=class{constructor(e,t,n=!1){var r;if(n)r=new Map([["symbols",1]]);else{if("SNOD"!=(r=o(po,e,t)).get("signature"))throw"incorrect node type";t+=Co}for(var i=[],a=r.get("symbols"),u=0;u<a;u++)i.push(o(mo,e,t)),t+=Ao;n&&(this.group_offset=i[0].get("object_header_address")),this.entries=i,this._contents=r}assign_name(e){this.entries.forEach((function(t){let n=t.get("link_name_offset"),o=e.get_object_name(n);t.set("link_name",o)}))}get_links(e){var t={};return this.entries.forEach((function(n){let o=n.get("cache_type"),r=n.get("link_name");if(0==o||1==o)t[r]=n.get("object_header_address");else if(2==o){let o=n.get("scratch"),a=new ArrayBuffer(4),u=new Uint8Array(a);for(var i=0;i<4;i++)u[i]=o.charCodeAt(i);let l=s.unpack_from("<I",a,0)[0];t[r]=e.get_object_name(l)}})),t}},io=class{constructor(e,t){let n=o(_o,e,t);t+=bo;let r=n.get("collection_size")-bo,i=e.slice(t,t+r);this.heap_data=i,this._header=n,this._objects=null}get objects(){if(null==this._objects){this._objects=new Map;for(var e=0;e<=this.heap_data.byteLength-wo;){let t=o(vo,this.heap_data,e);if(0==t.get("object_index"))break;e+=wo;let n=this.heap_data.slice(e,e+t.get("object_size"));this._objects.set(t.get("object_index"),n),e+=a(t.get("object_size"))}}return this._objects}},ao=class{constructor(e,t){this.fh=e;let n=o(yo,e,t);if(t+=i(yo),r("FRHP"==n.get("signature")),r(0==n.get("version")),n.get("filter_info_size")>0)throw"Filter info size not supported on FractalHeap";if(n.get("btree_address_huge_objects")!=lo)throw"Huge objects not implemented in FractalHeap";n.set("btree_address_huge_objects",null),n.get("root_block_address")==lo&&n.set("root_block_address",null);let a=n.get("log2_maximum_heap_size"),u=this._min_size_nbits(a),l=new Map([["signature","4s"],["version","B"],["heap_header_adddress","Q"],["block_offset",`${u}B`]]);this.indirect_block_header=new Map(l),this.indirect_block_header_size=i(l),2&~n.get("flags")||l.set("checksum","I"),this.direct_block_header=l,this.direct_block_header_size=i(l);let s=n.get("maximum_direct_block_size");this._managed_object_offset_size=this._min_size_nbits(a);let c=Math.min(s,n.get("max_managed_object_size"));this._managed_object_length_size=this._min_size_integer(c);let d=n.get("starting_block_size"),f=n.get("table_width");if(!(d>0))throw"Starting block size == 0 not implemented";let h=Number(Math.floor(Math.log2(s)));r(1n<<BigInt(h)==s);let m=Number(Math.floor(Math.log2(d)));r(1n<<BigInt(m)==d),this._max_direct_nrows=h-m+2;let A=Math.floor(Math.log2(f));r(1<<A==f),this._indirect_nrows_sub=A+m-1,this.header=n,this.nobjects=n.get("managed_object_count")+n.get("huge_object_count")+n.get("tiny_object_count");let p=[],C=n.get("root_block_address"),g=0;if(null!=C&&(g=n.get("indirect_current_rows_count")),g>0)for(let t of this._iter_indirect_block(e,C,g))p.push(t);else{let t=this._read_direct_block(e,C,d);p.push(t)}let _=p.reduce(((e,t)=>e+t.byteLength),0),b=new Uint8Array(_),v=0;p.forEach((e=>{b.set(new Uint8Array(e),v),v+=e.byteLength})),this.managed=b.buffer}_read_direct_block(e,t,n){let i=e.slice(t,t+n);return r("FHDB"==o(this.direct_block_header,i).get("signature")),i}get_data(e){let t=s.unpack_from("<B",e,0)[0],n=t>>4&3,o=1;if(0==n){r(!(t>>6));let n=this._managed_object_offset_size,i=f(n,e,o);o+=n,n=this._managed_object_length_size;let a=f(n,e,o);return this.managed.slice(i,i+a)}throw 1==n?"tiny objectID not supported in FractalHeap":2==n?"huge objectID not supported in FractalHeap":"unknown objectID type in FractalHeap"}_min_size_integer(e){return this._min_size_nbits(d(e))}_min_size_nbits(e){return Math.ceil(e/8)}*_iter_indirect_block(e,t,n){let i=o(this.indirect_block_header,e,t);t+=this.indirect_block_header_size,r("FHIB"==i.get("signature"));let a=i.get("block_offset").reduce(((e,t,n)=>e+(t<<8*n)),0);i.set("block_offset",a);let[u,l]=this._indirect_info(n),c=[];for(let n=0;n<u;n++){let o=s.unpack_from("<Q",e,t)[0];if(t+=8,o==lo)break;let r=this._calc_block_size(n);c.push([o,r])}let d=[];for(let n=u;n<u+l;n++){let o=s.unpack_from("<Q",e,t)[0];if(t+=8,o==lo)break;let r=this._calc_block_size(n),i=this._iblock_nrows_from_block_size(r);d.push([o,i])}for(let[t,n]of c){let o=this._read_direct_block(e,t,n);yield o}for(let[t,n]of d)for(let o of this._iter_indirect_block(e,t,n))yield o}_calc_block_size(e){let t=Math.floor(e/this.header.get("table_width"));return 2**Math.max(t-1,0)*this.header.get("starting_block_size")}_iblock_nrows_from_block_size(e){let t=Math.floor(Math.log2(e));return r(2**t==e),t-this._indirect_nrows_sub}_indirect_info(e){let t,n,o=this.header.get("table_width"),r=e*o,i=this._max_direct_nrows*o;return e<=i?(t=r,n=0):(t=i,n=r-i),[t,n]}_int_format(e){return["B","H","I","Q"][e-1]}},uo=s.unpack_from("8s",new Uint8Array([137,72,68,70,13,10,26,10]).buffer)[0],lo=s.unpack_from("<Q",new Uint8Array([255,255,255,255,255,255,255,255]).buffer)[0],so=new Map([["format_signature","8s"],["superblock_version","B"],["free_storage_version","B"],["root_group_version","B"],["reserved_0","B"],["shared_header_version","B"],["offset_size","B"],["length_size","B"],["reserved_1","B"],["group_leaf_node_k","H"],["group_internal_node_k","H"],["file_consistency_flags","L"],["base_address_lower","Q"],["free_space_address","Q"],["end_of_file_address","Q"],["driver_information_address","Q"]]),co=i(so),fo=new Map([["format_signature","8s"],["superblock_version","B"],["offset_size","B"],["length_size","B"],["file_consistency_flags","B"],["base_address","Q"],["superblock_extension_address","Q"],["end_of_file_address","Q"],["root_group_address","Q"],["superblock_checksum","I"]]),ho=i(fo),mo=new Map([["link_name_offset","Q"],["object_header_address","Q"],["cache_type","I"],["reserved","I"],["scratch","16s"]]),Ao=i(mo),po=new Map([["signature","4s"],["version","B"],["reserved_0","B"],["symbols","H"]]),Co=i(po),go=new Map([["signature","4s"],["version","B"],["reserved","3s"],["data_segment_size","Q"],["offset_to_free_list","Q"],["address_of_data_segment","Q"]]),_o=new Map([["signature","4s"],["version","B"],["reserved","3s"],["collection_size","Q"]]),bo=i(_o),vo=new Map([["object_index","H"],["reference_count","H"],["reserved","I"],["object_size","Q"]]),wo=i(vo),yo=new Map([["signature","4s"],["version","B"],["object_index_size","H"],["filter_info_size","H"],["flags","B"],["max_managed_object_size","I"],["next_huge_object_index","Q"],["btree_address_huge_objects","Q"],["managed_freespace_size","Q"],["freespace_manager_address","Q"],["managed_space_size","Q"],["managed_alloc_size","Q"],["next_directblock_iterator_address","Q"],["managed_object_count","Q"],["huge_objects_total_size","Q"],["huge_object_count","Q"],["tiny_objects_total_size","Q"],["tiny_object_count","Q"],["table_width","H"],["starting_block_size","Q"],["maximum_direct_block_size","Q"],["log2_maximum_heap_size","H"],["indirect_starting_rows_count","H"],["root_block_address","Q"],["indirect_current_rows_count","H"]]),Do=class{constructor(e,t){let n=s.unpack_from("<B",e,t)[0];if(1==n)var[o,r,i]=this._parse_v1_objects(e,t);else{if(n!="O".charCodeAt(0))throw"InvalidHDF5File('unknown Data Object Header')";var[o,r,i]=this._parse_v2_objects(e,t)}this.fh=e,this.msgs=o,this.msg_data=r,this.offset=t,this._global_heaps={},this._header=i,this._filter_pipeline=null,this._chunk_params_set=!1,this._chunks=null,this._chunk_dims=null,this._chunk_address=null}get dtype(){let e=this.find_msg_type(Ko)[0].get("offset_to_message");return new h(this.fh,e).dtype}get chunks(){return this._get_chunk_params(),this._chunks}get shape(){let e=this.find_msg_type(Xo)[0].get("offset_to_message");return function(e,t){let n=s.unpack_from("<B",e,t)[0];var i;if(1==n)r(1==(i=o(Vo,e,t)).get("version")),t+=Mo;else{if(2!=n)throw"InvalidHDF5File('unknown dataspace message version')";r(2==(i=o(Ho,e,t)).get("version")),t+=zo}let a=i.get("dimensionality");return s.unpack_from("<"+(2*a).toFixed()+"I",e,t).filter((function(e,t){return t%2==0}))}(this.fh,e)}get filter_pipeline(){if(null!=this._filter_pipeline)return this._filter_pipeline;let e=this.find_msg_type(nr);if(!e.length)return this._filter_pipeline=null,this._filter_pipeline;var t=e[0].get("offset_to_message");let[n,r]=s.unpack_from("<BB",this.fh,t);t+=s.calcsize("<BB");var i=[];if(1==n){let[e,n]=s.unpack_from("<HI",this.fh,t);t+=s.calcsize("<HI");for(var u=0;u<r;u++){let e=o(Yo,this.fh,t);t+=qo;let n=a(e.get("name_length"),8),r="<"+n.toFixed()+"s",u=s.unpack_from(r,this.fh,t)[0];e.set("filter_name",u),t+=n,r="<"+e.get("client_data_values").toFixed()+"I";let l=s.unpack_from(r,this.fh,t);e.set("client_data",l),t+=4*e.get("client_data_values"),e.get("client_data_values")%2&&(t+=4),i.push(e)}}else{if(2!=n)throw`version ${n} is not supported`;for(let e=0;e<r;e++){let e=new Map,n=this.fh,o=s.unpack_from("<H",n,t)[0];t+=2,e.set("filter_id",o);let r=0;o>255&&(r=s.unpack_from("<H",n,t)[0],t+=2);let a=s.unpack_from("<H",n,t)[0];t+=2;let u=(1&a)>0;e.set("optional",u);let l,c=s.unpack_from("<H",n,t)[0];t+=2,r>0&&(l=s.unpack_from(`${r}s`,n,t)[0],t+=r),e.set("name",l);let d=s.unpack_from(`<${c}i`,n,t);t+=4*c,e.set("client_data",d),e.set("client_data_values",c),i.push(e)}}return this._filter_pipeline=i,this._filter_pipeline}find_msg_type(e){return this.msgs.filter((function(t){return t.get("type")==e}))}get_attributes(){let e={},t=this.find_msg_type(or);for(let n of t){let t=n.get("offset_to_message"),[o,r]=this.unpack_attribute(t);e[o]=r}return e}get fillvalue(){var e,t=this.find_msg_type(Jo)[0].get("offset_to_message");let n=s.unpack_from("<B",this.fh,t)[0];var r,i,a;if(1==n||2==n)r=o(Zo,this.fh,t),t+=Qo,e=r.get("fillvalue_defined");else{if(3!=n)throw'InvalidHDF5File("Unknown fillvalue msg version: "'+String(n);r=o($o,this.fh,t),t+=Wo,e=32&r.get("flags")}if(e?(i=s.unpack_from("<I",this.fh,t)[0],t+=4):i=0,i){let[e,n,o]=l(this.dtype);a=new c(this.fh)[e](t,!n,o)}else a=0;return a}unpack_attribute(e){let t=s.unpack_from("<B",this.fh,e)[0];var n,i;if(1==t)r(1==(n=o(Eo,this.fh,e)).get("version")),e+=Io,i=8;else{if(3!=t)throw"unsupported attribute message version: "+t;r(3==(n=o(xo,this.fh,e)).get("version")),e+=Lo,i=1}let u=n.get("name_size"),l=s.unpack_from("<"+u.toFixed()+"s",this.fh,e)[0];var c;l=l.replace(/\x00$/,""),e+=a(u,i);try{c=new h(this.fh,e).dtype}catch(e){return console.warn("Attribute "+l+" type not implemented, set to null."),[l,null]}e+=a(n.get("datatype_size"),i);let d=this.determine_data_shape(this.fh,e),f=d.reduce((function(e,t){return e*t}),1);e+=a(n.get("dataspace_size"),i);var m=this._attr_value(c,this.fh,f,e);return 0==d.length&&(m=m[0]),[l,m]}determine_data_shape(e,t){let n=s.unpack_from("<B",e,t)[0];var i;if(1==n)r(1==(i=o(Vo,e,t)).get("version")),t+=Mo;else{if(2!=n)throw"unknown dataspace message version";r(2==(i=o(Ho,e,t)).get("version")),t+=zo}let a=i.get("dimensionality");return s.unpack_from("<"+a.toFixed()+"Q",e,t)}_attr_value(e,t,n,o){var r=new Array(n);if(e instanceof Array){let l=e[0];for(var i=0;i<n;i++)if("VLEN_STRING"==l){let n=e[2];var[a,u]=this._vlen_size_and_data(t,o);const l=new TextDecoder(0==n?"ascii":"utf-8");r[i]=l.decode(u),o+=16}else if("REFERENCE"==l){var d=s.unpack_from("<Q",t,o);r[i]=d,o+=8}else{if("VLEN_SEQUENCE"!=l)throw"NotImplementedError";{let n=e[1];var[a,u]=this._vlen_size_and_data(t,o);r[i]=this._attr_value(n,u,a,0),o+=16}}}else{let[a,u,s]=l(e),d=new c(t,0);for(i=0;i<n;i++)r[i]=d[a](o,!u,s),o+=s}return r}_vlen_size_and_data(e,t){let n=s.unpack_from("<I",e,t)[0],i=o(Bo,e,t+4),a=i.get("collection_address");var u;return r(i.get("collection_address")<Number.MAX_SAFE_INTEGER),a in this._global_heaps||(u=new io(this.fh,a),this._global_heaps[a]=u),[n,(u=this._global_heaps[a]).objects.get(i.get("object_index"))]}_parse_v1_objects(e,t){let n=o(Fo,e,t);r(1==n.get("version"));let a=n.get("total_header_messages");for(var u=n.get("object_header_size"),l=t+i(Fo),c=e.slice(l,l+u),d=[[l,u]],f=0,h=0,m=new Array(a),A=0;A<a;A++){h>=u&&([l,u]=d[++f],h=0);let t=o(To,e,l+h),n=l+h+No;if(t.set("offset_to_message",n),t.get("type")==rr){var[p,C]=s.unpack_from("<QQ",e,n);d.push([p,C])}h+=No+t.get("size"),m[A]=t}return[m,c,n]}_parse_v2_objects(e,t){var[n,r,i]=this._parse_v2_header(e,t);t=i;for(var a=[],u=n.get("size_of_chunk_0"),l=e.slice(t,t+=u),c=[[i,u]],d=0,f=0;;){if(f>=u-Po){let e=c[++d];if(null==e)break;[i,u]=e,f=0}let t=o(Ro,e,i+f),n=i+f+Po+r;if(t.set("offset_to_message",n),t.get("type")==rr){var[h,m]=s.unpack_from("<QQ",e,n);c.push([h+4,m-4])}f+=Po+t.get("size")+r,a.push(t)}return[a,l,n]}_parse_v2_header(e,t){let n=o(So,e,t);var a;if(t+=i(So),r(2==n.get("version")),a=4&n.get("flags")?2:0,r(!(16&n.get("flags"))),32&n.get("flags")){let o=s.unpack_from("<4I",e,t);t+=16,n.set("access_time",o[0]),n.set("modification_time",o[1]),n.set("change_time",o[2]),n.set("birth_time",o[3])}let u=["<B","<H","<I","<Q"][3&n.get("flags")];return n.set("size_of_chunk_0",s.unpack_from(u,e,t)[0]),[n,a,t+=s.calcsize(u)]}get_links(){return Object.fromEntries(this.iter_links())}*iter_links(){for(let e of this.msgs)e.get("type")==ir?yield*this._iter_links_from_symbol_tables(e):e.get("type")==er?yield this._get_link_from_link_msg(e):e.get("type")==Go&&(yield*this._iter_link_from_link_info_msg(e))}*_iter_links_from_symbol_tables(e){r(16==e.get("size"));let t=o(Oo,this.fh,e.get("offset_to_message"));yield*this._iter_links_btree_v1(t.get("btree_address"),t.get("heap_address"))}*_iter_links_btree_v1(e,t){let n=new Gn(this.fh,e),o=new oo(this.fh,t);for(let e of n.symbol_table_addresses()){let t=new ro(this.fh,e);t.assign_name(o),yield*Object.entries(t.get_links(o))}}_get_link_from_link_msg(e){let t=e.get("offset_to_message");return this._decode_link_msg(this.fh,t)[1]}_decode_link_msg(e,t){let[n,o]=s.unpack_from("<BB",e,t);t+=2,r(1==n);let i,a,u=2**(3&o),l=(16&o)>0,c=(4&o)>0;(8&o)>0?(i=s.unpack_from("<B",e,t)[0],t+=1):i=0,r([0,1].includes(i)),c&&(a=s.unpack_from("<Q",e,t)[0],t+=8);let d=0;l&&(d=s.unpack_from("<B",e,t)[0],t+=1);let f=0==d?"ascii":"utf-8",h=["<B","<H","<I","<Q"][3&o],m=s.unpack_from(h,e,t)[0];t+=u;let A,p=new TextDecoder(f).decode(e.slice(t,t+m));if(t+=m,0==i)A=s.unpack_from("<Q",e,t)[0];else if(1==i){let n=s.unpack_from("<H",e,t)[0];t+=2,A=new TextDecoder(f).decode(e.slice(t,t+n))}return[a,[p,A]]}*_iter_link_from_link_info_msg(e){let t=e.get("offset_to_message"),n=this._decode_link_info_msg(this.fh,t),o=n.get("heap_address"),r=n.get("name_btree_address"),i=n.get("order_btree_address");null!=r&&(yield*this._iter_links_btree_v2(r,i,o))}*_iter_links_btree_v2(e,t,n){let o,r=new ao(this.fh,n);const i=null!=t;o=i?new to(this.fh,t):new eo(this.fh,e);let a=new Map;for(let e of o.iter_records()){let t=r.get_data(e.get("heapid")),[n,o]=this._decode_link_msg(t,0);const u=i?n:o[0];a.set(u,o)}let u=Array.from(a.keys()).sort();for(let e of u)yield a.get(e)}_decode_link_info_msg(e,t){let[n,i]=s.unpack_from("<BB",e,t);r(0==n),t+=2,(1&i)>0&&(t+=8);let a=o((2&i)>0?Uo:jo,e,t),u=new Map;for(let[e,t]of a.entries())u.set(e,t==ko?null:t);return u}get is_dataset(){return this.find_msg_type(Xo).length>0}get_data(){let e=this.find_msg_type(tr)[0].get("offset_to_message");var[t,n,o,r]=this._get_data_message_properties(e);if(0==o)throw"Compact storage of DataObject not implemented";return 1==o?this._get_contiguous_data(r):2==o?this._get_chunked_data(e):void 0}_get_data_message_properties(e){let t,n,o,[i,a,u]=s.unpack_from("<BBB",this.fh,e);return 1==i||2==i?(t=a,n=u,o=e,o+=s.calcsize("<BBB"),o+=s.calcsize("<BI"),r(1==n||2==n)):3!=i&&4!=i||(n=a,o=e,o+=s.calcsize("<BB")),r(i>=1&&i<=4),[i,t,n,o]}_get_contiguous_data(e){let[t]=s.unpack_from("<Q",this.fh,e);if(t==ko){let e=this.shape.reduce((function(e,t){return e*t}),1);return new Array(e)}var n=this.shape.reduce((function(e,t){return e*t}),1);if(this.dtype instanceof Array){let e=this.dtype[0];if("REFERENCE"==e){if(8!=this.dtype[1])throw"NotImplementedError('Unsupported Reference type')";return this.fh.slice(t,t+n)}if("VLEN_STRING"==e){let e=this.dtype[2];const i=new TextDecoder(0==e?"ascii":"utf-8");var o=[];for(r=0;r<n;r++){const[e,n]=this._vlen_size_and_data(this.fh,t);o[r]=i.decode(n),t+=16}return o}throw"NotImplementedError('datatype not implemented')"}{let e=this.dtype;if(/[<>=!@\|]?(i|u|f|S)(\d*)/.test(e)){let[o,i,a]=l(e),u=new Array(n),s=new c(this.fh);for(var r=0;r<n;r++)u[r]=s[o](t+r*a,!i,a);return u}throw"not Implemented - no proper dtype defined"}}_get_chunked_data(e){if(this._get_chunk_params(),this._chunk_address==ko)return[];let t=new Kn(this.fh,this._chunk_address,this._chunk_dims).construct_data_from_chunks(this.chunks,this.shape,this.dtype,this.filter_pipeline);if(this.dtype instanceof Array&&/^VLEN/.test(this.dtype[0])){let e=this.dtype[0];for(var n=0;n<t.length;n++){let[r,i,a]=t[n];var o;i in this._global_heaps?o=this._global_heaps[i]:(o=new io(this.fh,i),this._global_heaps[i]=o);let u=o.objects.get(a);if("VLEN_STRING"==e){let e=this.dtype[2];const o=new TextDecoder(0==e?"ascii":"utf-8");t[n]=o.decode(u)}}}return t}_get_chunk_params(){if(!this._chunk_params_set){this._chunk_params_set=!0;var e=this.find_msg_type(tr)[0].get("offset_to_message"),[t,n,o,i]=this._get_data_message_properties(e);if(2==o){var a;if(1==t||2==t){var u=s.unpack_from("<Q",this.fh,i)[0];a=i+s.calcsize("<Q")}else if(3==t){var[n,u]=s.unpack_from("<BQ",this.fh,i);a=i+s.calcsize("<BQ")}r(t>=1&&t<=3);var l="<"+(n-1).toFixed()+"I",c=s.unpack_from(l,this.fh,a);this._chunks=c,this._chunk_dims=n,this._chunk_address=u}}}},ko=s.unpack_from("<Q",new Uint8Array([255,255,255,255,255,255,255,255]).buffer),Bo=new Map([["collection_address","Q"],["object_index","I"]]),Eo=(i(Bo),new Map([["version","B"],["reserved","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"]])),Io=i(Eo),xo=new Map([["version","B"],["flags","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"],["character_set_encoding","B"]]),Lo=i(xo),Fo=new Map([["version","B"],["reserved","B"],["total_header_messages","H"],["object_reference_count","I"],["object_header_size","I"],["padding","I"]]),So=new Map([["signature","4s"],["version","B"],["flags","B"]]),Vo=new Map([["version","B"],["dimensionality","B"],["flags","B"],["reserved_0","B"],["reserved_1","I"]]),Mo=i(Vo),Ho=new Map([["version","B"],["dimensionality","B"],["flags","B"],["type","B"]]),zo=i(Ho),To=new Map([["type","H"],["size","H"],["flags","B"],["reserved","3s"]]),No=i(To),Ro=new Map([["type","B"],["size","H"],["flags","B"]]),Po=i(Ro),Oo=new Map([["btree_address","Q"],["heap_address","Q"]]),jo=new Map([["heap_address","Q"],["name_btree_address","Q"]]),Uo=new Map([["heap_address","Q"],["name_btree_address","Q"],["order_btree_address","Q"]]),Zo=new Map([["version","B"],["space_allocation_time","B"],["fillvalue_write_time","B"],["fillvalue_defined","B"]]),Qo=i(Zo),$o=new Map([["version","B"],["flags","B"]]),Wo=i($o),Yo=new Map([["filter_id","H"],["name_length","H"],["flags","H"],["client_data_values","H"]]),qo=i(Yo),Xo=1,Go=2,Ko=3,Jo=5,er=6,tr=8,nr=11,or=12,rr=16,ir=17,ar=class e{constructor(e,t,n,o=!1){if(null==n?(this.parent=this,this.file=this):(this.parent=n,this.file=n.file),this.name=e,this._links=t.get_links(),this._dataobjects=t,this._attrs=null,this._keys=null,o)return new Proxy(this,ur)}get keys(){return null==this._keys&&(this._keys=Object.keys(this._links)),this._keys.slice()}get values(){return this.keys.map((e=>this.get(e)))}length(){return this.keys.length}_dereference(e){if(!e)throw"cannot deference null reference";let t=this.file._get_object_by_address(e);if(null==t)throw"reference not found in file";return t}get(t){if("number"==typeof t)return this._dereference(t);var n=cr(t);if("/"==n)return this.file;if("."==n)return this;if(/^\//.test(n))return this.file.get(n.slice(1));if(""!=function(e){let t=e.lastIndexOf("/")+1,n=e.slice(0,t),o=new RegExp("^/+$"),r=new RegExp("/$");return n&&!o.test(n)&&(n=n.replace(r,"")),n}(n))var[o,r]=n.split(/\/(.*)/);else var o=n,r=".";if(!(o in this._links))throw o+" not found in group";var i=cr(this.name+"/"+o);let a=this._links[o];if("string"==typeof a)try{return this.get(a)}catch(e){return null}var u=new Do(this.file._fh,a);if(u.is_dataset){if("."!=r)throw i+" is a dataset, not a group";return new sr(i,u,this)}return new e(i,u,this).get(r)}visit(e){return this.visititems(((t,n)=>e(t)))}visititems(t){var n=this.name.length;/\/$/.test(this.name)||(n+=1);for(var o=this.values.slice();o;){let r=o.shift();1==o.length&&console.log(r);let i=t(r.name.slice(n),r);if(null!=i)return i;r instanceof e&&(o=o.concat(r.values))}return null}get attrs(){return null==this._attrs&&(this._attrs=this._dataobjects.get_attributes()),this._attrs}},ur={get:function(e,t,n){return t in e?e[t]:e.get(t)}},lr=class extends ar{constructor(e,t){var n=new no(e,0).offset_to_dataobjects;super("/",new Do(e,n),null),this.parent=this,this._fh=e,this.filename=t||"",this.file=this,this.mode="r",this.userblock_size=0}_get_object_by_address(e){return this._dataobjects.offset==e?this:this.visititems((e=>{e._dataobjects.offset}))}},sr=class extends Array{constructor(e,t,n){super(),this.parent=n,this.file=n.file,this.name=e,this._dataobjects=t,this._attrs=null,this._astype=null}get value(){var e=this._dataobjects.get_data();return null==this._astype?e:e.astype(this._astype)}get shape(){return this._dataobjects.shape}get attrs(){return this._dataobjects.get_attributes()}get dtype(){return this._dataobjects.dtype}get fillvalue(){return this._dataobjects.fillvalue}};function cr(e){return e.replace(/\/(\/)+/g,"/")}},6356:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Options-Options-module_Options_GKtJFV {\n    box-shadow: var(--theme-shadow-2);\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    gap: 1px;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    background-color: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Options-Options-module_button_TkmrL4 {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Options-Options-module_button_TkmrL4.node_modules-\\@tolokoban-ui-lib-dist-view-Options-Options-module_selected_QbI1Mv {\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Options-Options-module_button_TkmrL4.node_modules-\\@tolokoban-ui-lib-dist-view-Options-Options-module_unselected_bkgmzR {\n    opacity: 0.667;\n    background-color: var(--theme-color-primary-4);\n    color: var(--theme-color-on-primary-4);\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Options/Options.module.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,oBAAoB;IACpB,eAAe;IACf,6BAA6B;IAC7B,oBAAoB;IACpB,QAAQ;IACR,qBAAqB;IACrB,gBAAgB;IAChB,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,SAAS;IACT,wBAAwB;IACxB,cAAc;IACd,gCAAgC;IAChC,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,cAAc;IACd,8CAA8C;IAC9C,sCAAsC;AAC1C",sourcesContent:[".Options {\n    box-shadow: var(--theme-shadow-2);\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    gap: 1px;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    background-color: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n}\n\n.button {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.button.selected {\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.button.unselected {\n    opacity: 0.667;\n    background-color: var(--theme-color-primary-4);\n    color: var(--theme-color-on-primary-4);\n}\n"],sourceRoot:""}]),a.locals={Options:"node_modules-@tolokoban-ui-lib-dist-view-Options-Options-module_Options_GKtJFV",button:"node_modules-@tolokoban-ui-lib-dist-view-Options-Options-module_button_TkmrL4",selected:"node_modules-@tolokoban-ui-lib-dist-view-Options-Options-module_selected_QbI1Mv",unselected:"node_modules-@tolokoban-ui-lib-dist-view-Options-Options-module_unselected_bkgmzR"};const u=a},6404:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Touchable-Touchable-module_Touchable_j7wWdS {\n    display: contents;\n    cursor: pointer;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Touchable/Touchable.module.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,eAAe;AACnB",sourcesContent:[".Touchable {\n    display: contents;\n    cursor: pointer;\n}\n"],sourceRoot:""}]),a.locals={Touchable:"node_modules-@tolokoban-ui-lib-dist-view-Touchable-Touchable-module_Touchable_j7wWdS"};const u=a},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},6586:(e,t,n)=>{"use strict";n.d(t,{Gk:()=>Rt,Thu:()=>Pt,Znq:()=>Qe,Sxu:()=>te,yQN:()=>ue,e3B:()=>lt,sWC:()=>Ee,vJ5:()=>Se,UkC:()=>Ae,myw:()=>Mt});var o=n(6540);o.Component;const r=document.createElement("canvas");r.width=1,r.height=1;const i=1/6;class a{static get ctx(){if(!a._ctx){const e=document.createElement("canvas");e.width=1,e.height=1;const t=e.getContext("2d");if(!t)throw Error("[Color] Unable to create CanvasRenderingContext2D!");a._ctx=t}return a._ctx}static makeGradient(e,...t){const n=[],o=1/(e-1);for(let r=0;r<e;r++)n.push(a.mix(r*o,...t));return n}static mix(e,...t){const n=t.map((e=>new a(e))),o=n.length-1;if(o<0)return new a("#000");if(0===o)return n[0];const r=Math.min(Math.floor(e*o),o-1),i=n[r+1],u=n[r],l=1-o*(e-r/o);return new a(`color-mix(in lch, ${i.toString()}, ${u.toString()} ${100*l}%)`)}static isLight(e){return new a(e).isLight()}static isDark(e){return new a(e).isDark()}static bestContrast(e,...t){const n=new a(e).perceivedLightness,o=t.map((e=>new a(e))),r=o.map((e=>e.perceivedLightness));let i=0,u=Math.abs(n-r[0]);for(let e=1;e<o.length;e++){const t=Math.abs(n-r[e]);t>u&&(i=e,u=t)}return o[i]}constructor(e){this.R=0,this.G=0,this.B=0,this.H=0,this.S=0,this.L=0,this.A=0,this.from(e)}from(e){if("string"==typeof e){const t=a.ctx;t.clearRect(0,0,1,1),t.fillStyle=e,t.fillRect(0,0,1,1);const n=t.getImageData(0,0,1,1),[o,r,i,u]=n.data,l=1/255;this.R=o*l,this.G=r*l,this.B=i*l,this.A=u*l}else this.R=e.R,this.G=e.G,this.B=e.B,this.A=e.A;return this}toString(){const e=e=>Math.floor(255*e).toString(16).padStart(2,"0");return`#${e(this.R)}${e(this.G)}${e(this.B)}${e(this.A)}`}get luminance(){return.2126*this.sRgbToLinear(this.R)+.7152*this.sRgbToLinear(this.G)+.0722*this.sRgbToLinear(this.B)}get perceivedLightness(){const e=this.luminance;return.01*(e<=216/24389?e*(24389/27):116*Math.pow(e,1/3)-16)}sRgbToLinear(e){return e<.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}isLight(){return!this.isDark()}isDark(){return this.perceivedLightness<.5}rgb2hsl(){const e=this.R,t=this.G,n=this.B,o=Math.min(e,t,n),r=Math.max(e,t,n),a=r-o;this.L=.5*(r+o),a<1e-6?(this.H=0,this.S=0):(this.S=a/(1-Math.abs(this.L+this.L-1)),this.H=r===e?t>=n?i*((t-n)/a):i*((n-t)/a):r===t?i*(2+(n-e)/a):i*(4+(e-t)/a))}hsl2rgb(){const e=6*this.H,t=this.S,n=this.L,o=(1-Math.abs(n+n-1))*t,r=o*(1-Math.abs(e%2-1));let i=0,a=0,u=0;e<3?e<1?(i=o,a=r,u=0):e<2?(i=r,a=o,u=0):(i=0,a=o,u=r):e<4?(i=0,a=r,u=o):e<5?(i=r,a=0,u=o):(i=o,a=0,u=r);const l=n-.5*o;return this.R=i+l,this.G=a+l,this.B=u+l,this}}a._ctx=null;const u=a;var l=n(4848),s=n(5072),c=n.n(s),d=n(7825),f=n.n(d),h=n(7659),m=n.n(h),A=n(5056),p=n.n(A),C=n(540),g=n.n(C),_=n(1113),b=n.n(_),v=n(6044),w={};w.styleTagTransform=b(),w.setAttributes=p(),w.insert=m().bind(null,"head"),w.domAPI=f(),w.insertStyleElement=g(),c()(v.A,w);const y=v.A&&v.A.locals?v.A.locals:void 0;function D({options:e,onClose:t}){const n=function(e){return{padding:e.padding,background:e.background}}(e),r=o.useRef(null);return o.useEffect((()=>{const n=n=>{"Escape"===n.key&&(n.stopPropagation(),n.stopImmediatePropagation(),n.preventDefault(),e.autoClosable&&t(e))};return document.addEventListener("keydown",n),()=>document.removeEventListener("keydown",n)}),[e]),(0,l.jsx)("div",{className:k(e),style:n,ref:r,onClick:n=>{e.autoClosable&&r.current===n.target&&t(e)},children:e.content})}function k(e){var t;const n=[y.container];for(const o of null!==(t=e.align)&&void 0!==t?t:""){const e=y[o];e&&n.push(e)}return n.join(" ")}var B=n(1635),E=n(1219),I=n.n(E);function x({color:e,textColor:t,backColor:n,shadow:o},r={}){const i={};return e||t||n||(e=r.color,t=r.textColor,n=r.backColor),e&&(i.color=`var(--theme-color-on-${e})`,i.backgroundColor=`var(--theme-color-${e})`),t&&(i.color=`var(--theme-color-${t})`),n&&(i.backgroundColor=`var(--theme-color-${n})`),o&&(i.boxShadow=`var(--theme-shadow-${o}, none)`),i}var L=n(9767),F={};F.styleTagTransform=b(),F.setAttributes=p(),F.insert=m().bind(null,"head"),F.domAPI=f(),F.insertStyleElement=g(),c()(L.A,F);const S=L.A&&L.A.locals?L.A.locals:void 0;function V(e){var t,n;const{value:o="M12,10A2,2 0 0,0 10,12C10,13.11 10.9,14 12,14C13.11,14 14,13.11 14,12A2,2 0 0,0 12,10Z"}=e,r=null!==(t=e.type)&&void 0!==t?t:"filled",i=function(e){var t;return null!==(t=H[e])&&void 0!==t?t:e}(null!==(n=e.size)&&void 0!==n?n:"M"),a=Object.assign(Object.assign({},x({textColor:e.color})),{width:i,height:i});return(0,l.jsxs)("svg",{className:M(e),style:a,viewBox:"0 0 24 24",preserveAspectRatio:"xMidYMid meet",onClick:t=>{e.onClick&&(t.preventDefault(),t.stopPropagation(),e.onClick())},tabIndex:e.onClick?1:void 0,strokeWidth:1.5,children:["filled"===r&&(0,l.jsx)("path",{d:o,fill:"currentColor",stroke:"none"}),"outlined"===r&&(0,l.jsx)("path",{d:o,fill:"none",stroke:"currentColor"}),"bold"===r&&(0,l.jsx)("path",{d:o,fill:"currentColor",stroke:"currentColor"}),"dual"===r&&(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("path",{d:o,opacity:.25,fill:"currentColor",stroke:"none"}),(0,l.jsx)("path",{d:o,fill:"none",stroke:"currentColor"})]})]})}function M(e){const t=[S.GenericIcon];return"string"==typeof e.className&&t.push(e.className),!0===e.animate&&t.push(S.animate),e.onClick&&t.push(S.clickable),t.join(" ")}const H={XXS:".5em",XS:".75em",S:"1em",M:"1.5em",L:"2em",XL:"3em",XXL:"5em"},z=new Map;function T(e,t){const n=z.get(e);if(n)return n;const o=t=>(0,l.jsx)(V,Object.assign({},t,{value:e}));return o.id=null!=t?t:e,z.set(e,o),o}const N=T("M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z","IconGear");function R({flex:e,flexGrow:t,flexShrink:n,flexBasis:o,gridRow:r,gridColumn:i,alignSelf:a,justifySelf:u}){const l={};return e&&(l.flex=e),t&&(l.flexGrow=t),n&&(l.flexShrink=n),o&&(l.flexBasis=o),void 0!==r&&(l.gridRow=r),void 0!==i&&(l.gridColumn=i),void 0!==a&&(l.alignSelf=a),void 0!==u&&(l.justifySelf=u),l}var P=n(9795),O={};O.styleTagTransform=b(),O.setAttributes=p(),O.insert=m().bind(null,"head"),O.domAPI=f(),O.insertStyleElement=g(),c()(P.A,O);const j=P.A&&P.A.locals?P.A.locals:void 0;function U({width:e,height:t,maxWidth:n="100vw",maxHeight:o,minWidth:r,minHeight:i,aspectRatio:a=0}){const u={width:e,height:t,maxWidth:n,maxHeight:o,minWidth:r,minHeight:i};return a>0&&(u.aspectRatio=a),u}function Z({fullsize:e=!1,fullwidth:t=!1,fullheight:n=!1,fullwide:o=!1,fullnarrow:r=!1}){if(e)return j.fullsize;const i=[];return t&&i.push(j.fullwidth),n&&i.push(j.fullheight),o&&i.push(j.fullwide),r&&i.push(j.fullnarrow),i.join(" ")}function Q({position:e,left:t,top:n,right:o,bottom:r,zIndex:i}){return{position:e,left:t,top:n,right:o,bottom:r,zIndex:i}}function $(e,t=1){return t<=0?"transparent":t>=1?`var(--theme-color-${e})`:`var(--theme-color-${e}-${function(e){const t=Math.round(10*e);return t<1?"1":t>9?"9":`${t}`}(t)})`}function W(e,t="em"){return Array.isArray(e)?e.map((e=>Y(e,t))).join(" "):Y(e,t)}function Y(e,t="em"){if("number"==typeof e)return`${e}${t}`;switch(e){case"XXS":case"XS":case"S":case"M":case"L":case"XL":case"XXL":return`var(--theme-gap-${e})`;default:return e}}function q({borderRadius:e,margin:t,padding:n}){const o={};return e&&(o.borderRadius=W(e)),t&&(o.margin=W(t)),n&&(o.padding=W(n)),o}function X(e){return Object.assign(Object.assign(Object.assign(Object.assign({},R(e)),U(e)),Q(e)),q(e))}function G(e){return[Z(e)].join(" ")}var K=n(6610),J={};J.styleTagTransform=b(),J.setAttributes=p(),J.insert=m().bind(null,"head"),J.domAPI=f(),J.insertStyleElement=g(),c()(K.A,J),K.A&&K.A.locals&&K.A.locals;const ee=["hsl(0 0% 40%)","hsl(0 0% 90%)"];class te{static apply(e={},t){const n=new te(e);return n.apply(t),n}constructor(e={}){var t,n,o,r,i,a,u,l,s,c,d;this.vars=[];const f=null!==(t=e.colors)&&void 0!==t?t:{},h=null!==(n=e.gap)&&void 0!==n?n:{XS:".25rem",S:".5rem",M:"1rem",L:"2rem",XL:"4rem"};this.add("gap-none","0"),this.add("gap-XS",h.XS),this.add("gap-S",h.S),this.add("gap-M",h.M),this.add("gap-L",h.L),this.add("gap-XL",h.XL),this.add("color-text-light",null!==(o=f.textLight)&&void 0!==o?o:"#fffe"),this.add("color-text-dark",null!==(r=f.textDark)&&void 0!==r?r:"#000e"),this.addColor("input",null!==(i=f.input)&&void 0!==i?i:"#fff"),this.addColor("error",null!==(a=f.error)&&void 0!==a?a:"#d00"),this.addColor("valid",null!==(u=f.valid)&&void 0!==u?u:"#0f0"),this.addColorVars("primary",ne(null!==(l=f.primary)&&void 0!==l?l:"hsl(215 80% 50%)")),this.addColorVars("secondary",ne(null!==(s=f.secondary)&&void 0!==s?s:"hsl(30 90% 50%)")),this.addColorVars("tertiary",ne(null!==(c=f.tertiary)&&void 0!==c?c:"hsl(60 80% 50%)")),this.addColorVars("neutral",ne(null!==(d=f.neutral)&&void 0!==d?d:ee));for(let e=0;e<10;e++){const t=e;this.add(`shadow-${e}`,`0 ${t}px ${2*t}px #000e`)}}add(e,t,n=1){let o=t;if(n<=0)o="transparent";else if(n<1){const e=new u(t);e.A=n,o=e.toString()}this.vars.push([e,o])}addColor(e,t){this.add(`color-${e}`,t),this.add(`color-on-${e}`,`var(--theme-color-text-${u.isLight(t)?"dark":"light"})`)}addColorVars(e,t){let n=1;for(const o of t){this.add(`color-${e}-${n}`,o);for(let t=1;t<10;t++)this.add(`color-${e}-${n}-${t}`,o,t/10);this.add(`color-on-${e}-${n}`,`var(--theme-color-text-${u.isLight(o)?"dark":"light"})`);for(let t=1;t<10;t++)this.add(`color-on-${e}-${n}-${t}`,`var(--theme-color-on-${e}-${n})`);n++}this.add(`color-${e}`,`var(--theme-color-${e}-5)`)}apply(e){var t;const n=null!=e?e:null===(t=globalThis.window)||void 0===t?void 0:t.document.body;if(n)for(const[e,t]of this.vars)n.style.setProperty(`--theme-${e}`,t)}}function ne(e){const t=Array.isArray(e)?e:[e];return 0===t.length&&t.push("#fff"),1===t.length&&function(e){const[t]=e,n=new u(t),o=new u(t);n.R*=.3,n.G*=.3,n.B*=.3,o.R=1-.2*(1-o.R),o.G=1-.2*(1-o.G),o.B=1-.2*(1-o.B),e.unshift(n),e.push(o)}(t),u.makeGradient(9,...t).map((e=>e.toString()))}te.classNames=new class{constructor(){this.signature=`${Date.now().toString(36)}-Theme-`,this.colorPrimary=(e="5")=>this.cls(`color-primary-${e}`),this.colorSecondary=(e="5")=>this.cls(`color-secondary-${e}`),this.colorTertiary=(e="5")=>this.cls(`color-tertiary-${e}`),this.colorNeutral=(e="5")=>this.cls(`color-neutral-${e}`),this.init=()=>{if(!document.head)return void window.setTimeout(this.init,200);const e=[`.${this.cls("display-flex")} { display: flex; justify-content: space-between; align-items: center; gap: var(--theme-gap-S); }`,`.${this.cls("display-inline-flex")} { display: inline-flex; justify-content: space-between; align-items: center; gap: var(--theme-gap-S); }`];for(const t of["none","XS","S","M","L","XL"])for(const n of["none","XS","S","M","L","XL"])e.push(`.${this.cls(`padding-${t}-${n}`)} { padding: var(--theme-gap-${t}) var(--theme-gap-${n}); }`),e.push(`.${this.cls(`margin-${t}-${n}`)} { margin: var(--theme-gap-${t}) var(--theme-gap-${n}); }`);for(const t of["primary","secondary","tertiary","neutral"])for(let n=1;n<10;n++)e.push(`.${this.cls(`color-${t}-${n}`)} {`,`  color: var(--theme-color-on-${t}-${n});`,`  background-color: var(--theme-color-${t}-${n});`,"}");const t=document.createElement("style");t.textContent=e.join("\n"),document.head.appendChild(t)},this.init()}join(...e){return e.filter((e=>"string"==typeof e)).join(" ")}padding(...e){let[t,n]=e;return t||(t="none"),n||(n=t),this.cls(`padding-${t}-${n}`)}margin(...e){let[t,n]=e;return t||(t="none"),n||(n=t),this.cls(`margin-${t}-${n}`)}display(e){return[this.cls(`display-${e}`)].join(" ")}cls(e){return`${this.signature}${e}`}};var oe=n(4050),re={};re.styleTagTransform=b(),re.setAttributes=p(),re.insert=m().bind(null,"head"),re.domAPI=f(),re.insertStyleElement=g(),c()(oe.A,re);const ie=oe.A&&oe.A.locals?oe.A.locals:void 0,ae=te.classNames;function ue(e){var t;const n=function(e,t){return Object.assign(Object.assign({},t),e)}(e,{enabled:!0,borderRadius:".125em",margin:["XS","0"],padding:[0,"M"],onClick:le,width:"auto",height:"2em",variant:"elevated",thickness:.125}),{className:o,children:r,label:i,enabled:a,variant:u,onClick:s,waiting:c,target:d}=n,{color:f}=e,h=W(n.thickness),m=Object.assign({"--custom-color-main-alpha":ce(f,u),"--custom-color-main":se(f,u),"--custom-color-text":de(f,u),"--custom-thickness":h},X(n)),A=n.icon,p=n.iconRight,C=(0,l.jsxs)(l.Fragment,{children:[" ",c&&(0,l.jsx)(N,{animate:!0}),!c&&A&&(0,l.jsx)(A,{}),(0,l.jsx)("div",{className:ie.label,children:null!==(t=null!=r?r:i)&&void 0!==t?t:"Button"}),p&&(0,l.jsx)(p,{})]});return"string"==typeof s?(0,l.jsx)("a",{style:m,className:ae.join(o,ie.Button,ie[u],Boolean(A)&&ie.icon,!a&&!c&&ie.disabled,G(n)),target:d,href:s,children:C}):(0,l.jsx)("button",{style:m,className:ae.join(o,ie.Button,ie[u],Boolean(A)&&ie.icon,G(n)),disabled:!a||c,type:"button",onClick:e=>{s&&(e.preventDefault(),e.stopPropagation(),s())},children:C})}const le=()=>{console.log("Unhandled click event!")};function se(e,t){return"text"===t?"transparent":$(null!=e?e:"secondary-5")}function ce(e,t){return"text"===t?"transparent":$(null!=e?e:"primary-5",.5)}function de(e,t){switch(t){case"text":case"outlined":return e?$(e):"currentColor";default:return`var(--theme-color-on-${null!=e?e:"primary-5"})`}}var fe=n(3608),he={};he.styleTagTransform=b(),he.setAttributes=p(),he.insert=m().bind(null,"head"),he.domAPI=f(),he.insertStyleElement=g(),c()(fe.A,he);const me=fe.A&&fe.A.locals?fe.A.locals:void 0;function Ae(e){const{orientation:t="column",template:n="-1",gap:o}=e,r=Object.assign(Object.assign(Object.assign(Object.assign({},U(e)),Q(e)),R(e)),x(e));o&&(r.gap=W(o));const i=n.split("").map((e=>"123456789".includes(e)?`minmax(0, ${e}fr)`:"auto")).join(" ");return"row"===t?(r.gridTemplateColumns=i,r.gridAutoColumns="auto",r.gridTemplateRows="minmax(0, 1fr)"):(r.gridTemplateRows=i,r.gridAutoRows="auto",r.gridTemplateColumns="minmax(0, 1fr)"),(0,l.jsx)("div",{className:te.classNames.join(e.className,me.Strip,me[t],G(e)),style:r,children:e.children})}var pe=n(4870),Ce={};Ce.styleTagTransform=b(),Ce.setAttributes=p(),Ce.insert=m().bind(null,"head"),Ce.domAPI=f(),Ce.insertStyleElement=g(),c()(pe.A,Ce);const ge=pe.A&&pe.A.locals?pe.A.locals:void 0,_e=te.classNames;function be({className:e,buttonCancel:t,buttonValidate:n,title:o,padding:r="M",shadow:i=7,headColor:a="primary-3",bodyColor:u="neutral-2",footColor:s="neutral-6",children:c}){const d=ve("Cancel",t,{variant:"text"}),f=ve("OK",n);return(0,l.jsxs)(Ae,{className:_e.join(e,ge.Dialog),orientation:"column",template:"-1",shadow:i,children:[o&&(0,l.jsx)("header",{className:ge.header,style:x({color:a}),children:o}),(0,l.jsx)("main",{style:Object.assign(Object.assign({},x({color:u})),q({padding:r})),children:c}),(d||f)&&(0,l.jsxs)("footer",{style:x({color:s}),children:[d&&(0,l.jsx)(ue,Object.assign({},d)),f&&(0,l.jsx)(ue,Object.assign({},f))]})]})}function ve(e,t,n){return t&&t.onClick?Object.assign(Object.assign({children:e},t),n):null}function we({gap:e,columnGap:t,rowGap:n}){const o={};return e&&(o.gap=W(e)),n&&(o.rowGap=W(n)),t&&(o.columnGap=W(t)),o}var ye=n(4192),De={};De.styleTagTransform=b(),De.setAttributes=p(),De.insert=m().bind(null,"head"),De.domAPI=f(),De.insertStyleElement=g(),c()(ye.A,De);const ke=ye.A&&ye.A.locals?ye.A.locals:void 0,Be=te.classNames;function Ee(e){const{id:t,className:n,children:o,borderRadius:r,fontSize:i,tooltip:a,tabIndex:u}=e,s=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({fontSize:i},x(e)),q(e)),U(e)),function({overflow:e,overflowX:t,overflowY:n}){const o={};if(e){if("string"==typeof e)return o.overflow=e,o;const[t,n]=e;return o.overflowX=t,o.overflowY=n,o}return t&&(o.overflowX=t),n&&(o.overflowY=n),o}(e)),function(e){const{display:t}=e;return t?"flex"===t||"inline-flex"===t?function({display:e,gap:t,rowGap:n,columnGap:o,justifyContent:r,alignItems:i,flexDirection:a,flexWrap:u}){const l=Object.assign({display:e},we({gap:t,rowGap:n,columnGap:o}));return l.justifyContent=r,l.alignItems=i,l.flexWrap=u,l.flexDirection=a,l}(e):"grid"===t||"inline-grid"===t?function({display:e,gap:t,rowGap:n,columnGap:o,gridTemplateRows:r,gridTemplateColumns:i,gridAutoFlow:a,gridAutoRows:u,gridAutoColumns:l,justifyContent:s,alignItems:c,placeItems:d}){const f=Object.assign({display:e},we({gap:t,rowGap:n,columnGap:o}));return f.gridTemplateRows=r,f.gridTemplateColumns=i,f.gridAutoRows=u,f.gridAutoColumns=l,f.gridAutoFlow=a,f.justifyContent=s,f.alignItems=c,f.placeItems=d,f}(e):{display:t}:{}}(e)),Q(e)),R(e)),e.style);return r&&(s.borderRadius=W(r)),(0,l.jsx)("div",{id:t,className:Be.join(n,ke.Panel,G(e)),style:s,title:a,tabIndex:u,children:o})}const Ie=T("M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z","IconLoading");var xe=n(3012),Le={};Le.styleTagTransform=b(),Le.setAttributes=p(),Le.insert=m().bind(null,"head"),Le.domAPI=f(),Le.insertStyleElement=g(),c()(xe.A,Le);const Fe=xe.A&&xe.A.locals?xe.A.locals:void 0;function Se(e){var{className:t,icon:n=Ie,orientation:o="horizontal",children:r}=e,i=(0,B.Tt)(e,["className","icon","orientation","children"]);const a=n;return(0,l.jsxs)("div",{className:`${"horizontal"===o?Fe.SpinnerHorizontal:Fe.SpinnerVertical} ${null!=t?t:""}`,style:x(i),children:[(0,l.jsx)(a,{animate:!0}),r&&(0,l.jsx)("div",{children:r})]})}class Ve{constructor(){this.listeners=new Set}addListener(e){this.listeners.add(e)}removeListener(e){this.listeners.delete(e)}dispatch(e){this.listeners.forEach((t=>t(e)))}}var Me=n(9044),He={};He.styleTagTransform=b(),He.setAttributes=p(),He.insert=m().bind(null,"head"),He.domAPI=f(),He.insertStyleElement=g(),c()(Me.A,He);const ze=Me.A&&Me.A.locals?Me.A.locals:void 0,Te=()=>{};function Ne(e){return"string"==typeof e?(0,l.jsx)("div",{children:e}):e instanceof Error?(0,l.jsxs)("div",{children:[(0,l.jsx)("b",{children:e.name}),(0,l.jsx)("br",{}),e.message]}):"object"==typeof e&&o.isValidElement(e)?e:(0,l.jsx)("pre",{children:I().stringify(e,null,"  ")})}function Re({event:e}){const[t,n]=o.useState((0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(N,{animate:!0}),(0,l.jsx)("div",{children:"Please wait..."})]}));return o.useEffect((()=>(e.addListener(n),()=>e.removeListener(n))),[e]),t}var Pe=n(4714),Oe={};Oe.styleTagTransform=b(),Oe.setAttributes=p(),Oe.insert=m().bind(null,"head"),Oe.domAPI=f(),Oe.insertStyleElement=g(),c()(Pe.A,Oe);const je=Pe.A&&Pe.A.locals?Pe.A.locals:void 0,Ue=new class{constructor(){this.eventModalsChange=new Ve,this.modals=[],this.counter=1}useModals(){const[e,t]=o.useState([...this.modals]);return o.useEffect((()=>{const e=()=>t([...this.modals]);return this.eventModalsChange.addListener(e),()=>this.eventModalsChange.removeListener(e)}),[]),e}hide(e){if(console.log("[Modal] hide:",e),e)e.status="closing",this.modals=this.modals.filter((t=>t!==e));else{const e=this.modals.pop();if(!e)return;e.status="closing"}this.fire()}show(e){const t=Object.assign({align:"",padding:"1em",transitionDuration:300,autoClosable:!0,background:"var(--theme-color-neutral-1-5)",onClose:Te,status:"new",name:"Modal#"+this.counter++},e);return console.log("[Modal] show:",t),this.modals.push(t),this.fire(),()=>{this.hide(t)}}wait(e,t,n){return(0,B.sH)(this,void 0,void 0,(function*(){return new Promise(((o,r)=>{const i=this.show(Object.assign(Object.assign({},n),{content:(0,l.jsx)("div",{className:ze.wait,children:(0,l.jsx)(Se,{children:e})})}));t.then((e=>{i(),window.setTimeout((()=>o(e)))})).catch((e=>{i(),window.setTimeout((()=>r(e)))}))}))}))}progress(e,t){return(0,B.sH)(this,void 0,void 0,(function*(){const n=new Ve,o=this.show(Object.assign(Object.assign({},t),{content:(0,l.jsx)("div",{className:ze.wait,children:(0,l.jsx)(Re,{event:n})})}));try{return yield e((e=>n.dispatch(e)))}finally{o()}}))}error(e,t){return(0,B.sH)(this,void 0,void 0,(function*(){return new Promise((n=>{const o=this.show(Object.assign(Object.assign({},t),{onClose:n,content:(0,l.jsx)(be,{buttonValidate:{onClick(){o(),n()}},children:(0,l.jsx)("div",{className:ze.error,children:Ne(e)})})}))}))}))}confirm(e){return(0,B.sH)(this,void 0,void 0,(function*(){return new Promise((t=>{var n,o;const r=this.show(Object.assign(Object.assign({},e),{onClose(){t(!1)},content:(0,l.jsx)(Ee,{shadow:9,color:"neutral-3",children:(0,l.jsx)(be,{buttonCancel:{onClick(){r(),t(!1)},children:null!==(n=e.labelCancel)&&void 0!==n?n:"Cancel"},buttonValidate:{onClick(){r(),t(!0)},color:!0===e.accent?"tertiary-5":"secondary-5",children:null!==(o=e.labelOK)&&void 0!==o?o:"string"==typeof e.content?e.content:"OK"},title:e.title,children:e.content})})}))}))}))}info(e,t){return new Promise((n=>{const o=this.show(Object.assign(Object.assign({},t),{onClose:n,content:(0,l.jsx)(be,{buttonValidate:{variant:"text",color:"primary-5",onClick(){o(),n()}},children:(0,l.jsx)(Ee,{padding:"L",children:e})})}))}))}fire(){console.log("Modals:",this.modals.map((e=>e.name))),this.eventModalsChange.dispatch()}},Ze=o.createContext(Ue);function Qe({children:e}){const t=Ue.useModals(),n=e=>{Ue.hide(e)};return(0,l.jsxs)(Ze.Provider,{value:Ue,children:[e,(0,l.jsx)("div",{className:je.screen,children:t.map(((e,t)=>(0,l.jsx)(D,{options:e,onClose:n},t)))})]})}var $e=n(3442),We={};We.styleTagTransform=b(),We.setAttributes=p(),We.insert=m().bind(null,"head"),We.domAPI=f(),We.insertStyleElement=g(),c()($e.A,We),$e.A&&$e.A.locals&&$e.A.locals;var Ye=n(1604),qe={};qe.styleTagTransform=b(),qe.setAttributes=p(),qe.insert=m().bind(null,"head"),qe.domAPI=f(),qe.insertStyleElement=g(),c()(Ye.A,qe),Ye.A&&Ye.A.locals&&Ye.A.locals,te.classNames;var Xe=n(9472),Ge={};Ge.styleTagTransform=b(),Ge.setAttributes=p(),Ge.insert=m().bind(null,"head"),Ge.domAPI=f(),Ge.insertStyleElement=g(),c()(Xe.A,Ge),Xe.A&&Xe.A.locals&&Xe.A.locals,te.classNames;var Ke=n(2187),Je={};Je.styleTagTransform=b(),Je.setAttributes=p(),Je.insert=m().bind(null,"head"),Je.domAPI=f(),Je.insertStyleElement=g(),c()(Ke.A,Je),Ke.A&&Ke.A.locals&&Ke.A.locals;var et=n(2776),tt={};tt.styleTagTransform=b(),tt.setAttributes=p(),tt.insert=m().bind(null,"head"),tt.domAPI=f(),tt.insertStyleElement=g(),c()(et.A,tt),et.A&&et.A.locals&&et.A.locals;var nt=n(7576),ot={};ot.styleTagTransform=b(),ot.setAttributes=p(),ot.insert=m().bind(null,"head"),ot.domAPI=f(),ot.insertStyleElement=g(),c()(nt.A,ot),nt.A&&nt.A.locals&&nt.A.locals;var rt=n(1874),it={};it.styleTagTransform=b(),it.setAttributes=p(),it.insert=m().bind(null,"head"),it.domAPI=f(),it.insertStyleElement=g(),c()(rt.A,it),rt.A&&rt.A.locals&&rt.A.locals;var at=n(8108),ut={};function lt(e){var t;const n=o.useRef(null);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(ue,Object.assign({},e,{onClick:()=>{const e=n.current;e&&e.click()}})),(0,l.jsx)("input",{style:{display:"none"},ref:n,type:"file",accept:null!==(t=e.accept)&&void 0!==t?t:"*/*",multiple:!!e.multiple,onChange:t=>{const n=t.target;if(!n)return;const{files:o}=n;if(o&&o.length>0){const t=[];for(let e=0;e<o.length;e++){const n=o.item(e);n&&t.push(n)}e.onLoad(t)}}})]})}ut.styleTagTransform=b(),ut.setAttributes=p(),ut.insert=m().bind(null,"head"),ut.domAPI=f(),ut.insertStyleElement=g(),c()(at.A,ut),at.A&&at.A.locals&&at.A.locals;var st=n(6404),ct={};ct.styleTagTransform=b(),ct.setAttributes=p(),ct.insert=m().bind(null,"head"),ct.domAPI=f(),ct.insertStyleElement=g(),c()(st.A,ct),st.A&&st.A.locals&&st.A.locals,te.classNames;var dt=n(4160),ft={};ft.styleTagTransform=b(),ft.setAttributes=p(),ft.insert=m().bind(null,"head"),ft.domAPI=f(),ft.insertStyleElement=g(),c()(dt.A,ft),dt.A&&dt.A.locals&&dt.A.locals;var ht=n(7502),mt={};mt.styleTagTransform=b(),mt.setAttributes=p(),mt.insert=m().bind(null,"head"),mt.domAPI=f(),mt.insertStyleElement=g(),c()(ht.A,mt),ht.A&&ht.A.locals&&ht.A.locals;var At=n(4252),pt={};pt.styleTagTransform=b(),pt.setAttributes=p(),pt.insert=m().bind(null,"head"),pt.domAPI=f(),pt.insertStyleElement=g(),c()(At.A,pt),At.A&&At.A.locals&&At.A.locals,te.classNames;var Ct=n(6356),gt={};gt.styleTagTransform=b(),gt.setAttributes=p(),gt.insert=m().bind(null,"head"),gt.domAPI=f(),gt.insertStyleElement=g(),c()(Ct.A,gt),Ct.A&&Ct.A.locals&&Ct.A.locals,te.classNames;var _t=n(1868),bt={};bt.styleTagTransform=b(),bt.setAttributes=p(),bt.insert=m().bind(null,"head"),bt.domAPI=f(),bt.insertStyleElement=g(),c()(_t.A,bt),_t.A&&_t.A.locals&&_t.A.locals,te.classNames,te.classNames,T("M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z","IconStar");var vt=n(8684),wt={};wt.styleTagTransform=b(),wt.setAttributes=p(),wt.insert=m().bind(null,"head"),wt.domAPI=f(),wt.insertStyleElement=g(),c()(vt.A,wt),vt.A&&vt.A.locals&&vt.A.locals;var yt=n(358),Dt={};Dt.styleTagTransform=b(),Dt.setAttributes=p(),Dt.insert=m().bind(null,"head"),Dt.domAPI=f(),Dt.insertStyleElement=g(),c()(yt.A,Dt),yt.A&&yt.A.locals&&yt.A.locals,te.classNames;var kt=n(3080),Bt={};Bt.styleTagTransform=b(),Bt.setAttributes=p(),Bt.insert=m().bind(null,"head"),Bt.domAPI=f(),Bt.insertStyleElement=g(),c()(kt.A,Bt),kt.A&&kt.A.locals&&kt.A.locals,te.classNames;var Et=n(7352),It={};It.styleTagTransform=b(),It.setAttributes=p(),It.insert=m().bind(null,"head"),It.domAPI=f(),It.insertStyleElement=g(),c()(Et.A,It),Et.A&&Et.A.locals&&Et.A.locals,te.classNames;var xt=n(2732),Lt={};Lt.styleTagTransform=b(),Lt.setAttributes=p(),Lt.insert=m().bind(null,"head"),Lt.domAPI=f(),Lt.insertStyleElement=g(),c()(xt.A,Lt),xt.A&&xt.A.locals&&xt.A.locals,te.classNames;var Ft=n(114),St={};St.styleTagTransform=b(),St.setAttributes=p(),St.insert=m().bind(null,"head"),St.domAPI=f(),St.insertStyleElement=g(),c()(Ft.A,St);const Vt=Ft.A&&Ft.A.locals?Ft.A.locals:void 0;function Mt(e){const t=Object.assign(Object.assign(Object.assign({},Q(e)),R(e)),X(e));return(0,l.jsxs)("button",{className:te.classNames.join(e.className,Vt.ViewSwitch,e.value&&Vt.ok,G(e)),type:"button",disabled:!1===e.enabled||void 0,style:t,onClick:()=>{var t;return null===(t=e.onChange)||void 0===t?void 0:t.call(e,!e.value)},children:[(0,l.jsxs)("div",{className:Vt.pin,children:[(0,l.jsx)("div",{className:Vt.bar,children:" "}),(0,l.jsx)("div",{className:Vt.btn,children:" "})]}),e.children]})}var Ht=n(3580),zt={};zt.styleTagTransform=b(),zt.setAttributes=p(),zt.insert=m().bind(null,"head"),zt.domAPI=f(),zt.insertStyleElement=g(),c()(Ht.A,zt),Ht.A&&Ht.A.locals&&Ht.A.locals,te.classNames;var Tt=n(5366),Nt={};Nt.styleTagTransform=b(),Nt.setAttributes=p(),Nt.insert=m().bind(null,"head"),Nt.domAPI=f(),Nt.insertStyleElement=g(),c()(Tt.A,Nt),Tt.A&&Tt.A.locals&&Tt.A.locals,te.classNames,T("M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z","IconAdd"),T("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown");const Rt=T("M20,9V15H12V19.84L4.16,12L12,4.16V9H20Z","IconArrowLeft"),Pt=(T("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight"),T("M15,20H9V12H4.16L12,4.16L19.84,12H15V20Z","IconArrowUp"),T("M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z","IconBack"),T("M21,5C19.89,4.65 18.67,4.5 17.5,4.5C15.55,4.5 13.45,4.9 12,6C10.55,4.9 8.45,4.5 6.5,4.5C4.55,4.5 2.45,4.9 1,6V20.65C1,20.9 1.25,21.15 1.5,21.15C1.6,21.15 1.65,21.1 1.75,21.1C3.1,20.45 5.05,20 6.5,20C8.45,20 10.55,20.4 12,21.5C13.35,20.65 15.8,20 17.5,20C19.15,20 20.85,20.3 22.25,21.05C22.35,21.1 22.4,21.1 22.5,21.1C22.75,21.1 23,20.85 23,20.6V6C22.4,5.55 21.75,5.25 21,5M21,18.5C19.9,18.15 18.7,18 17.5,18C15.8,18 13.35,18.65 12,19.5V8C13.35,7.15 15.8,6.5 17.5,6.5C18.7,6.5 19.9,6.65 21,7V18.5Z","IconBook"),T("M18.71,19.5C17.88,20.74 17,21.95 15.66,21.97C14.32,22 13.89,21.18 12.37,21.18C10.84,21.18 10.37,21.95 9.1,22C7.79,22.05 6.8,20.68 5.96,19.47C4.25,17 2.94,12.45 4.7,9.39C5.57,7.87 7.13,6.91 8.82,6.88C10.1,6.86 11.32,7.75 12.11,7.75C12.89,7.75 14.37,6.68 15.92,6.84C16.57,6.87 18.39,7.1 19.56,8.82C19.47,8.88 17.39,10.1 17.41,12.63C17.44,15.65 20.06,16.66 20.09,16.67C20.06,16.74 19.67,18.11 18.71,19.5M13,3.5C13.73,2.67 14.94,2.04 15.94,2C16.07,3.17 15.6,4.35 14.9,5.19C14.21,6.04 13.07,6.7 11.95,6.61C11.8,5.46 12.36,4.26 13,3.5Z","IconBrandApple"),T("M12.58,3.12V3.13C12.27,3.13 11.96,3.22 11.71,3.39C11.21,3.74 11.15,4.32 11.6,4.69L14.46,7L5.73,7.03H5.72C5,7.03 4.3,7.5 4.16,8.1C4,8.71 4.5,9.22 5.26,9.22L9.69,9.21L1.76,15.3C1,15.87 0.77,16.82 1.24,17.42C1.72,18.03 2.73,18.03 3.5,17.42L7.8,13.89C7.8,13.89 7.73,14.37 7.74,14.65C7.74,14.94 7.84,15.5 7.97,15.93C8.26,16.86 8.75,17.71 9.43,18.46C10.13,19.23 11,19.85 12,20.29C13.03,20.76 14.17,21 15.34,21C16.5,21 17.65,20.75 18.69,20.28C19.69,19.84 20.55,19.21 21.25,18.44C21.93,17.69 22.42,16.83 22.71,15.91C22.85,15.44 22.94,14.97 23,14.5C23,14.03 23,13.56 22.94,13.09C22.81,12.18 22.5,11.32 22,10.54C21.56,9.83 21,9.2 20.31,8.67V8.67L13.42,3.38C13.19,3.21 12.89,3.12 12.58,3.12M15.34,9.21C16.5,9.21 17.59,9.59 18.46,10.29C18.9,10.65 19.25,11.07 19.5,11.54C19.77,12 19.94,12.55 20,13.11C20.04,13.67 19.96,14.23 19.77,14.77C19.57,15.31 19.25,15.81 18.82,16.26C17.93,17.16 16.69,17.68 15.34,17.68C14,17.68 12.75,17.17 11.86,16.27C11.43,15.83 11.11,15.32 10.91,14.78C10.72,14.25 10.64,13.69 10.69,13.12C10.74,12.56 10.91,12.03 11.17,11.55C11.43,11.08 11.79,10.66 12.23,10.3C13.09,9.59 14.19,9.21 15.34,9.21M15.44,10.61C14.66,10.61 13.94,10.89 13.41,11.34C12.87,11.8 12.5,12.44 12.47,13.18C12.43,13.93 12.73,14.63 13.26,15.15C13.8,15.68 14.58,16 15.44,16C16.3,16 17.07,15.68 17.62,15.15C18.15,14.63 18.45,13.93 18.41,13.18C18.37,12.44 18,11.8 17.47,11.34C16.94,10.89 16.22,10.61 15.44,10.61Z","IconBrandBlender"),T("M21.81 10.25C21.75 10.21 21.25 9.82 20.17 9.82C19.89 9.82 19.61 9.85 19.33 9.9C19.12 8.5 17.95 7.79 17.9 7.76L17.61 7.59L17.43 7.86C17.19 8.22 17 8.63 16.92 9.05C16.72 9.85 16.84 10.61 17.25 11.26C16.76 11.54 15.96 11.61 15.79 11.61H2.62C2.28 11.61 2 11.89 2 12.24C2 13.39 2.18 14.54 2.58 15.62C3.03 16.81 3.71 17.69 4.58 18.23C5.56 18.83 7.17 19.17 9 19.17C9.79 19.17 10.61 19.1 11.42 18.95C12.54 18.75 13.62 18.36 14.61 17.79C15.43 17.32 16.16 16.72 16.78 16C17.83 14.83 18.45 13.5 18.9 12.35H19.09C20.23 12.35 20.94 11.89 21.33 11.5C21.59 11.26 21.78 10.97 21.92 10.63L22 10.39L21.81 10.25M3.85 11.24H5.61C5.69 11.24 5.77 11.17 5.77 11.08V9.5C5.77 9.42 5.7 9.34 5.61 9.34H3.85C3.76 9.34 3.69 9.41 3.69 9.5V11.08C3.7 11.17 3.76 11.24 3.85 11.24M6.28 11.24H8.04C8.12 11.24 8.2 11.17 8.2 11.08V9.5C8.2 9.42 8.13 9.34 8.04 9.34H6.28C6.19 9.34 6.12 9.41 6.12 9.5V11.08C6.13 11.17 6.19 11.24 6.28 11.24M8.75 11.24H10.5C10.6 11.24 10.67 11.17 10.67 11.08V9.5C10.67 9.42 10.61 9.34 10.5 9.34H8.75C8.67 9.34 8.6 9.41 8.6 9.5V11.08C8.6 11.17 8.66 11.24 8.75 11.24M11.19 11.24H12.96C13.04 11.24 13.11 11.17 13.11 11.08V9.5C13.11 9.42 13.05 9.34 12.96 9.34H11.19C11.11 9.34 11.04 9.41 11.04 9.5V11.08C11.04 11.17 11.11 11.24 11.19 11.24M6.28 9H8.04C8.12 9 8.2 8.91 8.2 8.82V7.25C8.2 7.16 8.13 7.09 8.04 7.09H6.28C6.19 7.09 6.12 7.15 6.12 7.25V8.82C6.13 8.91 6.19 9 6.28 9M8.75 9H10.5C10.6 9 10.67 8.91 10.67 8.82V7.25C10.67 7.16 10.61 7.09 10.5 7.09H8.75C8.67 7.09 8.6 7.15 8.6 7.25V8.82C8.6 8.91 8.66 9 8.75 9M11.19 9H12.96C13.04 9 13.11 8.91 13.11 8.82V7.25C13.11 7.16 13.04 7.09 12.96 7.09H11.19C11.11 7.09 11.04 7.15 11.04 7.25V8.82C11.04 8.91 11.11 9 11.19 9M11.19 6.72H12.96C13.04 6.72 13.11 6.65 13.11 6.56V5C13.11 4.9 13.04 4.83 12.96 4.83H11.19C11.11 4.83 11.04 4.89 11.04 5V6.56C11.04 6.64 11.11 6.72 11.19 6.72M13.65 11.24H15.41C15.5 11.24 15.57 11.17 15.57 11.08V9.5C15.57 9.42 15.5 9.34 15.41 9.34H13.65C13.57 9.34 13.5 9.41 13.5 9.5V11.08C13.5 11.17 13.57 11.24 13.65 11.24","IconBrandDocker"),T("M12 2.04C6.5 2.04 2 6.53 2 12.06C2 17.06 5.66 21.21 10.44 21.96V14.96H7.9V12.06H10.44V9.85C10.44 7.34 11.93 5.96 14.22 5.96C15.31 5.96 16.45 6.15 16.45 6.15V8.62H15.19C13.95 8.62 13.56 9.39 13.56 10.18V12.06H16.34L15.89 14.96H13.56V21.96A10 10 0 0 0 22 12.06C22 6.53 17.5 2.04 12 2.04Z","IconBrandFacebook"),T("M9.27 7.94C9.27 7.94 9.27 7.94 9.27 7.94M6.85 6.74C6.86 6.74 6.86 6.74 6.85 6.74M21.28 8.6C20.85 7.55 19.96 6.42 19.27 6.06C19.83 7.17 20.16 8.28 20.29 9.1L20.29 9.12C19.16 6.3 17.24 5.16 15.67 2.68C15.59 2.56 15.5 2.43 15.43 2.3C15.39 2.23 15.36 2.16 15.32 2.09C15.26 1.96 15.2 1.83 15.17 1.69C15.17 1.68 15.16 1.67 15.15 1.67H15.13L15.12 1.67L15.12 1.67L15.12 1.67C12.9 2.97 11.97 5.26 11.74 6.71C11.05 6.75 10.37 6.92 9.75 7.22C9.63 7.27 9.58 7.41 9.62 7.53C9.67 7.67 9.83 7.74 9.96 7.68C10.5 7.42 11.1 7.27 11.7 7.23L11.75 7.23C11.83 7.22 11.92 7.22 12 7.22C12.5 7.21 12.97 7.28 13.44 7.42L13.5 7.44C13.6 7.46 13.67 7.5 13.75 7.5C13.8 7.54 13.86 7.56 13.91 7.58L14.05 7.64C14.12 7.67 14.19 7.7 14.25 7.73C14.28 7.75 14.31 7.76 14.34 7.78C14.41 7.82 14.5 7.85 14.54 7.89C14.58 7.91 14.62 7.94 14.66 7.96C15.39 8.41 16 9.03 16.41 9.77C15.88 9.4 14.92 9.03 14 9.19C17.6 11 16.63 17.19 11.64 16.95C11.2 16.94 10.76 16.85 10.34 16.7C10.24 16.67 10.14 16.63 10.05 16.58C10 16.56 9.93 16.53 9.88 16.5C8.65 15.87 7.64 14.68 7.5 13.23C7.5 13.23 8 11.5 10.83 11.5C11.14 11.5 12 10.64 12.03 10.4C12.03 10.31 10.29 9.62 9.61 8.95C9.24 8.59 9.07 8.42 8.92 8.29C8.84 8.22 8.75 8.16 8.66 8.1C8.43 7.3 8.42 6.45 8.63 5.65C7.6 6.12 6.8 6.86 6.22 7.5H6.22C5.82 7 5.85 5.35 5.87 5C5.86 5 5.57 5.16 5.54 5.18C5.19 5.43 4.86 5.71 4.56 6C4.21 6.37 3.9 6.74 3.62 7.14C3 8.05 2.5 9.09 2.28 10.18C2.28 10.19 2.18 10.59 2.11 11.1L2.08 11.33C2.06 11.5 2.04 11.65 2 11.91L2 11.94L2 12.27L2 12.32C2 17.85 6.5 22.33 12 22.33C16.97 22.33 21.08 18.74 21.88 14C21.9 13.89 21.91 13.76 21.93 13.63C22.13 11.91 21.91 10.11 21.28 8.6Z","IconBrandFirefox"),T("M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z","IconBrandGithub"),T("M12,20L15.46,14H15.45C15.79,13.4 16,12.73 16,12C16,10.8 15.46,9.73 14.62,9H19.41C19.79,9.93 20,10.94 20,12A8,8 0 0,1 12,20M4,12C4,10.54 4.39,9.18 5.07,8L8.54,14H8.55C9.24,15.19 10.5,16 12,16C12.45,16 12.88,15.91 13.29,15.77L10.89,19.91C7,19.37 4,16.04 4,12M15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9A3,3 0 0,1 15,12M12,4C14.96,4 17.54,5.61 18.92,8H12C10.06,8 8.45,9.38 8.08,11.21L5.7,7.08C7.16,5.21 9.44,4 12,4M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z","IconBrandGoogleChrome"),T("M12,12.14C11.09,10.77 10.14,9.78 9.14,9.19C8.14,8.59 7.27,8.38 6.5,8.55C5.77,8.73 5.14,9.14 4.64,9.8C4.2,10.39 4,11.06 4,11.81V12C4,12.78 4.11,13.58 4.36,14.39C4.45,14.64 4.5,14.64 4.55,14.39C4.67,13.77 4.96,13.31 5.41,13.03C5.87,12.75 6.47,12.76 7.22,13.05C7.97,13.35 8.7,14 9.42,14.95C10.7,16.67 12.2,17.72 13.92,18.09C16.14,18.41 17.81,17.7 18.94,16C19.25,15.39 19.5,14.86 19.64,14.39C19.73,14.08 19.69,14.05 19.5,14.3C19.03,14.92 18.4,15.33 17.6,15.5C16.8,15.7 15.89,15.5 14.86,15C13.83,14.43 12.88,13.5 12,12.14M16.97,8.16C15.41,5.81 13.72,4.5 11.91,4.17C10.47,3.95 8.91,4.45 7.22,5.67C7,5.83 6.9,5.91 6.91,5.93C6.93,5.95 7.06,5.89 7.31,5.77C9.81,4.55 12.22,5.83 14.53,9.61C15.03,10.45 15.55,11.11 16.1,11.58C16.65,12.05 17.16,12.33 17.65,12.42C18.13,12.5 18.57,12.5 18.96,12.38C19.35,12.25 19.7,12.05 20,11.77C20,11.17 19.91,10.5 19.69,9.8C19.19,9.92 18.74,9.88 18.35,9.68C17.96,9.5 17.5,8.97 16.97,8.16M12,2C14.75,2 17.1,3 19.05,4.95C21,6.9 22,9.25 22,12C22,14.75 21,17.1 19.05,19.05C17.1,21 14.75,22 12,22C9.25,22 6.9,21 4.95,19.05C3,17.1 2,14.75 2,12C2,9.25 3,6.9 4.95,4.95C6.9,3 9.25,2 12,2Z","IconBrandGoogleEarth"),T("M7.8,2H16.2C19.4,2 22,4.6 22,7.8V16.2A5.8,5.8 0 0,1 16.2,22H7.8C4.6,22 2,19.4 2,16.2V7.8A5.8,5.8 0 0,1 7.8,2M7.6,4A3.6,3.6 0 0,0 4,7.6V16.4C4,18.39 5.61,20 7.6,20H16.4A3.6,3.6 0 0,0 20,16.4V7.6C20,5.61 18.39,4 16.4,4H7.6M17.25,5.5A1.25,1.25 0 0,1 18.5,6.75A1.25,1.25 0 0,1 17.25,8A1.25,1.25 0 0,1 16,6.75A1.25,1.25 0 0,1 17.25,5.5M12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9Z","IconBrandInstagram"),T("M14.62,8.35C14.2,8.63 12.87,9.39 12.67,9.54C12.28,9.85 11.92,9.83 11.53,9.53C11.33,9.37 10,8.61 9.58,8.34C9.1,8.03 9.13,7.64 9.66,7.42C11.3,6.73 12.94,6.78 14.57,7.45C15.06,7.66 15.08,8.05 14.62,8.35M21.84,15.63C20.91,13.54 19.64,11.64 18,9.97C17.47,9.42 17.14,8.8 16.94,8.09C16.84,7.76 16.77,7.42 16.7,7.08C16.5,6.2 16.41,5.3 16,4.47C15.27,2.89 14,2.07 12.16,2C10.35,2.05 9,2.81 8.21,4.4C8,4.83 7.85,5.28 7.75,5.74C7.58,6.5 7.43,7.29 7.25,8.06C7.1,8.71 6.8,9.27 6.29,9.77C4.68,11.34 3.39,13.14 2.41,15.12C2.27,15.41 2.13,15.7 2.04,16C1.85,16.66 2.33,17.12 3.03,16.96C3.47,16.87 3.91,16.78 4.33,16.65C4.74,16.5 4.9,16.6 5,17C5.65,19.15 7.07,20.66 9.24,21.5C13.36,23.06 18.17,20.84 19.21,16.92C19.28,16.65 19.38,16.55 19.68,16.65C20.14,16.79 20.61,16.89 21.08,17C21.57,17.09 21.93,16.84 22,16.36C22.03,16.1 21.94,15.87 21.84,15.63","IconBrandLinux"),T("M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12C4,14.09 4.8,16 6.11,17.41L9.88,9.88L17.41,6.11C16,4.8 14.09,4 12,4M12,20A8,8 0 0,0 20,12C20,9.91 19.2,8 17.89,6.59L14.12,14.12L6.59,17.89C8,19.2 9.91,20 12,20M12,12L11.23,11.23L9.7,14.3L12.77,12.77L12,12M12,17.5H13V19H12V17.5M15.88,15.89L16.59,15.18L17.65,16.24L16.94,16.95L15.88,15.89M17.5,12V11H19V12H17.5M12,6.5H11V5H12V6.5M8.12,8.11L7.41,8.82L6.35,7.76L7.06,7.05L8.12,8.11M6.5,12V13H5V12H6.5Z","IconBrandSafari"),T("M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12M14.34,7.74C14.92,8.07 15.65,7.87 16,7.3C16.31,6.73 16.12,6 15.54,5.66C14.97,5.33 14.23,5.5 13.9,6.1C13.57,6.67 13.77,7.41 14.34,7.74M11.88,15.5C11.35,15.5 10.85,15.39 10.41,15.18L9.57,16.68C10.27,17 11.05,17.22 11.88,17.22C12.37,17.22 12.83,17.15 13.28,17.03C13.36,16.54 13.64,16.1 14.1,15.84C14.56,15.57 15.08,15.55 15.54,15.72C16.43,14.85 17,13.66 17.09,12.33L15.38,12.31C15.22,14.1 13.72,15.5 11.88,15.5M11.88,8.5C13.72,8.5 15.22,9.89 15.38,11.69L17.09,11.66C17,10.34 16.43,9.15 15.54,8.28C15.08,8.45 14.55,8.42 14.1,8.16C13.64,7.9 13.36,7.45 13.28,6.97C12.83,6.85 12.37,6.78 11.88,6.78C11.05,6.78 10.27,6.97 9.57,7.32L10.41,8.82C10.85,8.61 11.35,8.5 11.88,8.5M8.37,12C8.37,10.81 8.96,9.76 9.86,9.13L9,7.65C7.94,8.36 7.15,9.43 6.83,10.69C7.21,11 7.45,11.47 7.45,12C7.45,12.53 7.21,13 6.83,13.31C7.15,14.56 7.94,15.64 9,16.34L9.86,14.87C8.96,14.24 8.37,13.19 8.37,12M14.34,16.26C13.77,16.59 13.57,17.32 13.9,17.9C14.23,18.47 14.97,18.67 15.54,18.34C16.12,18 16.31,17.27 16,16.7C15.65,16.12 14.92,15.93 14.34,16.26M5.76,10.8C5.1,10.8 4.56,11.34 4.56,12C4.56,12.66 5.1,13.2 5.76,13.2C6.43,13.2 6.96,12.66 6.96,12C6.96,11.34 6.43,10.8 5.76,10.8Z","IconBrandUbuntu"),T("M17,16.47V7.39L11,11.93M2.22,9.19C1.92,8.87 1.91,8.37 2.2,8.04L3.4,6.93C3.6,6.75 4.09,6.67 4.45,6.93L7.87,9.54L15.8,2.29C16.12,1.97 16.67,1.84 17.3,2.17L21.3,4.08C21.66,4.29 22,4.62 22,5.23V18.73C22,19.13 21.71,19.56 21.4,19.73L17,21.83C16.68,21.96 16.08,21.84 15.87,21.63L7.85,14.33L4.45,16.93C4.07,17.19 3.6,17.12 3.4,16.93L2.2,15.83C1.88,15.5 1.92,14.96 2.25,14.63L5.25,11.93","IconBrandVscode"),T("M14.97,18.95L12.41,12.92C11.39,14.91 10.27,17 9.31,18.95C9.3,18.96 8.84,18.95 8.84,18.95C7.37,15.5 5.85,12.1 4.37,8.68C4.03,7.84 2.83,6.5 2,6.5C2,6.4 2,6.18 2,6.05H7.06V6.5C6.46,6.5 5.44,6.9 5.7,7.55C6.42,9.09 8.94,15.06 9.63,16.58C10.1,15.64 11.43,13.16 12,12.11C11.55,11.23 10.13,7.93 9.71,7.11C9.39,6.57 8.58,6.5 7.96,6.5C7.96,6.35 7.97,6.25 7.96,6.06L12.42,6.07V6.47C11.81,6.5 11.24,6.71 11.5,7.29C12.1,8.53 12.45,9.42 13,10.57C13.17,10.23 14.07,8.38 14.5,7.41C14.76,6.76 14.37,6.5 13.29,6.5C13.3,6.38 13.3,6.17 13.3,6.07C14.69,6.06 16.78,6.06 17.15,6.05V6.47C16.44,6.5 15.71,6.88 15.33,7.46L13.5,11.3C13.68,11.81 15.46,15.76 15.65,16.2L19.5,7.37C19.2,6.65 18.34,6.5 18,6.5C18,6.37 18,6.2 18,6.05L22,6.08V6.1L22,6.5C21.12,6.5 20.57,7 20.25,7.75C19.45,9.54 17,15.24 15.4,18.95C15.4,18.95 14.97,18.95 14.97,18.95Z","IconBrandWikipedia"),T("M10,15L15.19,12L10,9V15M21.56,7.17C21.69,7.64 21.78,8.27 21.84,9.07C21.91,9.87 21.94,10.56 21.94,11.16L22,12C22,14.19 21.84,15.8 21.56,16.83C21.31,17.73 20.73,18.31 19.83,18.56C19.36,18.69 18.5,18.78 17.18,18.84C15.88,18.91 14.69,18.94 13.59,18.94L12,19C7.81,19 5.2,18.84 4.17,18.56C3.27,18.31 2.69,17.73 2.44,16.83C2.31,16.36 2.22,15.73 2.16,14.93C2.09,14.13 2.06,13.44 2.06,12.84L2,12C2,9.81 2.16,8.2 2.44,7.17C2.69,6.27 3.27,5.69 4.17,5.44C4.64,5.31 5.5,5.22 6.82,5.16C8.12,5.09 9.31,5.06 10.41,5.06L12,5C16.19,5 18.8,5.16 19.83,5.44C20.73,5.69 21.31,6.27 21.56,7.17Z","IconBrandYoutube"),T("M5 22C3.68 22 3.15 19.64 3.04 18.7A5.56 5.56 0 0 1 3.36 16A2.5 2.5 0 0 1 5.23 14.38C6.4 14.18 7.23 14.88 8.29 15.12A1.21 1.21 0 0 0 9.85 13.75C9.41 12.03 6.28 12 5 12C5 10.14 7.04 9.9 8.5 10.04A10.8 10.8 0 0 1 11.04 10.6C11.54 10.77 12.12 11.2 12.67 11.16C13.5 11.09 13.67 10.23 13.31 9.6C12.44 8.12 9.97 8 8.5 8C8.5 6 10.23 5.62 11.89 5.92A11.58 11.58 0 0 1 14.38 6.71C14.89 6.93 15.5 7.35 16.06 7.16C17.5 6.72 16 5.18 15.36 4.81A6.6 6.6 0 0 0 13.94 4.23C13.4 4.07 12.74 4.13 13.23 3.5A5.13 5.13 0 0 1 15.96 2.26C17.85 1.82 20.46 1.74 20.92 4.12A5.3 5.3 0 0 1 20.07 7.7A38.96 38.96 0 0 1 13.22 16.33A36.6 36.6 0 0 1 8.62 20.32C7.62 21.04 6.3 22 5 22Z","IconBread"),T("M14,12H10V10H14M14,16H10V14H14M20,8H17.19C16.74,7.22 16.12,6.55 15.37,6.04L17,4.41L15.59,3L13.42,5.17C12.96,5.06 12.5,5 12,5C11.5,5 11.04,5.06 10.59,5.17L8.41,3L7,4.41L8.62,6.04C7.88,6.55 7.26,7.22 6.81,8H4V10H6.09C6.04,10.33 6,10.66 6,11V12H4V14H6V15C6,15.34 6.04,15.67 6.09,16H4V18H6.81C7.85,19.79 9.78,21 12,21C14.22,21 16.15,19.79 17.19,18H20V16H17.91C17.96,15.67 18,15.34 18,15V14H20V12H18V11C18,10.66 17.96,10.33 17.91,10H20V8Z","IconBug"),T("M12,10A2,2 0 0,0 10,12C10,13.11 10.9,14 12,14C13.11,14 14,13.11 14,12A2,2 0 0,0 12,10Z","IconBullet"),T("M6.03 12.03L8.03 15.5L5.5 18.68L2 12.62L6.03 12.03M17 18V15.29C17.88 14.9 18.5 14.03 18.5 13C18.5 12.43 18.3 11.9 17.97 11.5L19.94 10.35C20.95 9.76 21.3 8.47 20.71 7.46L19.33 5.06C18.74 4.05 17.45 3.7 16.44 4.28L8.31 9C7.36 9.53 7.03 10.75 7.58 11.71L9.08 14.31C9.63 15.26 10.86 15.59 11.81 15.04L13.69 13.96C13.94 14.55 14.41 15.03 15 15.29V18C15 19.1 15.9 20 17 20H22V18H17Z","IconCamera"),T("M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z","IconCancel"),T("M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M19,19H15V21H19A2,2 0 0,0 21,19V15H19M19,3H15V5H19V9H21V5A2,2 0 0,0 19,3M5,5H9V3H5A2,2 0 0,0 3,5V9H5M5,15H3V19A2,2 0 0,0 5,21H9V19H5V15Z","IconCenter"),T("M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,5V19H5V5H19M10,17L6,13L7.41,11.58L10,14.17L16.59,7.58L18,9","IconChecked"),T("M16.59,5.59L18,7L12,13L6,7L7.41,5.59L12,10.17L16.59,5.59M16.59,11.59L18,13L12,19L6,13L7.41,11.59L12,16.17L16.59,11.59Z","IconChevronDoubleDown"),T("M18.41,7.41L17,6L11,12L17,18L18.41,16.59L13.83,12L18.41,7.41M12.41,7.41L11,6L5,12L11,18L12.41,16.59L7.83,12L12.41,7.41Z","IconChevronDoubleLeft"),T("M5.59,7.41L7,6L13,12L7,18L5.59,16.59L10.17,12L5.59,7.41M11.59,7.41L13,6L19,12L13,18L11.59,16.59L16.17,12L11.59,7.41Z","IconChevronDoubleRight"),T("M7.41,18.41L6,17L12,11L18,17L16.59,18.41L12,13.83L7.41,18.41M7.41,12.41L6,11L12,5L18,11L16.59,12.41L12,7.83L7.41,12.41Z","IconChevronDoubleUp"),T("M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z","IconChevronDown"),T("M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z","IconChevronLeft"),T("M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z","IconChevronRight"),T("M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z","IconChevronUp"),T("M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z","IconClose"),T("M8,3A2,2 0 0,0 6,5V9A2,2 0 0,1 4,11H3V13H4A2,2 0 0,1 6,15V19A2,2 0 0,0 8,21H10V19H8V14A2,2 0 0,0 6,12A2,2 0 0,0 8,10V5H10V3M16,3A2,2 0 0,1 18,5V9A2,2 0 0,0 20,11H21V13H20A2,2 0 0,0 18,15V19A2,2 0 0,1 16,21H14V19H16V14A2,2 0 0,1 18,12A2,2 0 0,1 16,10V5H14V3H16Z","IconCode"),T("M2,21H20V19H2M20,8H18V5H20M20,3H4V13A4,4 0 0,0 8,17H14A4,4 0 0,0 18,13V10H20A2,2 0 0,0 22,8V5C22,3.89 21.1,3 20,3Z","IconCoffee"),T("M4 19V20H22V22H2V2H4V17C7 17 10 15 12.1 11.4C15.1 6.4 18.4 4 22 4V6C19.2 6 16.5 8.1 13.9 12.5C11.3 16.6 7.7 19 4 19Z","IconCurve"),T("M19,3L13,9L15,11L22,4V3M12,12.5A0.5,0.5 0 0,1 11.5,12A0.5,0.5 0 0,1 12,11.5A0.5,0.5 0 0,1 12.5,12A0.5,0.5 0 0,1 12,12.5M6,20A2,2 0 0,1 4,18C4,16.89 4.9,16 6,16A2,2 0 0,1 8,18C8,19.11 7.1,20 6,20M6,8A2,2 0 0,1 4,6C4,4.89 4.9,4 6,4A2,2 0 0,1 8,6C8,7.11 7.1,8 6,8M9.64,7.64C9.87,7.14 10,6.59 10,6A4,4 0 0,0 6,2A4,4 0 0,0 2,6A4,4 0 0,0 6,10C6.59,10 7.14,9.87 7.64,9.64L10,12L7.64,14.36C7.14,14.13 6.59,14 6,14A4,4 0 0,0 2,18A4,4 0 0,0 6,22A4,4 0 0,0 10,18C10,17.41 9.87,16.86 9.64,16.36L12,14L19,21H22V20L9.64,7.64Z","IconCut"),T("M12 3C7.58 3 4 4.79 4 7V17C4 19.21 7.59 21 12 21S20 19.21 20 17V7C20 4.79 16.42 3 12 3M18 17C18 17.5 15.87 19 12 19S6 17.5 6 17V14.77C7.61 15.55 9.72 16 12 16S16.39 15.55 18 14.77V17M18 12.45C16.7 13.4 14.42 14 12 14C9.58 14 7.3 13.4 6 12.45V9.64C7.47 10.47 9.61 11 12 11C14.39 11 16.53 10.47 18 9.64V12.45M12 9C8.13 9 6 7.5 6 7S8.13 5 12 5C15.87 5 18 6.5 18 7S15.87 9 12 9Z","IconData"),T("M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19M8.46,11.88L9.87,10.47L12,12.59L14.12,10.47L15.53,11.88L13.41,14L15.53,16.12L14.12,17.53L12,15.41L9.88,17.53L8.47,16.12L10.59,14L8.46,11.88M15.5,4L14.5,3H9.5L8.5,4H5V6H19V4H15.5Z","IconDelete"),T("M9.75 20.85C11.53 20.15 11.14 18.22 10.24 17C9.35 15.75 8.12 14.89 6.88 14.06C6 13.5 5.19 12.8 4.54 12C4.26 11.67 3.69 11.06 4.27 10.94C4.86 10.82 5.88 11.4 6.4 11.62C7.31 12 8.21 12.44 9.05 12.96L10.06 11.26C8.5 10.23 6.5 9.32 4.64 9.05C3.58 8.89 2.46 9.11 2.1 10.26C1.78 11.25 2.29 12.25 2.87 13.03C4.24 14.86 6.37 15.74 7.96 17.32C8.3 17.65 8.71 18.04 8.91 18.5C9.12 18.94 9.07 18.97 8.6 18.97C7.36 18.97 5.81 18 4.8 17.36L3.79 19.06C5.32 20 7.88 21.47 9.75 20.85M20.84 5.25C21.06 5.03 21.06 4.67 20.84 4.46L19.54 3.16C19.33 2.95 18.97 2.95 18.76 3.16L17.74 4.18L19.82 6.26M11 10.92V13H13.08L19.23 6.85L17.15 4.77L11 10.92Z","IconDraw"),T("M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z","IconEdit"),T("M3 6V8H14V6H3M3 10V12H14V10H3M20 10.1C19.9 10.1 19.7 10.2 19.6 10.3L18.6 11.3L20.7 13.4L21.7 12.4C21.9 12.2 21.9 11.8 21.7 11.6L20.4 10.3C20.3 10.2 20.2 10.1 20 10.1M18.1 11.9L12 17.9V20H14.1L20.2 13.9L18.1 11.9M3 14V16H10V14H3Z","IconEditPlaylist"),T("M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z","IconExport"),T("M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z","IconExternalLink"),T("M14,12V19.88C14.04,20.18 13.94,20.5 13.71,20.71C13.32,21.1 12.69,21.1 12.3,20.71L10.29,18.7C10.06,18.47 9.96,18.16 10,17.87V12H9.97L4.21,4.62C3.87,4.19 3.95,3.56 4.38,3.22C4.57,3.08 4.78,3 5,3V3H19V3C19.22,3 19.43,3.08 19.62,3.22C20.05,3.56 20.13,4.19 19.79,4.62L14.03,12H14Z","IconFilter"),T("M18.41,16.59L13.82,12L18.41,7.41L17,6L11,12L17,18L18.41,16.59M6,6H8V18H6V6Z","IconFirst"),T("M7.5,5.6L5,7L6.4,4.5L5,2L7.5,3.4L10,2L8.6,4.5L10,7L7.5,5.6M19.5,15.4L22,14L20.6,16.5L22,19L19.5,17.6L17,19L18.4,16.5L17,14L19.5,15.4M22,2L20.6,4.5L22,7L19.5,5.6L17,7L18.4,4.5L17,2L19.5,3.4L22,2M13.34,12.78L15.78,10.34L13.66,8.22L11.22,10.66L13.34,12.78M14.37,7.29L16.71,9.63C17.1,10 17.1,10.65 16.71,11.04L5.04,22.71C4.65,23.1 4,23.1 3.63,22.71L1.29,20.37C0.9,20 0.9,19.35 1.29,18.96L12.96,7.29C13.35,6.9 14,6.9 14.37,7.29Z","IconFix"),T("M5,7H9A2,2,0,0,1,11,9V15A2,2,0,0,1,9,17H5V15H9V13H6V11H9V9H5V7M13,7H16A3,3,0,0,1,19,10V14A3,3,0,0,1,16,17H13V7M16,15A1,1,0,0,0,17,14V10A1,1,0,0,0,16,9H15V15H16Z","IconFly"),T("M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M19,19H15V21H19A2,2 0 0,0 21,19V15H19M19,3H15V5H19V9H21V5A2,2 0 0,0 19,3M5,5H9V3H5A2,2 0 0,0 3,5V9H5M5,15H3V19A2,2 0 0,0 5,21H9V19H5V15Z","IconFocus"),T("M13.5,15.5H10V12.5H13.5A1.5,1.5 0 0,1 15,14A1.5,1.5 0 0,1 13.5,15.5M10,6.5H13A1.5,1.5 0 0,1 14.5,8A1.5,1.5 0 0,1 13,9.5H10M15.6,10.79C16.57,10.11 17.25,9 17.25,8C17.25,5.74 15.5,4 13.25,4H7V18H14.04C16.14,18 17.75,16.3 17.75,14.21C17.75,12.69 16.89,11.39 15.6,10.79Z","IconFormatBold"),T("M7,5H21V7H7V5M7,13V11H21V13H7M4,4.5A1.5,1.5 0 0,1 5.5,6A1.5,1.5 0 0,1 4,7.5A1.5,1.5 0 0,1 2.5,6A1.5,1.5 0 0,1 4,4.5M4,10.5A1.5,1.5 0 0,1 5.5,12A1.5,1.5 0 0,1 4,13.5A1.5,1.5 0 0,1 2.5,12A1.5,1.5 0 0,1 4,10.5M7,19V17H21V19H7M4,16.5A1.5,1.5 0 0,1 5.5,18A1.5,1.5 0 0,1 4,19.5A1.5,1.5 0 0,1 2.5,18A1.5,1.5 0 0,1 4,16.5Z","IconFormatBullets"),T("M10,4V7H12.21L8.79,15H6V18H14V15H11.79L15.21,7H18V4H10Z","IconFormatItalic"),T("M12 5.5L10 8H14L12 5.5M18 10V14L20.5 12L18 10M6 10L3.5 12L6 14V10M14 16H10L12 18.5L14 16M21 3H3C1.9 3 1 3.9 1 5V19C1 20.1 1.9 21 3 21H21C22.1 21 23 20.1 23 19V5C23 3.9 22.1 3 21 3M21 19H3V5H21V19Z","IconFullscreen"),T("M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z","IconGooglePlayStore"),T("M3.05,13H1V11H3.05C3.5,6.83 6.83,3.5 11,3.05V1H13V3.05C17.17,3.5 20.5,6.83 20.95,11H23V13H20.95C20.5,17.17 17.17,20.5 13,20.95V23H11V20.95C6.83,20.5 3.5,17.17 3.05,13M12,5A7,7 0 0,0 5,12A7,7 0 0,0 12,19A7,7 0 0,0 19,12A7,7 0 0,0 12,5Z","IconGpsOff"),T("M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M3.05,13H1V11H3.05C3.5,6.83 6.83,3.5 11,3.05V1H13V3.05C17.17,3.5 20.5,6.83 20.95,11H23V13H20.95C20.5,17.17 17.17,20.5 13,20.95V23H11V20.95C6.83,20.5 3.5,17.17 3.05,13M12,5A7,7 0 0,0 5,12A7,7 0 0,0 12,19A7,7 0 0,0 19,12A7,7 0 0,0 12,5Z","IconGpsOn"),T("M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5C2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z","IconHeart"),T("M19.79,15.41C20.74,13.24 20.74,10.75 19.79,8.59L17.05,9.83C17.65,11.21 17.65,12.78 17.06,14.17L19.79,15.41M15.42,4.21C13.25,3.26 10.76,3.26 8.59,4.21L9.83,6.94C11.22,6.35 12.79,6.35 14.18,6.95L15.42,4.21M4.21,8.58C3.26,10.76 3.26,13.24 4.21,15.42L6.95,14.17C6.35,12.79 6.35,11.21 6.95,9.82L4.21,8.58M8.59,19.79C10.76,20.74 13.25,20.74 15.42,19.78L14.18,17.05C12.8,17.65 11.22,17.65 9.84,17.06L8.59,19.79M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,8A4,4 0 0,0 8,12A4,4 0 0,0 12,16A4,4 0 0,0 16,12A4,4 0 0,0 12,8Z","IconHelp"),T("M11.83,9L15,12.16C15,12.11 15,12.05 15,12A3,3 0 0,0 12,9C11.94,9 11.89,9 11.83,9M7.53,9.8L9.08,11.35C9.03,11.56 9,11.77 9,12A3,3 0 0,0 12,15C12.22,15 12.44,14.97 12.65,14.92L14.2,16.47C13.53,16.8 12.79,17 12,17A5,5 0 0,1 7,12C7,11.21 7.2,10.47 7.53,9.8M2,4.27L4.28,6.55L4.73,7C3.08,8.3 1.78,10 1,12C2.73,16.39 7,19.5 12,19.5C13.55,19.5 15.03,19.2 16.38,18.66L16.81,19.08L19.73,22L21,20.73L3.27,3M12,7A5,5 0 0,1 17,12C17,12.64 16.87,13.26 16.64,13.82L19.57,16.75C21.07,15.5 22.27,13.86 23,12C21.27,7.61 17,4.5 12,4.5C10.6,4.5 9.26,4.75 8,5.2L10.17,7.35C10.74,7.13 11.35,7 12,7Z","IconHide"),T("M13,9H18.5L13,3.5V9M6,2H14L20,8V20A2,2 0 0,1 18,22H6C4.89,22 4,21.1 4,20V4C4,2.89 4.89,2 6,2M6,20H15L18,20V12L14,16L12,14L6,20M8,9A2,2 0 0,0 6,11A2,2 0 0,0 8,13A2,2 0 0,0 10,11A2,2 0 0,0 8,9Z","IconImage"),T("M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z","IconImport"));T("M21,9L17,5V8H10V10H17V13M7,11L3,15L7,19V16H14V14H7V11Z","IconInvert"),T("M10.5,15.97L10.91,18.41C10.65,18.55 10.23,18.68 9.67,18.8C9.1,18.93 8.43,19 7.66,19C5.45,18.96 3.79,18.3 2.68,17.04C1.56,15.77 1,14.16 1,12.21C1.05,9.9 1.72,8.13 3,6.89C4.32,5.64 5.96,5 7.94,5C8.69,5 9.34,5.07 9.88,5.19C10.42,5.31 10.82,5.44 11.08,5.59L10.5,8.08L9.44,7.74C9.04,7.64 8.58,7.59 8.05,7.59C6.89,7.58 5.93,7.95 5.18,8.69C4.42,9.42 4.03,10.54 4,12.03C4,13.39 4.37,14.45 5.08,15.23C5.79,16 6.79,16.4 8.07,16.41L9.4,16.29C9.83,16.21 10.19,16.1 10.5,15.97M11,11H13V9H15V11H17V13H15V15H13V13H11V11M18,11H20V9H22V11H24V13H22V15H20V13H18V11Z","IconLanguageCpp"),T("M11.5,15.97L11.91,18.41C11.65,18.55 11.23,18.68 10.67,18.8C10.1,18.93 9.43,19 8.66,19C6.45,18.96 4.79,18.3 3.68,17.04C2.56,15.77 2,14.16 2,12.21C2.05,9.9 2.72,8.13 4,6.89C5.32,5.64 6.96,5 8.94,5C9.69,5 10.34,5.07 10.88,5.19C11.42,5.31 11.82,5.44 12.08,5.59L11.5,8.08L10.44,7.74C10.04,7.64 9.58,7.59 9.05,7.59C7.89,7.58 6.93,7.95 6.18,8.69C5.42,9.42 5.03,10.54 5,12.03C5,13.39 5.37,14.45 6.08,15.23C6.79,16 7.79,16.4 9.07,16.41L10.4,16.29C10.83,16.21 11.19,16.1 11.5,15.97M13.89,19L14.5,15H13L13.34,13H14.84L15.16,11H13.66L14,9H15.5L16.11,5H18.11L17.5,9H18.5L19.11,5H21.11L20.5,9H22L21.66,11H20.16L19.84,13H21.34L21,15H19.5L18.89,19H16.89L17.5,15H16.5L15.89,19H13.89M16.84,13H17.84L18.16,11H17.16L16.84,13Z","IconLanguageCsharp"),T("M3,3H21V21H3V3M7.73,18.04C8.13,18.89 8.92,19.59 10.27,19.59C11.77,19.59 12.8,18.79 12.8,17.04V11.26H11.1V17C11.1,17.86 10.75,18.08 10.2,18.08C9.62,18.08 9.38,17.68 9.11,17.21L7.73,18.04M13.71,17.86C14.21,18.84 15.22,19.59 16.8,19.59C18.4,19.59 19.6,18.76 19.6,17.23C19.6,15.82 18.79,15.19 17.35,14.57L16.93,14.39C16.2,14.08 15.89,13.87 15.89,13.37C15.89,12.96 16.2,12.64 16.7,12.64C17.18,12.64 17.5,12.85 17.79,13.37L19.1,12.5C18.55,11.54 17.77,11.17 16.7,11.17C15.19,11.17 14.22,12.13 14.22,13.4C14.22,14.78 15.03,15.43 16.25,15.95L16.67,16.13C17.45,16.47 17.91,16.68 17.91,17.26C17.91,17.74 17.46,18.09 16.76,18.09C15.93,18.09 15.45,17.66 15.09,17.06L13.71,17.86Z","IconLanguageJavascript"),T("M20.56 18H3.44C2.65 18 2 17.37 2 16.59V7.41C2 6.63 2.65 6 3.44 6H20.56C21.35 6 22 6.63 22 7.41V16.59C22 17.37 21.35 18 20.56 18M6.81 15.19V11.53L8.73 13.88L10.65 11.53V15.19H12.58V8.81H10.65L8.73 11.16L6.81 8.81H4.89V15.19H6.81M19.69 12H17.77V8.81H15.85V12H13.92L16.81 15.28L19.69 12Z","IconLanguageMarkdown"),T("M19.14,7.5A2.86,2.86 0 0,1 22,10.36V14.14A2.86,2.86 0 0,1 19.14,17H12C12,17.39 12.32,17.96 12.71,17.96H17V19.64A2.86,2.86 0 0,1 14.14,22.5H9.86A2.86,2.86 0 0,1 7,19.64V15.89C7,14.31 8.28,13.04 9.86,13.04H15.11C16.69,13.04 17.96,11.76 17.96,10.18V7.5H19.14M14.86,19.29C14.46,19.29 14.14,19.59 14.14,20.18C14.14,20.77 14.46,20.89 14.86,20.89A0.71,0.71 0 0,0 15.57,20.18C15.57,19.59 15.25,19.29 14.86,19.29M4.86,17.5C3.28,17.5 2,16.22 2,14.64V10.86C2,9.28 3.28,8 4.86,8H12C12,7.61 11.68,7.04 11.29,7.04H7V5.36C7,3.78 8.28,2.5 9.86,2.5H14.14C15.72,2.5 17,3.78 17,5.36V9.11C17,10.69 15.72,11.96 14.14,11.96H8.89C7.31,11.96 6.04,13.24 6.04,14.82V17.5H4.86M9.14,5.71C9.54,5.71 9.86,5.41 9.86,4.82C9.86,4.23 9.54,4.11 9.14,4.11C8.75,4.11 8.43,4.23 8.43,4.82C8.43,5.41 8.75,5.71 9.14,5.71Z","IconLanguagePython"),T("M21.9 11.7L21 11.2V11L21.7 10.3C21.8 10.2 21.8 10 21.7 9.9L21.6 9.8L20.7 9.5C20.7 9.4 20.7 9.3 20.6 9.3L21.2 8.5C21.3 8.4 21.3 8.2 21.1 8.1C21.1 8.1 21 8.1 21 8L20 7.8C20 7.7 19.9 7.7 19.9 7.6L20.3 6.7V6.4C20.2 6.3 20.1 6.3 20 6.3H19C19 6.3 19 6.2 18.9 6.2L19.1 5.2C19.1 5 19 4.9 18.9 4.9H18.8L17.8 5.1C17.8 5 17.7 5 17.6 4.9V3.9C17.6 3.7 17.5 3.6 17.3 3.6H17.2L16.3 4H16.2L16 3C16 2.8 15.8 2.7 15.7 2.8H15.6L14.8 3.4C14.7 3.4 14.6 3.4 14.6 3.3L14.3 2.4C14.2 2.3 14.1 2.2 13.9 2.2C13.9 2.2 13.8 2.2 13.8 2.3L13 3H12.8L12.3 2.2C12.2 2 12 2 11.8 2L11.7 2.1L11.2 3H11L10.3 2.3C10.2 2.2 10 2.2 9.9 2.3L9.8 2.4L9.5 3.3C9.4 3.3 9.3 3.3 9.3 3.4L8.5 2.8C8.3 2.7 8.1 2.7 8 2.9V3L7.8 4C7.8 4 7.7 4 7.6 4.1L6.7 3.7C6.6 3.6 6.4 3.7 6.3 3.8V4.9C6.3 5 6.2 5 6.2 5.1L5.2 4.9C5 4.8 4.9 4.9 4.9 5.1V5.2L5.1 6.2C5 6.2 5 6.3 4.9 6.3H3.9C3.7 6.3 3.6 6.4 3.6 6.6V6.7L4 7.6V7.8L3 8C2.8 8 2.7 8.2 2.7 8.3V8.4L3.3 9.2C3.3 9.3 3.3 9.4 3.2 9.4L2.4 9.8C2.3 9.9 2.2 10 2.2 10.2C2.2 10.2 2.2 10.3 2.3 10.3L3 11V11.2L2.2 11.7C2 11.8 2 12 2 12.1L2.1 12.2L3 12.8V13L2.3 13.7C2.2 13.8 2.2 14 2.3 14.1L2.4 14.2L3.3 14.5C3.3 14.6 3.3 14.7 3.4 14.7L2.8 15.5C2.7 15.6 2.7 15.8 2.9 15.9C2.9 15.9 3 15.9 3 16L4 16.2C4 16.3 4.1 16.3 4.1 16.4L3.7 17.3C3.6 17.4 3.7 17.6 3.8 17.7H4.9C5 17.7 5 17.8 5.1 17.8L4.9 18.8C4.9 19 5 19.1 5.1 19.1H5.2L6.2 18.9C6.2 19 6.3 19 6.4 19.1V20.1C6.4 20.3 6.5 20.4 6.7 20.4H6.8L7.7 20H7.8L8 21C8 21.2 8.2 21.3 8.3 21.2H8.4L9.2 20.6C9.3 20.6 9.4 20.6 9.4 20.7L9.7 21.6C9.8 21.7 9.9 21.8 10.1 21.8C10.1 21.8 10.2 21.8 10.2 21.7L11 21H11.2L11.7 21.8C11.8 21.9 12 22 12.1 21.9L12.2 21.8L12.7 21H12.9L13.6 21.7C13.7 21.8 13.9 21.8 14 21.7L14.1 21.6L14.4 20.7C14.5 20.7 14.6 20.7 14.6 20.6L15.4 21.2C15.5 21.3 15.7 21.3 15.8 21.1C15.8 21.1 15.8 21 15.9 21L16.1 20C16.2 20 16.2 19.9 16.3 19.9L17.2 20.3C17.3 20.4 17.5 20.3 17.6 20.2V19.1L17.8 18.9L18.8 19.1C19 19.1 19.1 19 19.1 18.9V18.8L18.9 17.8L19.1 17.6H20.1C20.3 17.6 20.4 17.5 20.4 17.3V17.2L20 16.3C20 16.2 20.1 16.2 20.1 16.1L21.1 15.9C21.3 15.9 21.4 15.7 21.3 15.6V15.5L20.7 14.7L20.8 14.5L21.7 14.2C21.8 14.1 21.9 14 21.9 13.8C21.9 13.8 21.9 13.7 21.8 13.7L21 13V12.8L21.8 12.3C22 12.2 22 12 21.9 11.7C21.9 11.8 21.9 11.8 21.9 11.7M16.2 18.7C15.9 18.6 15.7 18.3 15.7 18C15.8 17.7 16.1 17.5 16.4 17.5C16.7 17.6 16.9 17.9 16.9 18.2C16.9 18.6 16.6 18.8 16.2 18.7M16 16.8C15.7 16.7 15.4 16.9 15.4 17.2L15 18.6C14.1 19 13.1 19.2 12 19.2C10.9 19.2 9.9 19 8.9 18.5L8.6 17.1C8.5 16.8 8.3 16.6 8 16.7L6.8 17C6.6 16.8 6.4 16.5 6.2 16.3H12.2C12.3 16.3 12.3 16.3 12.3 16.2V14.1C12.3 14 12.3 14 12.2 14H10.5V12.7H12.4C12.6 12.7 13.3 12.7 13.6 13.7C13.7 14 13.8 15 14 15.3C14.1 15.6 14.6 16.3 15.1 16.3H18.2C18 16.6 17.8 16.8 17.5 17.1L16 16.8M7.7 18.7C7.4 18.8 7.1 18.6 7 18.2C6.9 17.9 7.1 17.6 7.5 17.5S8.1 17.6 8.2 18C8.2 18.3 8 18.6 7.7 18.7M5.4 9.5C5.5 9.8 5.4 10.2 5.1 10.3C4.8 10.4 4.4 10.3 4.3 10C4.2 9.7 4.3 9.3 4.6 9.2C5 9.1 5.3 9.2 5.4 9.5M4.7 11.1L6 10.6C6.3 10.5 6.4 10.2 6.3 9.9L6 9.3H7V14H5C4.7 13 4.6 12.1 4.7 11.1M10.3 10.7V9.3H12.8C12.9 9.3 13.7 9.4 13.7 10C13.7 10.5 13.1 10.7 12.6 10.7H10.3M19.3 11.9V12.4H18.5C18.4 12.4 18.4 12.4 18.4 12.5V12.8C18.4 13.6 17.9 13.8 17.5 13.8C17.1 13.8 16.7 13.6 16.6 13.4C16.4 12.1 16 11.9 15.4 11.4C16.1 10.9 16.9 10.2 16.9 9.3C16.9 8.3 16.2 7.7 15.8 7.4C15.1 7 14.4 6.9 14.2 6.9H6.6C7.7 5.7 9.1 4.9 10.7 4.6L11.6 5.6C11.8 5.8 12.1 5.8 12.4 5.6L13.4 4.6C15.5 5 17.3 6.3 18.4 8.2L17.7 9.8C17.6 10.1 17.7 10.4 18 10.5L19.3 11.1V11.9M11.6 3.9C11.8 3.7 12.2 3.7 12.4 3.9C12.6 4.1 12.6 4.5 12.4 4.7C12.1 5 11.8 5 11.5 4.7C11.3 4.5 11.4 4.2 11.6 3.9M18.5 9.5C18.6 9.2 19 9.1 19.3 9.2C19.6 9.3 19.7 9.7 19.6 10C19.5 10.3 19.1 10.4 18.8 10.3C18.5 10.2 18.4 9.8 18.5 9.5Z","IconLanguageRust"),T("M3,3H21V21H3V3M13.71,17.86C14.21,18.84 15.22,19.59 16.8,19.59C18.4,19.59 19.6,18.76 19.6,17.23C19.6,15.82 18.79,15.19 17.35,14.57L16.93,14.39C16.2,14.08 15.89,13.87 15.89,13.37C15.89,12.96 16.2,12.64 16.7,12.64C17.18,12.64 17.5,12.85 17.79,13.37L19.1,12.5C18.55,11.54 17.77,11.17 16.7,11.17C15.19,11.17 14.22,12.13 14.22,13.4C14.22,14.78 15.03,15.43 16.25,15.95L16.67,16.13C17.45,16.47 17.91,16.68 17.91,17.26C17.91,17.74 17.46,18.09 16.76,18.09C15.93,18.09 15.45,17.66 15.09,17.06L13.71,17.86M13,11.25H8V12.75H9.5V20H11.25V12.75H13V11.25Z","IconLanguageTypescript"),T("M5.59,7.41L10.18,12L5.59,16.59L7,18L13,12L7,6L5.59,7.41M16,6H18V18H16V6Z","IconLast"),T("M12,2A7,7 0 0,1 19,9C19,11.38 17.81,13.47 16,14.74V17A1,1 0 0,1 15,18H9A1,1 0 0,1 8,17V14.74C6.19,13.47 5,11.38 5,9A7,7 0 0,1 12,2M9,21V20H15V21A1,1 0 0,1 14,22H10A1,1 0 0,1 9,21M12,4A5,5 0 0,0 7,9C7,11.05 8.23,12.81 10,13.58V16H14V13.58C15.77,12.81 17,11.05 17,9A5,5 0 0,0 12,4Z","IconLightOff"),T("M20,11H23V13H20V11M1,11H4V13H1V11M13,1V4H11V1H13M4.92,3.5L7.05,5.64L5.63,7.05L3.5,4.93L4.92,3.5M16.95,5.63L19.07,3.5L20.5,4.93L18.37,7.05L16.95,5.63M12,6A6,6 0 0,1 18,12C18,14.22 16.79,16.16 15,17.2V19A1,1 0 0,1 14,20H10A1,1 0 0,1 9,19V17.2C7.21,16.16 6,14.22 6,12A6,6 0 0,1 12,6M14,21V22A1,1 0 0,1 13,23H11A1,1 0 0,1 10,22V21H14M11,18H13V15.87C14.73,15.43 16,13.86 16,12A4,4 0 0,0 12,8A4,4 0 0,0 8,12C8,13.86 9.27,15.43 11,15.87V18Z","IconLightOn"),T("M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z","IconLink"),T("M16,17V14H9V10H16V7L21,12L16,17M14,2A2,2 0 0,1 16,4V6H14V4H5V20H14V18H16V20A2,2 0 0,1 14,22H5A2,2 0 0,1 3,20V4A2,2 0 0,1 5,2H14Z","IconLogout"),T("M20,8L12,13L4,8V6L12,11L20,6M20,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V6C22,4.89 21.1,4 20,4Z","IconMail"),T("M15,19L9,16.89V5L15,7.11M20.5,3C20.44,3 20.39,3 20.34,3L15,5.1L9,3L3.36,4.9C3.15,4.97 3,5.15 3,5.38V20.5A0.5,0.5 0 0,0 3.5,21C3.55,21 3.61,21 3.66,20.97L9,18.9L15,21L20.64,19.1C20.85,19 21,18.85 21,18.62V3.5A0.5,0.5 0 0,0 20.5,3Z","IconMap"),T("M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z","IconMarker"),T("M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z","IconMenu"),T("M21,16.5C21,16.88 20.79,17.21 20.47,17.38L12.57,21.82C12.41,21.94 12.21,22 12,22C11.79,22 11.59,21.94 11.43,21.82L3.53,17.38C3.21,17.21 3,16.88 3,16.5V7.5C3,7.12 3.21,6.79 3.53,6.62L11.43,2.18C11.59,2.06 11.79,2 12,2C12.21,2 12.41,2.06 12.57,2.18L20.47,6.62C20.79,6.79 21,7.12 21,7.5V16.5M12,4.15L6.04,7.5L12,10.85L17.96,7.5L12,4.15M5,15.91L11,19.29V12.58L5,9.21V15.91M19,15.91V9.21L13,12.58V19.29L19,15.91Z","IconMesh"),T("M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7","IconMinusO"),T("M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z","IconMore"),T("M13,6V11H18V7.75L22.25,12L18,16.25V13H13V18H16.25L12,22.25L7.75,18H11V13H6V16.25L1.75,12L6,7.75V11H11V6H7.75L12,1.75L16.25,6H13Z","IconMove"),T("M21,3V15.5A3.5,3.5 0 0,1 17.5,19A3.5,3.5 0 0,1 14,15.5A3.5,3.5 0 0,1 17.5,12C18.04,12 18.55,12.12 19,12.34V6.47L9,8.6V17.5A3.5,3.5 0 0,1 5.5,21A3.5,3.5 0 0,1 2,17.5A3.5,3.5 0 0,1 5.5,14C6.04,14 6.55,14.12 7,14.34V6L21,3Z","IconMusic"),T("M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z","IconOk"),T("M9,1H3A2,2 0 0,0 1,3V16A2,2 0 0,0 3,18H9A2,2 0 0,0 11,16V3A2,2 0 0,0 9,1M9,15H3V3H9V15M21,13H13V15H21V21H9V20H6V21A2,2 0 0,0 8,23H21A2,2 0 0,0 23,21V15A2,2 0 0,0 21,13M23,10L19,8L20.91,7.09C19.74,4.31 17,2.5 14,2.5V1A9,9 0 0,1 23,10Z","IconOrientation"),T("M21,16.5C21,16.88 20.79,17.21 20.47,17.38L12.57,21.82C12.41,21.94 12.21,22 12,22C11.79,22 11.59,21.94 11.43,21.82L3.53,17.38C3.21,17.21 3,16.88 3,16.5V7.5C3,7.12 3.21,6.79 3.53,6.62L11.43,2.18C11.59,2.06 11.79,2 12,2C12.21,2 12.41,2.06 12.57,2.18L20.47,6.62C20.79,6.79 21,7.12 21,7.5V16.5M12,4.15L10.11,5.22L16,8.61L17.96,7.5L12,4.15M6.04,7.5L12,10.85L13.96,9.75L8.08,6.35L6.04,7.5M5,15.91L11,19.29V12.58L5,9.21V15.91M19,15.91V9.21L13,12.58V19.29L19,15.91Z","IconPack"),T("M12,8A1,1 0 0,1 13,9A1,1 0 0,1 12,10A1,1 0 0,1 11,9A1,1 0 0,1 12,8M21,11C21,16.55 17.16,21.74 12,23C6.84,21.74 3,16.55 3,11V5L12,1L21,5V11M12,6A3,3 0 0,0 9,9C9,10.31 9.83,11.42 11,11.83V18H13V16H15V14H13V11.83C14.17,11.42 15,10.31 15,9A3,3 0 0,0 12,6Z","IconPassword"),T("M14,19H18V5H14M6,19H10V5H6V19Z","IconPause"),T("M8,5.14V19.14L19,12.14L8,5.14Z","IconPlay"),T("M16,7V3H14V7H10V3H8V7H8C7,7 6,8 6,9V14.5L9.5,18V21H14.5V18L18,14.5V9C18,8 17,7 16,7Z","IconPlug"),T("M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z","IconPlusO"),T("M13,9H18.5L13,3.5V9M6,2H14L20,8V20A2,2 0 0,1 18,22H6C4.89,22 4,21.1 4,20V4C4,2.89 4.89,2 6,2M6,20H15L18,20V12L14,16L12,14L6,20M8,9A2,2 0 0,0 6,11A2,2 0 0,0 8,13A2,2 0 0,0 10,11A2,2 0 0,0 8,9Z","IconPoster"),T("M1.1,22.9L10.1,1.1,15.8,15.8,17.6,10.1,22.9,22.9Z","IconProfil"),T("M3,11H5V13H3V11M11,5H13V9H11V5M9,11H13V15H11V13H9V11M15,11H17V13H19V11H21V13H19V15H21V19H19V21H17V19H13V21H11V17H15V15H17V13H15V11M19,19V15H17V19H19M15,3H21V9H15V3M17,5V7H19V5H17M3,3H9V9H3V3M5,5V7H7V5H5M3,15H9V21H3V15M5,17V19H7V17H5Z","IconQrcode"),T("M11,18H13V16H11V18M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,6A4,4 0 0,0 8,10H10A2,2 0 0,1 12,8A2,2 0 0,1 14,10C14,12 11,11.75 11,15H13C13,12.75 16,12.5 16,10A4,4 0 0,0 12,6Z","IconQuestion"),T("M9 22C8.4 22 8 21.6 8 21V18H4C2.9 18 2 17.1 2 16V4C2 2.9 2.9 2 4 2H20C21.1 2 22 2.9 22 4V16C22 17.1 21.1 18 20 18H13.9L10.2 21.7C10 21.9 9.8 22 9.5 22H9M10 16V19.1L13.1 16H20V4H4V16H10M16.3 6L14.9 9H17V13H13V8.8L14.3 6H16.3M10.3 6L8.9 9H11V13H7V8.8L8.3 6H10.3Z","IconQuote"),T("M19.78,3H11.22C10.55,3 10,3.55 10,4.22V8H16V14H19.78C20.45,14 21,13.45 21,12.78V4.22C21,3.55 20.45,3 19.78,3M12.44,6.67C11.76,6.67 11.21,6.12 11.21,5.44C11.21,4.76 11.76,4.21 12.44,4.21A1.23,1.23 0 0,1 13.67,5.44C13.67,6.12 13.12,6.67 12.44,6.67M18.56,12.78C17.88,12.79 17.33,12.24 17.32,11.56C17.31,10.88 17.86,10.33 18.54,10.32C19.22,10.31 19.77,10.86 19.78,11.56C19.77,12.23 19.23,12.77 18.56,12.78M18.56,6.67C17.88,6.68 17.33,6.13 17.32,5.45C17.31,4.77 17.86,4.22 18.54,4.21C19.22,4.2 19.77,4.75 19.78,5.44C19.78,6.12 19.24,6.66 18.56,6.67M4.22,10H12.78A1.22,1.22 0 0,1 14,11.22V19.78C14,20.45 13.45,21 12.78,21H4.22C3.55,21 3,20.45 3,19.78V11.22C3,10.55 3.55,10 4.22,10M8.5,14.28C7.83,14.28 7.28,14.83 7.28,15.5C7.28,16.17 7.83,16.72 8.5,16.72C9.17,16.72 9.72,16.17 9.72,15.5A1.22,1.22 0 0,0 8.5,14.28M5.44,11.22C4.77,11.22 4.22,11.77 4.22,12.44A1.22,1.22 0 0,0 5.44,13.66C6.11,13.66 6.66,13.11 6.66,12.44V12.44C6.66,11.77 6.11,11.22 5.44,11.22M11.55,17.33C10.88,17.33 10.33,17.88 10.33,18.55C10.33,19.22 10.88,19.77 11.55,19.77A1.22,1.22 0 0,0 12.77,18.55H12.77C12.77,17.88 12.23,17.34 11.56,17.33H11.55Z","IconRandom"),T("M18.4,10.6C16.55,9 14.15,8 11.5,8C6.85,8 2.92,11.03 1.54,15.22L3.9,16C4.95,12.81 7.95,10.5 11.5,10.5C13.45,10.5 15.23,11.22 16.62,12.38L13,16H22V7L18.4,10.6Z","IconRedo"),T("M19,8L15,12H18A6,6 0 0,1 12,18C11,18 10.03,17.75 9.2,17.3L7.74,18.76C8.97,19.54 10.43,20 12,20A8,8 0 0,0 20,12H23M6,12A6,6 0 0,1 12,6C13,6 13.97,6.25 14.8,6.7L16.26,5.24C15.03,4.46 13.57,4 12,4A8,8 0 0,0 4,12H1L5,16L9,12","IconRefresh"),T("M2 12C2 16.97 6.03 21 11 21C13.39 21 15.68 20.06 17.4 18.4L15.9 16.9C14.63 18.25 12.86 19 11 19C4.76 19 1.64 11.46 6.05 7.05C10.46 2.64 18 5.77 18 12H15L19 16H19.1L23 12H20C20 7.03 15.97 3 11 3C6.03 3 2 7.03 2 12Z","IconReload"),T("M19,8L15,12H18A6,6 0 0,1 12,18C11,18 10.03,17.75 9.2,17.3L7.74,18.76C8.97,19.54 10.43,20 12,20A8,8 0 0,0 20,12H23M6,12A6,6 0 0,1 12,6C13,6 13.97,6.25 14.8,6.7L16.26,5.24C15.03,4.46 13.57,4 12,4A8,8 0 0,0 4,12H1L5,16L9,12","IconReset"),T("M3,5V21H9V19.5H7V18H9V16.5H5V15H9V13.5H7V12H9V10.5H5V9H9V5H10.5V9H12V7H13.5V9H15V5H16.5V9H18V7H19.5V9H21V3H5A2,2 0 0,0 3,5M6,7A1,1 0 0,1 5,6A1,1 0 0,1 6,5A1,1 0 0,1 7,6A1,1 0 0,1 6,7Z","IconRuler"),T("M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z","IconSearch"),T("M2,21L23,12L2,3V10L17,12L2,14V21Z","IconSend"),T("M18,16.08C17.24,16.08 16.56,16.38 16.04,16.85L8.91,12.7C8.96,12.47 9,12.24 9,12C9,11.76 8.96,11.53 8.91,11.3L15.96,7.19C16.5,7.69 17.21,8 18,8A3,3 0 0,0 21,5A3,3 0 0,0 18,2A3,3 0 0,0 15,5C15,5.24 15.04,5.47 15.09,5.7L8.04,9.81C7.5,9.31 6.79,9 6,9A3,3 0 0,0 3,12A3,3 0 0,0 6,15C6.79,15 7.5,14.69 8.04,14.19L15.16,18.34C15.11,18.55 15.08,18.77 15.08,19C15.08,20.61 16.39,21.91 18,21.91C19.61,21.91 20.92,20.61 20.92,19A2.92,2.92 0 0,0 18,16.08Z","IconShare"),T("M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z","IconShow"),T("M20,4H16.83L15,2H9L7.17,4H4A2,2 0 0,0 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V6A2,2 0 0,0 20,4M20,18H4V6H8.05L9.88,4H14.12L15.95,6H20V18M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15Z","IconSnapshot"),T("M7,6H5V4H7V6M17,6H19V4H17V6M23,12V18H21V14H19V18H17V16H7V18H5V14H3V18H1V12H3V10H5V8H7V6H9V8H15V6H17V8H19V10H21V12H23M15,10V12H17V10H15M7,12H9V10H7V12M11,18H7V20H11V18M17,18H13V20H17V18Z","IconSpaceInvader"),T("M5,20.5A3.5,3.5 0 0,1 1.5,17A3.5,3.5 0 0,1 5,13.5A3.5,3.5 0 0,1 8.5,17A3.5,3.5 0 0,1 5,20.5M5,12A5,5 0 0,0 0,17A5,5 0 0,0 5,22A5,5 0 0,0 10,17A5,5 0 0,0 5,12M14.8,10H19V8.2H15.8L13.86,4.93C13.57,4.43 13,4.1 12.4,4.1C11.93,4.1 11.5,4.29 11.2,4.6L7.5,8.29C7.19,8.6 7,9 7,9.5C7,10.13 7.33,10.66 7.85,10.97L11.2,13V18H13V11.5L10.75,9.85L13.07,7.5M19,20.5A3.5,3.5 0 0,1 15.5,17A3.5,3.5 0 0,1 19,13.5A3.5,3.5 0 0,1 22.5,17A3.5,3.5 0 0,1 19,20.5M19,12A5,5 0 0,0 14,17A5,5 0 0,0 19,22A5,5 0 0,0 24,17A5,5 0 0,0 19,12M16,4.8C17,4.8 17.8,4 17.8,3C17.8,2 17,1.2 16,1.2C15,1.2 14.2,2 14.2,3C14.2,4 15,4.8 16,4.8Z","IconSportBike"),T("M16 1.2C15 1.2 14.2 2 14.2 3S15 4.8 16 4.8 17.8 4 17.8 3 17 1.2 16 1.2M12.4 4.1C11.93 4.1 11.5 4.29 11.2 4.6L7.5 8.29C7.19 8.6 7 9 7 9.5C7 10.13 7.33 10.66 7.85 10.97L11.2 13V18H13V11.5L10.75 9.85L13.07 7.5L14.8 10H19V8.2H15.8L13.86 4.93C13.57 4.43 13 4.1 12.4 4.1M10 3H3C2.45 3 2 2.55 2 2S2.45 1 3 1H12.79C12.58 1.34 12.41 1.71 12.32 2.11C11.46 2.13 10.65 2.45 10 3M5 12C2.24 12 0 14.24 0 17S2.24 22 5 22 10 19.76 10 17 7.76 12 5 12M5 20.5C3.07 20.5 1.5 18.93 1.5 17S3.07 13.5 5 13.5 8.5 15.07 8.5 17 6.93 20.5 5 20.5M19 12C16.24 12 14 14.24 14 17S16.24 22 19 22 24 19.76 24 17 21.76 12 19 12M19 20.5C17.07 20.5 15.5 18.93 15.5 17S17.07 13.5 19 13.5 22.5 15.07 22.5 17 20.93 20.5 19 20.5M5.32 11H1C.448 11 0 10.55 0 10S.448 9 1 9H5.05C5.03 9.16 5 9.33 5 9.5C5 10.03 5.12 10.54 5.32 11M6 7H2C1.45 7 1 6.55 1 6S1.45 5 2 5H7.97L6.09 6.87C6.05 6.91 6 6.96 6 7Z","IconSportBikeFast"),T("M17.47 8.67H19V23H17.47V12.6C16.67 12.44 15.92 12.14 15.21 11.71S13.9 10.78 13.39 10.2L12.77 13.27L15 15.47V23H13V17L10.76 14.8L8.89 23H6.73C6.73 23 9.86 7.22 9.89 7.09C10 6.61 10.22 6.24 10.59 6C10.96 5.73 11.33 5.6 11.71 5.6C12.1 5.6 12.46 5.69 12.79 5.87C13.13 6.04 13.39 6.29 13.58 6.61L14.64 8.24C14.93 8.78 15.32 9.25 15.81 9.63S16.86 10.3 17.47 10.5V8.67M8.55 5.89L7.4 5.65C6.83 5.5 6.31 5.62 5.84 5.94C5.38 6.26 5.1 6.7 5 7.28L4.19 11.26C4.16 11.55 4.22 11.81 4.38 12.05C4.54 12.29 4.75 12.42 5 12.46L7.21 12.89L8.55 5.89M13 1C11.9 1 11 1.9 11 3S11.9 5 13 5 15 4.11 15 3 14.11 1 13 1Z","IconSportHiking"),T("M13.5,5.5C14.59,5.5 15.5,4.58 15.5,3.5C15.5,2.38 14.59,1.5 13.5,1.5C12.39,1.5 11.5,2.38 11.5,3.5C11.5,4.58 12.39,5.5 13.5,5.5M9.89,19.38L10.89,15L13,17V23H15V15.5L12.89,13.5L13.5,10.5C14.79,12 16.79,13 19,13V11C17.09,11 15.5,10 14.69,8.58L13.69,7C13.29,6.38 12.69,6 12,6C11.69,6 11.5,6.08 11.19,6.08L6,8.28V13H8V9.58L9.79,8.88L8.19,17L3.29,16L2.89,18L9.89,19.38Z","IconSportRun"),T("M16.5,5.5A2,2 0 0,0 18.5,3.5A2,2 0 0,0 16.5,1.5A2,2 0 0,0 14.5,3.5A2,2 0 0,0 16.5,5.5M12.9,19.4L13.9,15L16,17V23H18V15.5L15.9,13.5L16.5,10.5C17.89,12.09 19.89,13 22,13V11C20.24,11.03 18.6,10.11 17.7,8.6L16.7,7C16.34,6.4 15.7,6 15,6C14.7,6 14.5,6.1 14.2,6.1L9,8.3V13H11V9.6L12.8,8.9L11.2,17L6.3,16L5.9,18L12.9,19.4M4,9A1,1 0 0,1 3,8A1,1 0 0,1 4,7H7V9H4M5,5A1,1 0 0,1 4,4A1,1 0 0,1 5,3H10V5H5M3,13A1,1 0 0,1 2,12A1,1 0 0,1 3,11H7V13H3Z","IconSportRunFast"),T("M20 2H4C2.9 2 2 2.9 2 4V20C2 21.11 2.9 22 4 22H20C21.11 22 22 21.11 22 20V4C22 2.9 21.11 2 20 2M4 6L6 4H10.9L4 10.9V6M4 13.7L13.7 4H18.6L4 18.6V13.7M20 18L18 20H13.1L20 13.1V18M20 10.3L10.3 20H5.4L20 5.4V10.3Z","IconTexture"),T("M21.71 20.29L20.29 21.71A1 1 0 0 1 18.88 21.71L7 9.85A3.81 3.81 0 0 1 6 10A4 4 0 0 1 2.22 4.7L4.76 7.24L5.29 6.71L6.71 5.29L7.24 4.76L4.7 2.22A4 4 0 0 1 10 6A3.81 3.81 0 0 1 9.85 7L21.71 18.88A1 1 0 0 1 21.71 20.29M2.29 18.88A1 1 0 0 0 2.29 20.29L3.71 21.71A1 1 0 0 0 5.12 21.71L10.59 16.25L7.76 13.42M20 2L16 4V6L13.83 8.17L15.83 10.17L18 8H20L22 4Z","IconToolBox"),T("M12,8A1,1,0,0,1,13,9A1,1,0,0,1,12,10A1,1,0,0,1,11,9A1,1,0,0,1,12,8M21,11C21,16.6,17.2,21.7,12,23C6.8,21.7,3,16.6,3,11V5L12,1L21,5V11M12,6A3,3,0,0,0,9,9C9,10.3,9.8,11.4,11,11.8V18H13V16H15V14H13V11.8C14.2,11.4,15,10.3,15,9A3,3,0,0,0,12,6Z","IconTpPassword"),T("M12.87,15.07L10.33,12.56L10.36,12.53C12.1,10.59 13.34,8.36 14.07,6H17V4H10V2H8V4H1V6H12.17C11.5,7.92 10.44,9.75 9,11.35C8.07,10.32 7.3,9.19 6.69,8H4.69C5.42,9.63 6.42,11.17 7.67,12.56L2.58,17.58L4,19L9,14L12.11,17.11L12.87,15.07M18.5,10H16.5L12,22H14L15.12,19H19.87L21,22H23L18.5,10M15.88,17L17.5,12.67L19.12,17H15.88Z","IconTranslate"),T("M3,3H9V7H3V3M15,10H21V14H15V10M15,17H21V21H15V17M13,13H7V18H13V20H7L5,20V9H7V11H13V13Z","IconTree"),T("M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z","IconTwitter"),T("M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,5V19H5V5H19","IconUnchecked"),T("M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z","IconUndo"),T("M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z","IconUser"),T("M6,2H18V8H18V8L14,12L18,16V16H18V22H6V16H6V16L10,12L6,8V8H6V2M16,16.5L12,12.5L8,16.5V20H16V16.5M12,11.5L16,7.5V4H8V7.5L12,11.5M10,6H14V6.75L12,8.75L10,6.75V6Z","IconWait"),T("M13 14H11V9H13M13 18H11V16H13M1 21H23L12 2L1 21Z","IconWarning"),T("M15.5,14L20.5,19L19,20.5L14,15.5V14.71L13.73,14.43C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.43,13.73L14.71,14H15.5M9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14M12,10H10V12H9V10H7V9H9V7H10V9H12V10Z","IconZoomIn"),T("M15.5,14H14.71L14.43,13.73C15.41,12.59 16,11.11 16,9.5A6.5,6.5 0 0,0 9.5,3A6.5,6.5 0 0,0 3,9.5A6.5,6.5 0 0,0 9.5,16C11.11,16 12.59,15.41 13.73,14.43L14,14.71V15.5L19,20.5L20.5,19L15.5,14M9.5,14C7,14 5,12 5,9.5C5,7 7,5 9.5,5C12,5 14,7 14,9.5C14,12 12,14 9.5,14M7,9H12V10H7V9Z","IconZoomOut")},6610:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,'* {\n    box-sizing: border-box;\n}\n\nb {\n    margin: 0 0.3em;\n}\n\n/**\n * Aspect ratio\n * Example: <div style="--custom-aspect-ratio=16/9">...</div>\n */\n[style*="--custom-aspect-ratio"] > :first-child {\n    width: 100%;\n}\n[style*="--custom-aspect-ratio"] > img {\n    height: auto;\n}\n@supports (--custom: property) {\n    [style*="--custom-aspect-ratio"] {\n        position: relative;\n    }\n    [style*="--custom-aspect-ratio"]::before {\n        content: "";\n        display: block;\n        padding-bottom: calc(100% / (var(--custom-aspect-ratio)));\n    }\n    [style*="--custom-aspect-ratio"] > :first-child {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n    }\n}\n',"",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/theme/theme.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;;;EAGE;AACF;IACI,WAAW;AACf;AACA;IACI,YAAY;AAChB;AACA;IACI;QACI,kBAAkB;IACtB;IACA;QACI,WAAW;QACX,cAAc;QACd,yDAAyD;IAC7D;IACA;QACI,kBAAkB;QAClB,MAAM;QACN,OAAO;QACP,YAAY;IAChB;AACJ",sourcesContent:['* {\n    box-sizing: border-box;\n}\n\nb {\n    margin: 0 0.3em;\n}\n\n/**\n * Aspect ratio\n * Example: <div style="--custom-aspect-ratio=16/9">...</div>\n */\n[style*="--custom-aspect-ratio"] > :first-child {\n    width: 100%;\n}\n[style*="--custom-aspect-ratio"] > img {\n    height: auto;\n}\n@supports (--custom: property) {\n    [style*="--custom-aspect-ratio"] {\n        position: relative;\n    }\n    [style*="--custom-aspect-ratio"]::before {\n        content: "";\n        display: block;\n        padding-bottom: calc(100% / (var(--custom-aspect-ratio)));\n    }\n    [style*="--custom-aspect-ratio"] > :first-child {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n    }\n}\n'],sourceRoot:""}]);const u=a},7352:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Slider-Slider-module_Slider_KMurMH {\n    display: flex;\n    gap: 0.5em;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Slider-Slider-module_Slider_KMurMH > input {\n    flex: 1 1 auto;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Slider-Slider-module_Slider_KMurMH > div {\n    flex: 0 0 auto;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Slider/Slider.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,UAAU;IACV,2BAA2B;IAC3B,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".Slider {\n    display: flex;\n    gap: 0.5em;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n}\n\n.Slider > input {\n    flex: 1 1 auto;\n}\n\n.Slider > div {\n    flex: 0 0 auto;\n}\n"],sourceRoot:""}]),a.locals={Slider:"node_modules-@tolokoban-ui-lib-dist-view-Slider-Slider-module_Slider_KMurMH"};const u=a},7463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var o=n-1>>>1,r=e[o];if(!(0<i(r,t)))break e;e[o]=t,e[n]=r,n=o}}function o(e){return 0===e.length?null:e[0]}function r(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var o=0,r=e.length,a=r>>>1;o<a;){var u=2*(o+1)-1,l=e[u],s=u+1,c=e[s];if(0>i(l,n))s<r&&0>i(c,l)?(e[o]=c,e[s]=n,o=s):(e[o]=l,e[u]=n,o=u);else{if(!(s<r&&0>i(c,n)))break e;e[o]=c,e[s]=n,o=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}var s=[],c=[],d=1,f=null,h=3,m=!1,A=!1,p=!1,C="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,_="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=o(c);null!==t;){if(null===t.callback)r(c);else{if(!(t.startTime<=e))break;r(c),t.sortIndex=t.expirationTime,n(s,t)}t=o(c)}}function v(e){if(p=!1,b(e),!A)if(null!==o(s))A=!0,V(w);else{var t=o(c);null!==t&&M(v,t.startTime-e)}}function w(e,n){A=!1,p&&(p=!1,g(B),B=-1),m=!0;var i=h;try{for(b(n),f=o(s);null!==f&&(!(f.expirationTime>n)||e&&!x());){var a=f.callback;if("function"==typeof a){f.callback=null,h=f.priorityLevel;var u=a(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?f.callback=u:f===o(s)&&r(s),b(n)}else r(s);f=o(s)}if(null!==f)var l=!0;else{var d=o(c);null!==d&&M(v,d.startTime-n),l=!1}return l}finally{f=null,h=i,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var y,D=!1,k=null,B=-1,E=5,I=-1;function x(){return!(t.unstable_now()-I<E)}function L(){if(null!==k){var e=t.unstable_now();I=e;var n=!0;try{n=k(!0,e)}finally{n?y():(D=!1,k=null)}}else D=!1}if("function"==typeof _)y=function(){_(L)};else if("undefined"!=typeof MessageChannel){var F=new MessageChannel,S=F.port2;F.port1.onmessage=L,y=function(){S.postMessage(null)}}else y=function(){C(L,0)};function V(e){k=e,D||(D=!0,y())}function M(e,n){B=C((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||m||(A=!0,V(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return o(s)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,r,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:d++,callback:r,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===o(s)&&e===o(c)&&(p?(g(B),B=-1):p=!0,M(v,i-a))):(e.sortIndex=u,n(s,e),A||m||(A=!0,V(w))),e},t.unstable_shouldYield=x,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},7502:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_Jdrw2Z {\n    display: grid;\n    gap: 1px;\n    place-items: stretch;\n    grid-template-columns: 1fr auto;\n    box-shadow: var(--theme-shadow-1);\n    margin: 2px;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_Jdrw2Z > input {\n    border: none;\n    height: 2em;\n    line-height: 2em;\n    padding: 0 0.5em;\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_Jdrw2Z > div {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    overflow: hidden;\n    gap: 1px;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_Jdrw2Z > div > button {\n    all: inherit;\n    text-transform: uppercase;\n    flex: 1 1 auto;\n    width: 2em;\n    cursor: pointer;\n    display: grid;\n    place-items: center;\n    position: relative;\n    padding: 0;\n    margin: 0;\n    border-radius: 0.25em;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/InputMultiText/InputMultiText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,QAAQ;IACR,oBAAoB;IACpB,+BAA+B;IAC/B,iCAAiC;IACjC,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,gBAAgB;IAChB,gBAAgB;IAChB,0CAA0C;IAC1C,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,eAAe;IACf,6BAA6B;IAC7B,oBAAoB;IACpB,gBAAgB;IAChB,QAAQ;AACZ;;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,cAAc;IACd,UAAU;IACV,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,qBAAqB;AACzB",sourcesContent:[".InputMultiText {\n    display: grid;\n    gap: 1px;\n    place-items: stretch;\n    grid-template-columns: 1fr auto;\n    box-shadow: var(--theme-shadow-1);\n    margin: 2px;\n}\n\n.InputMultiText > input {\n    border: none;\n    height: 2em;\n    line-height: 2em;\n    padding: 0 0.5em;\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n}\n\n.InputMultiText > div {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    overflow: hidden;\n    gap: 1px;\n}\n\n.InputMultiText > div > button {\n    all: inherit;\n    text-transform: uppercase;\n    flex: 1 1 auto;\n    width: 2em;\n    cursor: pointer;\n    display: grid;\n    place-items: center;\n    position: relative;\n    padding: 0;\n    margin: 0;\n    border-radius: 0.25em;\n}\n"],sourceRoot:""}]),a.locals={InputMultiText:"node_modules-@tolokoban-ui-lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_Jdrw2Z"};const u=a},7576:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-DragAndDrop-DragAndDrop-module_main_oJDuYE {\n    margin: 0;\n    padding: 0;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-DragAndDrop-DragAndDrop-module_main_oJDuYE.node_modules-\\@tolokoban-ui-lib-dist-view-DragAndDrop-DragAndDrop-module_droppable_i1CYQ5 {\n    outline: 0.125em dotted var(--theme-color-secondary-5);\n    outline-offset: 0.125em;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/DragAndDrop/DragAndDrop.module.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,sDAAsD;IACtD,uBAAuB;AAC3B",sourcesContent:[".main {\n    margin: 0;\n    padding: 0;\n}\n\n.main.droppable {\n    outline: 0.125em dotted var(--theme-color-secondary-5);\n    outline-offset: 0.125em;\n}\n"],sourceRoot:""}]),a.locals={main:"node_modules-@tolokoban-ui-lib-dist-view-DragAndDrop-DragAndDrop-module_main_oJDuYE",droppable:"node_modules-@tolokoban-ui-lib-dist-view-DragAndDrop-DragAndDrop-module_droppable_i1CYQ5"};const u=a},7659:e=>{"use strict";var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},8108:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-InputColor-InputColor-module_InputColor_pirO_I {\n    --custom-shadow: var(--theme-shadow-3);\n    all: unset;\n    overflow: hidden;\n    cursor: pointer;\n    overflow: hidden;\n    border-radius: 0.5em;\n    padding: 0;\n    min-height: 0.5em;\n    transition: 0.2s all;\n    box-shadow: var(--custom-shadow), 0 0 0 1px currentColor inset;\n    appearance: none;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-InputColor-InputColor-module_InputColor_pirO_I > input {\n    visibility: hidden;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/InputColor/InputColor.module.css"],names:[],mappings:"AAAA;IACI,sCAAsC;IACtC,UAAU;IACV,gBAAgB;IAChB,eAAe;IACf,gBAAgB;IAChB,oBAAoB;IACpB,UAAU;IACV,iBAAiB;IACjB,oBAAoB;IACpB,8DAA8D;IAC9D,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:[".InputColor {\n    --custom-shadow: var(--theme-shadow-3);\n    all: unset;\n    overflow: hidden;\n    cursor: pointer;\n    overflow: hidden;\n    border-radius: 0.5em;\n    padding: 0;\n    min-height: 0.5em;\n    transition: 0.2s all;\n    box-shadow: var(--custom-shadow), 0 0 0 1px currentColor inset;\n    appearance: none;\n}\n\n.InputColor > input {\n    visibility: hidden;\n}\n"],sourceRoot:""}]),a.locals={InputColor:"node_modules-@tolokoban-ui-lib-dist-view-InputColor-InputColor-module_InputColor_pirO_I"};const u=a},8347:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});var o=n(6540);class r{constructor(e,t={}){var n;this.options=t,this.listeners=new Set,this.currentValue=t.transform?t.transform(e):e,this.id=`AtomicState\n${null===(n=t.storage)||void 0===n?void 0:n.id}`,t.storage&&this.loadFromStorage()}get value(){return this.currentValue}set value(e){const{transform:t,storage:n}=this.options;if(t&&(e=t(e)),e!==this.currentValue){this.currentValue=e,n&&window.localStorage.setItem(this.id,JSON.stringify(e));for(const t of this.listeners)t(e)}}useListener(e){o.useEffect((()=>(this.listeners.add(e),()=>{this.listeners.delete(e)})),[])}useValue(){const[e,t]=o.useState(this.currentValue);return o.useEffect((()=>(this.listeners.add(t),()=>{this.listeners.delete(t)})),[]),e}useState(){const[e,t]=o.useState(this.currentValue);return o.useEffect((()=>(this.listeners.add(t),()=>{this.listeners.delete(t)})),[]),[e,e=>{this.value=e}]}loadFromStorage(){const{storage:e}=this.options;if(e)try{const t=window.localStorage.getItem(this.id);if(!t)return;const n=JSON.parse(t);if(!e.guard(n))throw Error("Invalid type!");this.currentValue=n}catch(t){console.error(`Unable to retrieve AtomicState "${e.id}":`,t)}}}},8684:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl {\n    vertical-align: middle;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl.node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_readOnly_TMxYpH {\n    pointer-events: none;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl > label {\n    position: relative;\n    display: inline-block;\n    transition: transform 0.2s;\n    transform: scale(1);\n    cursor: pointer;\n    vertical-align: inherit;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl > label:hover,\n.node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl > label:focus {\n    transform: scale(1.2);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl .node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_hidden_dDRqs0 {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl .node_modules-\\@tolokoban-ui-lib-dist-view-Rating-Rating-module_absolute_Em131M {\n    position: absolute;\n    left: 0;\n    top: 0;\n    overflow: hidden;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Rating/Rating.module.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,0BAA0B;IAC1B,mBAAmB;IACnB,eAAe;IACf,uBAAuB;AAC3B;;AAEA;;IAEI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,mBAAmB;IACnB,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,UAAU;IACV,kBAAkB;IAClB,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,gBAAgB;AACpB",sourcesContent:[".main {\n    vertical-align: middle;\n}\n\n.main.readOnly {\n    pointer-events: none;\n}\n\n.main > label {\n    position: relative;\n    display: inline-block;\n    transition: transform 0.2s;\n    transform: scale(1);\n    cursor: pointer;\n    vertical-align: inherit;\n}\n\n.main > label:hover,\n.main > label:focus {\n    transform: scale(1.2);\n}\n\n.main .hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n}\n\n.main .absolute {\n    position: absolute;\n    left: 0;\n    top: 0;\n    overflow: hidden;\n}\n"],sourceRoot:""}]),a.locals={main:"node_modules-@tolokoban-ui-lib-dist-view-Rating-Rating-module_main_ZSsesl",readOnly:"node_modules-@tolokoban-ui-lib-dist-view-Rating-Rating-module_readOnly_TMxYpH",hidden:"node_modules-@tolokoban-ui-lib-dist-view-Rating-Rating-module_hidden_dDRqs0",absolute:"node_modules-@tolokoban-ui-lib-dist-view-Rating-Rating-module_absolute_Em131M"};const u=a},9044:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,"div.node_modules-\\@tolokoban-ui-lib-dist-modal-manager-module_error_dz1I7w {\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n    max-width: 320px;\n    overflow-x: auto;\n}\n\ndiv.node_modules-\\@tolokoban-ui-lib-dist-modal-manager-module_error_dz1I7w pre {\n    white-space: pre-wrap;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-modal-manager-module_wait_Tl6Jas {\n    padding: 1rem;\n    background-color: var(--theme-color-neutral-5-9);\n    color: var(--theme-color-on-neutral-5);\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    max-width: 480px;\n    gap: 1rem;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-modal-manager-module_wait_Tl6Jas > * {\n    flex: 1 1 auto;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-modal-manager-module_wait_Tl6Jas > svg {\n    flex: 0 0 3rem;\n    animation: node_modules-\\@tolokoban-ui-lib-dist-modal-manager-module_rotation-anim_iHirjq 1s linear infinite;\n    width: 3rem;\n    height: 3rem;\n}\n\n@keyframes node_modules-\\@tolokoban-ui-lib-dist-modal-manager-module_rotation-anim_iHirjq {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(-360deg);\n    }\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/modal/manager.module.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,aAAa;IACb,0CAA0C;IAC1C,kCAAkC;IAClC,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,gDAAgD;IAChD,sCAAsC;IACtC,oBAAoB;IACpB,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,gBAAgB;IAChB,SAAS;AACb;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,4GAA2C;IAC3C,WAAW;IACX,YAAY;AAChB;;AAEA;IACI;QACI,uBAAuB;IAC3B;IACA;QACI,0BAA0B;IAC9B;AACJ",sourcesContent:["div.error {\n    margin: 0;\n    padding: 1rem;\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n    max-width: 320px;\n    overflow-x: auto;\n}\n\ndiv.error pre {\n    white-space: pre-wrap;\n}\n\n.wait {\n    padding: 1rem;\n    background-color: var(--theme-color-neutral-5-9);\n    color: var(--theme-color-on-neutral-5);\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    max-width: 480px;\n    gap: 1rem;\n}\n\n.wait > * {\n    flex: 1 1 auto;\n}\n\n.wait > svg {\n    flex: 0 0 3rem;\n    animation: rotation-anim 1s linear infinite;\n    width: 3rem;\n    height: 3rem;\n}\n\n@keyframes rotation-anim {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(-360deg);\n    }\n}\n"],sourceRoot:""}]),a.locals={error:"node_modules-@tolokoban-ui-lib-dist-modal-manager-module_error_dz1I7w",wait:"node_modules-@tolokoban-ui-lib-dist-modal-manager-module_wait_Tl6Jas","rotation-anim":"node_modules-@tolokoban-ui-lib-dist-modal-manager-module_rotation-anim_iHirjq"};const u=a},9472:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-Label-Label-module_LabelContent_Luz_0Q {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-Label-Label-module_Label_r8vRKs {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/Label/Label.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,cAAc;IACd,cAAc;IACd,mBAAmB;AACvB",sourcesContent:[".LabelContent {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.Label {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n"],sourceRoot:""}]),a.locals={LabelContent:"node_modules-@tolokoban-ui-lib-dist-view-Label-Label-module_LabelContent_Luz_0Q",Label:"node_modules-@tolokoban-ui-lib-dist-view-Label-Label-module_Label_r8vRKs"};const u=a},9767:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon_J8g3Sn {\n    --animation: node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon-anim-rotate_mk8crC;\n    display: inline-block;\n    transition: all 0.2s;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon_J8g3Sn.node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_clickable_iZnOUc {\n    cursor: pointer;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon_J8g3Sn.node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_clickable_iZnOUc:active {\n    filter: brightness(150%);\n    transform: scale(0.9);\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon_J8g3Sn.node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_animate_Wl9gns {\n    animation: var(--animation) 0.6s linear infinite;\n}\n\n@keyframes node_modules-\\@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon-anim-rotate_mk8crC {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/view/icons/generic/generic-icon.module.css"],names:[],mappings:"AAAA;IACI,uHAAoC;IACpC,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,qBAAqB;AACzB;;AAEA;IACI,gDAAgD;AACpD;;AAEA;IACI;QACI,uBAAuB;IAC3B;IACA;QACI,yBAAyB;IAC7B;AACJ",sourcesContent:[".GenericIcon {\n    --animation: GenericIcon-anim-rotate;\n    display: inline-block;\n    transition: all 0.2s;\n}\n\n.GenericIcon.clickable {\n    cursor: pointer;\n}\n\n.GenericIcon.clickable:active {\n    filter: brightness(150%);\n    transform: scale(0.9);\n}\n\n.GenericIcon.animate {\n    animation: var(--animation) 0.6s linear infinite;\n}\n\n@keyframes GenericIcon-anim-rotate {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n"],sourceRoot:""}]),a.locals={GenericIcon:"node_modules-@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon_J8g3Sn","GenericIcon-anim-rotate":"node_modules-@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_GenericIcon-anim-rotate_mk8crC",clickable:"node_modules-@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_clickable_iZnOUc",animate:"node_modules-@tolokoban-ui-lib-dist-view-icons-generic-generic-icon-module_animate_Wl9gns"};const u=a},9795:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var o=n(1354),r=n.n(o),i=n(6314),a=n.n(i)()(r());a.push([e.id,".node_modules-\\@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwidth_Q_WEso {\n    inline-size: 100%;\n    box-sizing: border-box;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-theme-css-dimension-module_fullheight_DcPYpW {\n    block-size: 100%;\n    box-sizing: border-box;\n}\n\n.node_modules-\\@tolokoban-ui-lib-dist-theme-css-dimension-module_fullsize_BTQ0yk {\n}\n\n@media (orientation: landscape) {\n    .node_modules-\\@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwide_c2zLZm {\n    }\n    .node_modules-\\@tolokoban-ui-lib-dist-theme-css-dimension-module_fullnarrow__seMiM {\n    }\n}\n\n@media (orientation: portrait) {\n    .node_modules-\\@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwide_c2zLZm {\n    }\n    .node_modules-\\@tolokoban-ui-lib-dist-theme-css-dimension-module_fullnarrow__seMiM {\n    }\n}\n","",{version:3,sources:["webpack://./node_modules/@tolokoban/ui/lib/dist/theme/css/dimension.module.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;AAEA;;AAEA;IACI;IAEA;IACA;IAEA;AACJ;;AAEA;IACI;IAEA;IACA;IAEA;AACJ",sourcesContent:[".fullwidth {\n    inline-size: 100%;\n    box-sizing: border-box;\n}\n\n.fullheight {\n    block-size: 100%;\n    box-sizing: border-box;\n}\n\n.fullsize {\n    composes: fullwidth fullheight;\n}\n\n@media (orientation: landscape) {\n    .fullwide {\n        composes: fullwidth;\n    }\n    .fullnarrow {\n        composes: fullheight;\n    }\n}\n\n@media (orientation: portrait) {\n    .fullwide {\n        composes: fullheight;\n    }\n    .fullnarrow {\n        composes: fullwidth;\n    }\n}\n"],sourceRoot:""}]),a.locals={fullwidth:"node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwidth_Q_WEso",fullheight:"node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullheight_DcPYpW",fullsize:"node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullsize_BTQ0yk node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwidth_Q_WEso node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullheight_DcPYpW",fullwide:"node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwide_c2zLZm node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwidth_Q_WEso node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullheight_DcPYpW",fullnarrow:"node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullnarrow__seMiM node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullheight_DcPYpW node_modules-@tolokoban-ui-lib-dist-theme-css-dimension-module_fullwidth_Q_WEso"};const u=a},9982:(e,t,n)=>{"use strict";e.exports=n(7463)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,