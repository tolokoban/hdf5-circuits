"use strict";(self.webpackChunkhdf5_circuits=self.webpackChunkhdf5_circuits||[]).push([[717],{435:(t,e,n)=>{n.d(e,{A:()=>a});var r=n(1354),s=n.n(r),o=n(6314),i=n.n(o)()(s());i.push([t.id,'ul.src-components-Attributes-Attributes-module_attributes_mBUDPb {\n    margin: 0.25em 0;\n    padding: 0.5em;\n    color: var(--theme-color-on-neutral-5);\n    background: var(--theme-color-neutral-5);\n    border-radius: 0.5em;\n}\n\n.src-components-Attributes-Attributes-module_attributes_mBUDPb li::marker {\n    content: "";\n}\n\n.src-components-Attributes-Attributes-module_empty_qDO80O {\n    font-style: italic;\n    margin: 0.25em 0;\n}\n',"",{version:3,sources:["webpack://./src/components/Attributes/Attributes.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,cAAc;IACd,sCAAsC;IACtC,wCAAwC;IACxC,oBAAoB;AACxB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB",sourcesContent:['ul.attributes {\n    margin: 0.25em 0;\n    padding: 0.5em;\n    color: var(--theme-color-on-neutral-5);\n    background: var(--theme-color-neutral-5);\n    border-radius: 0.5em;\n}\n\n.attributes li::marker {\n    content: "";\n}\n\n.empty {\n    font-style: italic;\n    margin: 0.25em 0;\n}\n'],sourceRoot:""}]),i.locals={attributes:"src-components-Attributes-Attributes-module_attributes_mBUDPb",empty:"src-components-Attributes-Attributes-module_empty_qDO80O"};const a=i},1703:(t,e,n)=>{n.d(e,{A:()=>a});var r=n(1354),s=n.n(r),o=n(6314),i=n.n(o)()(s());i.push([t.id,".src-components-Dataset-Dataset-module_dataset_RViG09 {\n    margin: 0.25em 0;\n    padding: 0.25em;\n    border-radius: 0.25em;\n    background: var(--theme-color-neutral-4);\n    color: var(--theme-color-on-neutral-4);\n}\n\n.src-components-Dataset-Dataset-module_dataset_RViG09 > code {\n    display: inline-block;\n    font-size: 80%;\n    margin: 0.5em 0;\n    opacity: 0.7;\n}\n","",{version:3,sources:["webpack://./src/components/Dataset/Dataset.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,qBAAqB;IACrB,cAAc;IACd,eAAe;IACf,YAAY;AAChB",sourcesContent:[".dataset {\n    margin: 0.25em 0;\n    padding: 0.25em;\n    border-radius: 0.25em;\n    background: var(--theme-color-neutral-4);\n    color: var(--theme-color-on-neutral-4);\n}\n\n.dataset > code {\n    display: inline-block;\n    font-size: 80%;\n    margin: 0.5em 0;\n    opacity: 0.7;\n}\n"],sourceRoot:""}]),i.locals={dataset:"src-components-Dataset-Dataset-module_dataset_RViG09"};const a=i},3429:(t,e,n)=>{n.d(e,{A:()=>a});var r=n(1354),s=n.n(r),o=n(6314),i=n.n(o)()(s());i.push([t.id,".src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: #777;\n}\n\n.src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n","",{version:3,sources:["webpack://./src/components/MorphologyViewer/MorphologyViewer.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB",sourcesContent:[".morphologyViewer {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: #777;\n}\n\n.morphologyViewer canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n"],sourceRoot:""}]),i.locals={morphologyViewer:"src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p"};const a=i},5717:(t,e,n)=>{n.r(e),n.d(e,{default:()=>Q});var r=n(4848),s=n(2592),o=n(5072),i=n.n(o),a=n(7825),l=n.n(a),u=n(7659),c=n.n(u),h=n(5056),d=n.n(h),m=n(540),p=n.n(m),A=n(1113),g=n.n(A),f=n(435),x={};x.styleTagTransform=g(),x.setAttributes=d(),x.insert=c().bind(null,"head"),x.domAPI=l(),x.insertStyleElement=p(),i()(f.A,x);const v=f.A&&f.A.locals?f.A.locals:void 0;function I({className:t,attrs:e}){const n=Object.keys(e);return 0===n.length?(0,r.jsx)("div",{className:v.empty,children:"No attributes."}):(0,r.jsx)("ul",{className:w(t,v.attributes),children:n.map((t=>(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:t}),": ",e[t]]},t)))})}function w(...t){return t.filter((t=>"string"==typeof t)).join(" ")}var C=n(1703),b={};b.styleTagTransform=g(),b.setAttributes=d(),b.insert=c().bind(null,"head"),b.domAPI=l(),b.insertStyleElement=p(),i()(C.A,b);const y=C.A&&C.A.locals?C.A.locals:void 0;function P({className:t,value:e}){return e?(0,r.jsxs)("div",{className:_(t,y.dataset),children:[(0,r.jsxs)("code",{children:["[",e.slice(0,16).map((t=>t.toFixed(3))).join(", "),e.length>16&&(0,r.jsx)("span",{children:", ..."}),"]"]}),e.length>16&&(0,r.jsxs)("div",{children:[(0,r.jsx)("strong",{children:e.length})," elements"]})]}):null}function _(...t){return t.filter((t=>"string"==typeof t)).join(" ")}var M=n(7099),V={};V.styleTagTransform=g(),V.setAttributes=d(),V.insert=c().bind(null,"head"),V.domAPI=l(),V.insertStyleElement=p(),i()(M.A,V);const B=M.A&&M.A.locals?M.A.locals:void 0;var N=n(6586);function j({className:t,group:e}){const[n,o]=s.U.groupsToDisplay.useState();if(!e)return null;const i=e.name,a=e.has("points")&&e.has("structure");return(0,r.jsxs)("details",{className:T(t,B.group),open:""===i,children:[(0,r.jsx)("summary",{children:i.split("/").at(-1)||(0,r.jsx)("strong",{children:"ROOT"})}),(0,r.jsxs)("div",{className:B.children,children:[a&&(0,r.jsx)(N.myw,{value:E(e,n),onChange:t=>o(t?[e]:[]),children:"Show this morphology"}),(0,r.jsx)(P,{value:e.value}),(0,r.jsx)(I,{attrs:e.attrs}),e.keys.map((t=>(0,r.jsx)(j,{group:e.get(t)},t)))]})]})}function T(...t){return t.filter((t=>"string"==typeof t)).join(" ")}function E(t,e){if(1!==e.length)return!1;const[n]=e;return t.name===n.name}var D=n(6540),S=n(3429),k={};k.styleTagTransform=g(),k.setAttributes=d(),k.insert=c().bind(null,"head"),k.domAPI=l(),k.insertStyleElement=p(),i()(S.A,k);const U=S.A&&S.A.locals?S.A.locals:void 0;var z=n(1978);class O extends z.tbm{constructor(t,e){super();const n=new z.$Rn;for(const{node1:t,node2:r}of e.lines){const{x:e,y:s,z:o}=t.center,{x:i,y:a,z:l}=r.center,u=t.radius,c=r.radius,h=(t.type-.5)/4,d=(r.type-.5)/4;n.add([e,s,o,u],[i,a,l,c],[h,h],[d,d])}this.painter=new z.b5H(t,{makeDataset:n.makeDataset,minRadius:1})}delete(){this.painter.delete()}paint(t,e){this.painter.paint(t,e)}}class G{constructor(t){this.data=t,this.length=Math.floor(t.length/4)}position(t){const{data:e}=this,n=this.actualIndex(t);return new z.hNi(e[n+0],e[n+1],e[n+2])}x(t){return this.data[this.actualIndex(t)]}y(t){return this.data[this.actualIndex(t)+1]}z(t){return this.data[this.actualIndex(t)+2]}diameter(t){return this.data[this.actualIndex(t)+3]}setDiameter(t,e){this.data[this.actualIndex(t)+3]=e}forEach(t){for(let e=0;e<this.length;e++)if(!1===t(this.x(e),this.y(e),this.z(e),this.diameter(e)))return}computeBounds(){let t=Number.POSITIVE_INFINITY,e=Number.POSITIVE_INFINITY,n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY,s=Number.NEGATIVE_INFINITY,o=Number.NEGATIVE_INFINITY;for(let i=0;i<this.length;i++){const a=this.x(i),l=this.y(i),u=this.z(i);t=Math.min(t,a),r=Math.max(r,a),e=Math.min(e,l),s=Math.max(s,l),n=Math.min(n,u),o=Math.max(o,u)}let i=(t+r)/2,a=(e+s)/2,l=(n+o)/2;return[i,a,l,Math.max(Math.abs(i-t),Math.abs(i-r),Math.abs(a-e),Math.abs(a-s),Math.abs(l-n),Math.abs(l-o))]}actualIndex(t){if(t<0||t>=this.length)throw new Error(`Index of a points element must be between 0 and ${this.length-1}!`);return 4*t}}class R{constructor(t){this.data=t,this.length=Math.floor(t.length/3)}point(t){return this.data[this.actualIndex(t)]}type(t){return this.data[this.actualIndex(t)+1]}parent(t){return this.data[this.actualIndex(t)+2]}indexesOfSameType(t){const e=[];for(let n=0;n<this.length;n++)this.type(n)===t&&e.push(n);return e}indexesOfSameParentType(t){const e=[];for(let n=0;n<this.length;n++){const r=this.parent(n);this.type(r)===t&&e.push(n)}return e}actualIndex(t){if(t<0||t>=this.length)throw new Error(`Index of a structure element must be between 0 and ${this.length-1}!`);return 3*t}}class F{constructor(t){var e,n;this._nodes=[],this._somaNodes=[],this._lines=[];const r=new G(null!==(e=t.get("points").value)&&void 0!==e?e:[]),s=new R(null!==(n=t.get("structure").value)&&void 0!==n?n:[]);this.data={points:r,structure:s};const{_nodes:o}=this;r.forEach(((t,e,n,r)=>{o.push({center:new z.hNi(t,e,n),radius:.5*r,type:0,lines:[]})}));const i=new z.hNi;this.somaCenter=i;for(let t=0;t<s.length;t++){const e=s.type(t);if(e===F.SOMA){const n=o[t];n.type=e,i.add(n.center),this._somaNodes.push(n)}else{const n=o[s.point(t)];n.type=e;const r=o[s.point(s.parent(t))],i={node1:r,node2:n,length:z.hNi.distance(r.center,n.center)};this._lines.push(i),r.lines.push(i),n.lines.push(i)}}i.scale(1/i.length);let a=0;for(const t of o)a=Math.max(a,z.hNi.distance(i,t.center));this.boundingSphereRadius=a}get nodes(){return this._nodes}get somaNodes(){return this._somaNodes}get lines(){return this._lines}}F.SOMA=1,F.AXON=2,F.BASAL_DENDRITE=3,F.APICAL_DENDRITE=4,F.GLIA_PERIVASCULAR_PROCESS=2,F.GLIA_PROCESS=3,F.NECK=2,F.HEAD=3;class H extends z.tbm{constructor(t,e){var n,r,s;if(super(),this.context=t,this.radiusMultiplier=1,this.minSizeInPixels=0,this.radiusMultiplier=null!==(n=e.radiusMultiplier)&&void 0!==n?n:1,this.minSizeInPixels=null!==(r=e.minSizeInPixels)&&void 0!==r?r:0,this.dataPoint=e.dataPoint,3&this.dataPoint.length)throw new Error("dataPoint must have a length that is an integral multiple of 4: [x, y, z, radius, ...]!");if(this.dataUV=null!==(s=e.dataUV)&&void 0!==s?s:new Float32Array(this.dataPoint.length>>1),this.dataPoint.length!==2*this.dataUV.length)throw new Error("dataUV must be half of the size of dataPoint: [u, v, ...]!");e.texture?(this.texture=e.texture,this.textureMustBeDeleted=!1):(this.texture=new z.HTX(t).loadBitmap((0,z.KQL)(16,["#0f0","#ff0","#f00"])),this.textureMustBeDeleted=!0),this.count=this.dataUV.length>>1,this.dataset=this.createDataset(),this.program=this.createProgram(),this.vao=new z.ZV_(t.gl,this.program,[this.dataset])}delete(){this.textureMustBeDeleted&&this.texture.delete(),this.program.delete(),this.vao.delete()}paint(t,e){const{context:n,program:r,vao:s,texture:o,count:i,radiusMultiplier:a,minSizeInPixels:l}=this,{gl:u,camera:c}=n;r.use(),o.activate(0,r,"uniTexture"),r.uniform1f("uniRadiusMultiplier",a),r.uniform1f("uniMinSizeInPixels",l),r.uniform1f("uniHalfScreenHeightInPixels",.5*n.height),r.uniformMatrix4fv("uniModelViewMatrix",c.matrixModelView),r.uniformMatrix4fv("uniProjectionMatrix",c.matrixProjection),s.bind(),u.drawArrays(u.POINTS,0,i),s.unbind()}createDataset(){const t=new z.I9j({attPoint:"vec4",attUV:"vec2"});return t.set("attPoint",this.dataPoint),t.set("attUV",this.dataUV),t}createProgram(){const t=new z.dLJ({uniforms:{uniMinSizeInPixels:"float",uniRadiusMultiplier:"float",uniHalfScreenHeightInPixels:"float",uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4"},attributes:{attPoint:"vec4",attUV:"vec2"},varying:{varUV:"vec2"},mainCode:["varUV = attUV;","float radius = attPoint.w;","vec4 point = vec4(attPoint.xyz, 1.0);","gl_Position = uniProjectionMatrix * uniModelViewMatrix * point;","gl_PointSize = max(","  uniMinSizeInPixels,","  uniRadiusMultiplier * radius * uniHalfScreenHeightInPixels / gl_Position.w",");"]}).code,e=new z.NI6({uniforms:{uniTexture:"sampler2D"},varying:{varUV:"vec2"},outputs:{FragColor:"vec4"},mainCode:["vec2 coords = 2.0 * (gl_PointCoord - vec2(.5));","float len = 1.0 - dot(coords, coords);","if (len < 0.0) discard;","vec4 color = texture(uniTexture, varUV);","float light = smoothstep(0.0, 0.5, len);","float spec = pow(len, 2.0) * .5;","FragColor = color * vec4(vec3(light), 1.0) + vec4(vec3(spec), 0.0);"]}).code;return new z.a6X(this.context.gl,{vert:t,frag:e})}}class W extends z.tbm{constructor(t,e){if(super(),this.context=t,this.v=0,this.dataPoint=e.dataPoint,3&this.dataPoint.length)throw new Error("dataPoint must have a length that is an integral multiple of 4: [x, y, z, radius, ...]!");e.texture?(this.texture=e.texture,this.textureMustBeDeleted=!1):(this.texture=new z.HTX(t).loadBitmap((0,z.KQL)(16,["#0f0","#ff0","#f00"])),this.textureMustBeDeleted=!0),this.count=this.dataPoint.length>>2,this.dataset=this.createDataset(),this.program=this.createProgram(),this.vao=new z.ZV_(t.gl,this.program,[this.dataset])}delete(){this.textureMustBeDeleted&&this.texture.delete(),this.program.delete(),this.vao.delete()}paint(t,e){const{context:n,program:r,vao:s,texture:o,count:i}=this,{gl:a,camera:l}=n;r.use(),o.activate(0,r,"uniTexture"),r.uniform1f("uniV",this.v),r.uniformMatrix4fv("uniModelViewMatrix",l.matrixModelView),r.uniformMatrix4fv("uniProjectionMatrix",l.matrixProjection),s.bind(),a.drawArrays(a.LINES,0,i),s.unbind()}createDataset(){const t=new z.I9j({attPoint:"vec4"});return t.set("attPoint",this.dataPoint),t}createProgram(){const t=new z.dLJ({uniforms:{uniV:"float",uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4"},attributes:{attPoint:"vec4"},varying:{varUV:"vec2"},mainCode:["varUV = vec2(attPoint.w, uniV);","vec4 point = vec4(attPoint.xyz, 1.0);","gl_Position = uniProjectionMatrix * uniModelViewMatrix * point;"]}).code,e=new z.NI6({uniforms:{uniTexture:"sampler2D"},varying:{varUV:"vec2"},outputs:{FragColor:"vec4"},mainCode:["vec4 color = texture(uniTexture, varUV);","FragColor = color;"]}).code;return new z.a6X(this.context.gl,{vert:t,frag:e})}}class Y{constructor(){this._canvas=null,this._groups=[],this._context=null}get canvas(){return this._canvas}set canvas(t){t?(this._canvas=t,this.initialize()):this.cleanup()}get groups(){return this._groups}set groups(t){this.cleanup();for(const e of t)e.has("points")&&e.has("structure")&&this._groups.push(e);this.initialize()}cleanup(){0!==this._groups.length&&(this._context&&this._context.destroy(),this._canvas=null,this._groups=[])}initialize(){const{canvas:t,groups:e}=this;if(!t||0===e.length)return;const n=new z.tfp(t,{antialias:!0}),r=e.map((t=>new F(t)));console.log("🚀 [painter-manager] morphologies =",r),r.map((t=>new O(n,t)));const[s,o]=function(t){const e=z.hNi.center(t.map((t=>t.somaCenter)));let n=0;for(const r of t)n=Math.max(n,r.boundingSphereRadius+z.hNi.distance(e,r.somaCenter));return[e,n]}(r);n.camera instanceof z.xNY&&(n.camera.fovy=Math.PI/2);const[i,a,l]=s;n.camera.far=10*o,n.camera.near=1,n.camera.transfo.setPosition(i,a,l),n.camera.transfo.setDistance(o),new z.pwt(n,{geo:{maxLat:(0,z.HPH)(60),minLat:(0,z.HPH)(-60)},speedZoom:50,inertiaOrbit:1e3}),n.add(new z.o57(n,{color:[0,0,0,1],depth:1}),new z.Ipk(n,{depth:z.Eg5.lessOrEqual,children:[L(n,r[0].nodes),q(n,r[0].lines)]})),n.paint()}}function L(t,e){const n=[],r=[];for(const t of e){const{x:e,y:s,z:o}=t.center,i=t.radius;n.push(e,s,o,i);const a=(t.type-.5)/4;r.push(a,a)}return new H(t,{dataPoint:new Float32Array(n),dataUV:new Float32Array(r),minSizeInPixels:5,texture:new z.HTX(t).loadBitmap((0,z.lu8)(1,1,"#008"))})}function q(t,e){const n=[];for(const{node1:t,node2:r}of e)for(const e of[t,r]){const{x:t,y:r,z:s}=e.center;n.push(t,r,s,0)}const r=new W(t,{dataPoint:new Float32Array(n)});return r.texture.loadBitmap((0,z.lu8)(1,1,"#fff")),r}function X({className:t,groups:e}){const n=function(){const t=D.useRef(null);return t.current||(t.current=new Y),t.current}();return D.useEffect((()=>{n.groups=e}),[e]),(0,r.jsx)("div",{className:J(t,U.morphologyViewer),children:(0,r.jsx)("canvas",{ref:t=>{n.canvas=t}})})}function J(...t){return t.filter((t=>"string"==typeof t)).join(" ")}function Q(){const t=s.U.data.useValue(),e=s.U.groupsToDisplay.useValue();return t?(0,r.jsxs)(N.UkC,{template:"*1",orientation:"row",children:[(0,r.jsxs)(N.UkC,{template:"*1",orientation:"column",children:[(0,r.jsx)(N.sWC,{color:"primary-1",padding:"M",children:(0,r.jsx)("strong",{children:t.name})}),(0,r.jsx)(N.sWC,{color:"neutral-3",overflow:"auto",padding:"S",maxWidth:"480px",children:(0,r.jsx)(j,{group:t})})]}),(0,r.jsx)(N.sWC,{color:"neutral-3",position:"relative",fullsize:!0,children:(0,r.jsx)(X,{groups:e})})]}):null}},7099:(t,e,n)=>{n.d(e,{A:()=>a});var r=n(1354),s=n.n(r),o=n(6314),i=n.n(o)()(s());i.push([t.id,".src-components-Group-Group-module_group_wJCTWr > div.src-components-Group-Group-module_children_cfd_Pm {\n    margin-left: 1em;\n}\n\n.src-components-Group-Group-module_group_wJCTWr summary {\n    border-radius: 0.25em;\n    color: var(--theme-color-on-primary-7);\n    background: var(--theme-color-primary-7);\n    margin: 1px 0;\n    padding: 0 1em;\n}\n","",{version:3,sources:["webpack://./src/components/Group/Group.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,sCAAsC;IACtC,wCAAwC;IACxC,aAAa;IACb,cAAc;AAClB",sourcesContent:[".group > div.children {\n    margin-left: 1em;\n}\n\n.group summary {\n    border-radius: 0.25em;\n    color: var(--theme-color-on-primary-7);\n    background: var(--theme-color-primary-7);\n    margin: 1px 0;\n    padding: 0 1em;\n}\n"],sourceRoot:""}]),i.locals={group:"src-components-Group-Group-module_group_wJCTWr",children:"src-components-Group-Group-module_children_cfd_Pm"};const a=i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,