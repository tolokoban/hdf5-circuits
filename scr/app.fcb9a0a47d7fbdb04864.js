(()=>{"use strict";var t,n,e,r={8209:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),o=e.n(r),a=e(6314),s=e.n(a)()(o());s.push([t.id,".src-app-layout-module_Layoutbackground_NCtEei,\n.src-app-layout-module_Layoutbackground_NCtEei > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n","",{version:3,sources:["webpack://./src/app/layout.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB",sourcesContent:[".Layoutbackground,\n.Layoutbackground > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n"],sourceRoot:""}]),s.locals={Layoutbackground:"src-app-layout-module_Layoutbackground_NCtEei"};const i=s},9165:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),o=e.n(r),a=e(6314),s=e.n(a)()(o());s.push([t.id,'html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nhr {\n    content: "";\n    width: 100%;\n    color: currentColor;\n    border: none;\n    height: 1px;\n    background: linear-gradient(\n        to left,\n        transparent,\n        currentColor,\n        currentColor,\n        transparent\n    );\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;IAGI,SAAS;IACT,mCAAmC;IACnC,kCAAkC;IAClC,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;IACI;iBACa;AACjB;;AAEA;IACI,UAAU;IACV,wBAAwB;AAC5B;;AAEA;IACI,WAAW;IACX,WAAW;IACX,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX;;;;;;KAMC;AACL",sourcesContent:['html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nhr {\n    content: "";\n    width: 100%;\n    color: currentColor;\n    border: none;\n    height: 1px;\n    background: linear-gradient(\n        to left,\n        transparent,\n        currentColor,\n        currentColor,\n        transparent\n    );\n}\n'],sourceRoot:""}]);const i=s},1829:(t,n,e)=>{e.d(n,{Di:()=>i,bw:()=>o,gQ:()=>a,s9:()=>u});var r=e(6540);const o={"/":["/"],"/data":["/data"]};function a(t,...n){var e;const r=function(t,n){const e=o[t];let r=0;return e.map((t=>"["===t.charAt(0)?n[r++]:t)).join("/")}(t,n);return r!==(null==(e=f().value)?void 0:e.path)&&(window.location.hash=r,!0)}function s(t){let n=null;for(const e of Object.values(o)){const r=i(t,e);if(r){if(0===r.distance)return r;(!n||r.distance<n.distance)&&(n=r)}}return n}function i(t,n){if(!n)return null;let e=t;const r={};for(let t=0;t<n.length;t++){if(e.length<1)return null;const o=n[t];if(o.startsWith("[")){const t=o.substring(1,o.length-1),[n,a]=l(e);r[t]=n,e=a}else{if(!e.startsWith(o))return null;e=e.substring(o.length+1)}}return{path:t,route:n.join("/"),params:r,distance:e.length}}function l(t){const n=t.indexOf("/");return n<0?[t,""]:[t.substring(0,n),t.substring(n+1)]}class c{constructor(t){this.security=t,this.listeners=new Set,this._value=null,this.handleHashChange=t=>{const n=this.extractHash(t.oldURL),e=this.extractHash(t.newURL),r=this.ensureAbsoluteHash(e,n);r!==e&&history.replaceState({},"",`#${r}`),this.setHash(r)},this.nonEmpty=t=>"string"==typeof t&&t.trim().length>0;const n=this.extractHash(window.location.href);this.setHash(n).then((()=>window.addEventListener("hashchange",this.handleHashChange))).catch((t=>{console.error(`Unable to set hash to "${n}":`,t)}))}addListener(t){this.listeners.add(t)}removeListener(t){this.listeners.delete(t)}get value(){return this._value}setHash(t){return n=this,e=function*(){var n;let e=s(t);if(e)for(const[n,r]of this.security){if(!e.route.startsWith(n))continue;const o=yield r(e.route,t);if(o&&o!==e.route){if(e=s(o),!e)break;return this._value=null,void a(e.path)}}(null==(n=this._value)?void 0:n.route)!==(null==e?void 0:e.route)&&(this._value=e,this.listeners.forEach((t=>t(e))))},new Promise(((t,r)=>{var o=t=>{try{s(e.next(t))}catch(t){r(t)}},a=t=>{try{s(e.throw(t))}catch(t){r(t)}},s=n=>n.done?t(n.value):Promise.resolve(n.value).then(o,a);s((e=e.apply(n,null)).next())}));var n,e}extractHash(t){const n=new URL(t).hash;return n?n.startsWith("#")?n.substring(1):n:"/"}ensureAbsoluteHash(t,n){if(t.startsWith("/"))return t;let e=t;for(;e.startsWith("./");)e=e.substring(2);const r=n.split("/").filter(this.nonEmpty);for(const n of t.split("/"))".."===n?r.length>0&&r.pop():r.push(n);return`/${r.filter(this.nonEmpty).join("/")}`}}function u(){const[t,n]=r.useState(f().value);return r.useEffect((()=>{const t=t=>{n(t)};return f().addListener(t),()=>f().removeListener(t)}),[]),t}const h=[];let d=null;function f(){return d||(d=new c(h)),d}},9069:(t,n,e)=>{e.d(n,{s:()=>i});var r=e(2197),o=e(6327);class a{constructor(t,n){this.filename=n;const e=new o.ZH(t,n);this.root=e}keys(t=""){const{root:n}=this;if(""===t)return n.keys;const e=this.get(t),o=(0,r.Tn)(e.keys)?e.keys():e.keys;return(0,r.Xj)(o,["array","string"])?o:[]}attrs(t=""){var n;const{root:e}=this;if(""===t)return structuredClone(e.attrs);const r=this.get(t);return console.log("ðŸš€ [hdf5] path, item.value =",t,r.value),structuredClone(null!=(n=r.attrs)?n:{})}value(t=""){const{root:n}=this;return""===t?n.value:this.get(t).value}get(t){const n=this.root.get(t);if(!n)throw new Error(`Path "${t}" does not exist!`);return n}}var s=(t,n,e)=>new Promise(((r,o)=>{var a=t=>{try{i(e.next(t))}catch(t){o(t)}},s=t=>{try{i(e.throw(t))}catch(t){o(t)}},i=t=>t.done?r(t.value):Promise.resolve(t.value).then(a,s);i((e=e.apply(t,n)).next())}));function i(t){return s(this,null,(function*(){const n=yield function(t){return new Promise(((n,e)=>{if((0,r.Kg)(t))fetch(t).then((t=>t.arrayBuffer().then(n).catch(e))).catch(e);else{const r=new FileReader;r.onload=()=>{const t=r.result;t instanceof ArrayBuffer?n(t):e("Invalid format")},r.onerror=e,r.readAsArrayBuffer(t)}}))}(t);return new a(n,(0,r.Kg)(t)?"Example":t.name)}))}},1370:(t,n,e)=>{var r=e(4848),o=e(6540),a=e(5338),s=e(5968),i=e(1829),l=e(5072),c=e.n(l),u=e(7825),h=e.n(u),d=e(7659),f=e.n(d),p=e(5056),A=e.n(p),g=e(540),m=e.n(g),v=e(1113),y=e.n(v),b=e(8209),C={};C.styleTagTransform=y(),C.setAttributes=A(),C.insert=f().bind(null,"head"),C.domAPI=h(),C.insertStyleElement=m(),c()(b.A,C);const w=b.A&&b.A.locals?b.A.locals:void 0;function x({children:t}){return(0,r.jsx)("div",{className:w.Layoutbackground,children:t})}var k=e(3506),j=e(9069);function I({children:t}){return k.U.data.useValue()?(0,r.jsx)(r.Fragment,{children:t}):(0,r.jsx)(s.sWC,{display:"grid",placeItems:"center",color:"neutral-5",children:(0,r.jsxs)(s.sWC,{color:"error",padding:"L",display:"flex",flexDirection:"column",children:[(0,r.jsx)("p",{children:"There is no file loaded yet..."}),(0,r.jsx)("hr",{}),(0,r.jsx)(s.yQN,{onClick:"#/",variant:"text",icon:s.Gk,children:"Back to main page"}),(0,r.jsx)(s.yQN,{onClick:()=>{(0,j.s)("merged-morphologies.h5").then((t=>k.U.data.value=t))},variant:"text",icon:s.Thu,children:"Load default example"})]})})}const B=o.lazy((()=>e.e(900).then(e.bind(e,900)))),E=o.lazy((()=>e.e(720).then(e.bind(e,9720))));function L({lang:t}){const n=(0,i.s9)(),e=(0,r.jsx)("div",{children:"Loading..."}),o=x,a=B,s=I,l=E;return(0,r.jsx)(S,{path:"/",Page:a,Layout:o,fallback:e,context:n,children:(0,r.jsx)(S,{path:"/data",Page:l,Layout:s,fallback:e,context:n})})}function S({path:t,fallback:n,children:e,Page:a,Layout:s,Template:l,context:c}){const u=c&&(0,i.Di)(c.path,i.bw[t]);if(!u)return null;if(0===u.distance){if(!a)return null;const t=l?(0,r.jsx)(l,{params:u.params,children:(0,r.jsx)(a,{params:u.params})}):(0,r.jsx)(a,{params:u.params});return s?(0,r.jsx)(s,{params:u.params,children:(0,r.jsx)(o.Suspense,{fallback:n,children:t})}):(0,r.jsx)(o.Suspense,{fallback:n,children:t})}return s?(0,r.jsx)(s,{params:u.params,children:e}):(0,r.jsx)(r.Fragment,{children:e})}var P=e(9165),O={};O.styleTagTransform=y(),O.setAttributes=A(),O.insert=f().bind(null,"head"),O.domAPI=h(),O.insertStyleElement=m(),c()(P.A,O),P.A&&P.A.locals&&P.A.locals;var T,W=e(8347),_=e(2197);const N=null!=(T=localStorage.getItem("Language"))?T:navigator.language,H=new W.A(N,{storage:{id:"Language",guard:_.Kg}});function M(){const[,t]=H.useState();return o.useEffect((()=>{const n=new URLSearchParams(window.location.search).get("lang");"string"==typeof n&&n.length>1&&t(n),function(){const t=document.getElementById("splash");t&&(t.classList.add("vanish"),window.setTimeout((()=>{const n=t.parentNode;n&&n.removeChild(t)}),900))}()}),[t]),(0,r.jsx)(o.StrictMode,{children:(0,r.jsx)(s.Znq,{children:(0,r.jsx)(L,{})})})}!function(){s.Sxu.apply();const t=document.getElementById("app");(0,a.H)(t).render((0,r.jsx)(M,{}))}()},3506:(t,n,e)=>{e.d(n,{U:()=>r});const r={data:new(e(8347).A)(null)}}},o={};function a(t){var n=o[t];if(void 0!==n)return n.exports;var e=o[t]={id:t,exports:{}};return r[t].call(e.exports,e,e.exports,a),e.exports}a.m=r,t=[],a.O=(n,e,r,o)=>{if(!e){var s=1/0;for(u=0;u<t.length;u++){for(var[e,r,o]=t[u],i=!0,l=0;l<e.length;l++)(!1&o||s>=o)&&Object.keys(a.O).every((t=>a.O[t](e[l])))?e.splice(l--,1):(i=!1,o<s&&(s=o));if(i){t.splice(u--,1);var c=r();void 0!==c&&(n=c)}}return n}o=o||0;for(var u=t.length;u>0&&t[u-1][2]>o;u--)t[u]=t[u-1];t[u]=[e,r,o]},a.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return a.d(n,{a:n}),n},a.d=(t,n)=>{for(var e in n)a.o(n,e)&&!a.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},a.f={},a.e=t=>Promise.all(Object.keys(a.f).reduce(((n,e)=>(a.f[e](t,n),n)),[])),a.u=t=>"scr/"+t+"."+{720:"137dedf559fb8eb17254",900:"4bfa60cce917a3ba3ba2"}[t]+".js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),a.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),n={},e="...:",a.l=(t,r,o,s)=>{if(n[t])n[t].push(r);else{var i,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var h=c[u];if(h.getAttribute("src")==t||h.getAttribute("data-webpack")==e+o){i=h;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,a.nc&&i.setAttribute("nonce",a.nc),i.setAttribute("data-webpack",e+o),i.src=t),n[t]=[r];var d=(e,r)=>{i.onerror=i.onload=null,clearTimeout(f);var o=n[t];if(delete n[t],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((t=>t(r))),e)return e(r)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=d.bind(null,i.onerror),i.onload=d.bind(null,i.onload),l&&document.head.appendChild(i)}},a.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;a.g.importScripts&&(t=a.g.location+"");var n=a.g.document;if(!t&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");if(e.length)for(var r=e.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=e[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=t+"../"})(),(()=>{var t={524:0};a.f.j=(n,e)=>{var r=a.o(t,n)?t[n]:void 0;if(0!==r)if(r)e.push(r[2]);else{var o=new Promise(((e,o)=>r=t[n]=[e,o]));e.push(r[2]=o);var s=a.p+a.u(n),i=new Error;a.l(s,(e=>{if(a.o(t,n)&&(0!==(r=t[n])&&(t[n]=void 0),r)){var o=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;i.message="Loading chunk "+n+" failed.\n("+o+": "+s+")",i.name="ChunkLoadError",i.type=o,i.request=s,r[1](i)}}),"chunk-"+n,n)}},a.O.j=n=>0===t[n];var n=(n,e)=>{var r,o,[s,i,l]=e,c=0;if(s.some((n=>0!==t[n]))){for(r in i)a.o(i,r)&&(a.m[r]=i[r]);if(l)var u=l(a)}for(n&&n(e);c<s.length;c++)o=s[c],a.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return a.O(u)},e=self.webpackChunk_=self.webpackChunk_||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))})(),a.nc=void 0;var s=a.O(void 0,[597],(()=>a(1370)));s=a.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,