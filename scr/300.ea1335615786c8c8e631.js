"use strict";(self.webpackChunkhdf5_circuits=self.webpackChunkhdf5_circuits||[]).push([[300],{435:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),s=e.n(r),o=e(6314),a=e.n(o)()(s());a.push([t.id,'ul.src-components-Attributes-Attributes-module_attributes_mBUDPb {\n    margin: 0.25em 0;\n    padding: 0.5em;\n    color: var(--theme-color-on-neutral-5);\n    background: var(--theme-color-neutral-5);\n    border-radius: 0.5em;\n}\n\n.src-components-Attributes-Attributes-module_attributes_mBUDPb li::marker {\n    content: "";\n}\n\n.src-components-Attributes-Attributes-module_empty_qDO80O {\n    font-style: italic;\n    margin: 0.25em 0;\n}\n',"",{version:3,sources:["webpack://./src/components/Attributes/Attributes.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,cAAc;IACd,sCAAsC;IACtC,wCAAwC;IACxC,oBAAoB;AACxB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB",sourcesContent:['ul.attributes {\n    margin: 0.25em 0;\n    padding: 0.5em;\n    color: var(--theme-color-on-neutral-5);\n    background: var(--theme-color-neutral-5);\n    border-radius: 0.5em;\n}\n\n.attributes li::marker {\n    content: "";\n}\n\n.empty {\n    font-style: italic;\n    margin: 0.25em 0;\n}\n'],sourceRoot:""}]),a.locals={attributes:"src-components-Attributes-Attributes-module_attributes_mBUDPb",empty:"src-components-Attributes-Attributes-module_empty_qDO80O"};const i=a},1703:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),s=e.n(r),o=e(6314),a=e.n(o)()(s());a.push([t.id,".src-components-Dataset-Dataset-module_dataset_RViG09 {\n    margin: 0.25em 0;\n    padding: 0.25em;\n    border-radius: 0.25em;\n    background: var(--theme-color-neutral-4);\n    color: var(--theme-color-on-neutral-4);\n}\n\n.src-components-Dataset-Dataset-module_dataset_RViG09 > code {\n    display: inline-block;\n    font-size: 80%;\n    margin: 0.5em 0;\n    opacity: 0.7;\n}\n","",{version:3,sources:["webpack://./src/components/Dataset/Dataset.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,qBAAqB;IACrB,cAAc;IACd,eAAe;IACf,YAAY;AAChB",sourcesContent:[".dataset {\n    margin: 0.25em 0;\n    padding: 0.25em;\n    border-radius: 0.25em;\n    background: var(--theme-color-neutral-4);\n    color: var(--theme-color-on-neutral-4);\n}\n\n.dataset > code {\n    display: inline-block;\n    font-size: 80%;\n    margin: 0.5em 0;\n    opacity: 0.7;\n}\n"],sourceRoot:""}]),a.locals={dataset:"src-components-Dataset-Dataset-module_dataset_RViG09"};const i=a},3429:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),s=e.n(r),o=e(6314),a=e.n(o)()(s());a.push([t.id,".src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: #777;\n}\n\n.src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n","",{version:3,sources:["webpack://./src/components/MorphologyViewer/MorphologyViewer.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB",sourcesContent:[".morphologyViewer {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: #777;\n}\n\n.morphologyViewer canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n"],sourceRoot:""}]),a.locals={morphologyViewer:"src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p"};const i=a},4300:(t,n,e)=>{e.r(n),e.d(n,{default:()=>U});var r=e(4848),s=e(2592),o=e(5072),a=e.n(o),i=e(7825),c=e.n(i),l=e(7659),u=e.n(l),A=e(5056),m=e.n(A),p=e(540),d=e.n(p),h=e(1113),g=e.n(h),I=e(435),C={};C.styleTagTransform=g(),C.setAttributes=m(),C.insert=u().bind(null,"head"),C.domAPI=c(),C.insertStyleElement=d(),a()(I.A,C);const b=I.A&&I.A.locals?I.A.locals:void 0;function f({className:t,attrs:n}){const e=Object.keys(n);return 0===e.length?(0,r.jsx)("div",{className:b.empty,children:"No attributes."}):(0,r.jsx)("ul",{className:y(t,b.attributes),children:e.map((t=>(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:t}),": ",n[t]]},t)))})}function y(...t){return t.filter((t=>"string"==typeof t)).join(" ")}var x=e(1703),v={};v.styleTagTransform=g(),v.setAttributes=m(),v.insert=u().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=d(),a()(x.A,v);const _=x.A&&x.A.locals?x.A.locals:void 0;function w({className:t,value:n}){return n?(0,r.jsxs)("div",{className:B(t,_.dataset),children:[(0,r.jsxs)("code",{children:["[",n.slice(0,16).map((t=>t.toFixed(3))).join(", "),n.length>16&&(0,r.jsx)("span",{children:", ..."}),"]"]}),n.length>16&&(0,r.jsxs)("div",{children:[(0,r.jsx)("strong",{children:n.length})," elements"]})]}):null}function B(...t){return t.filter((t=>"string"==typeof t)).join(" ")}var N=e(7099),j={};j.styleTagTransform=g(),j.setAttributes=m(),j.insert=u().bind(null,"head"),j.domAPI=c(),j.insertStyleElement=d(),a()(N.A,j);const k=N.A&&N.A.locals?N.A.locals:void 0;var M=e(6586);function E({className:t,group:n}){const[e,o]=s.U.groupToDisplay.useState();if(!n)return null;const a=n.name,i=n.has("points")&&n.has("structure");return(0,r.jsxs)("details",{className:T(t,k.group),open:""===a,children:[(0,r.jsx)("summary",{children:a.split("/").at(-1)||(0,r.jsx)("strong",{children:"ROOT"})}),(0,r.jsxs)("div",{className:k.children,children:[i&&(0,r.jsx)(M.myw,{value:(null==e?void 0:e.name)===n.name,onChange:t=>o(t?n:null),children:"Show this morphology"}),(0,r.jsx)(w,{value:n.value}),(0,r.jsx)(f,{attrs:n.attrs}),n.keys.map((t=>(0,r.jsx)(E,{group:n.get(t)},t)))]})]})}function T(...t){return t.filter((t=>"string"==typeof t)).join(" ")}var V=e(6540),D=e(3429),O={};O.styleTagTransform=g(),O.setAttributes=m(),O.insert=u().bind(null,"head"),O.domAPI=c(),O.insertStyleElement=d(),a()(D.A,O);const G=D.A&&D.A.locals?D.A.locals:void 0;var P=e(4960);class S{constructor(t){this.data=t,this.count=Math.floor(t.length/4)}position(t){const{data:n}=this,e=this.actualIndex(t);return new P.hNi(n[e+0],n[e+1],n[e+2])}x(t){return this.data[this.actualIndex(t)]}y(t){return this.data[this.actualIndex(t)+1]}z(t){return this.data[this.actualIndex(t)+2]}diameter(t){return this.data[this.actualIndex(t)+3]}setDiameter(t,n){this.data[this.actualIndex(t)+3]=n}computeBounds(){let t=Number.POSITIVE_INFINITY,n=Number.POSITIVE_INFINITY,e=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY,s=Number.NEGATIVE_INFINITY,o=Number.NEGATIVE_INFINITY;for(let a=0;a<this.count;a++){const i=this.x(a),c=this.y(a),l=this.z(a);t=Math.min(t,i),r=Math.max(r,i),n=Math.min(n,c),s=Math.max(s,c),e=Math.min(e,l),o=Math.max(o,l)}let a=(t+r)/2,i=(n+s)/2,c=(e+o)/2;return[a,i,c,Math.max(Math.abs(a-t),Math.abs(a-r),Math.abs(i-n),Math.abs(i-s),Math.abs(c-e),Math.abs(c-o))]}actualIndex(t){if(t<0||t>=this.count)throw new Error(`Index of a points element must be between 0 and ${this.count-1}!`);return 4*t}}class R{constructor(t){this.data=t,this.count=Math.floor(t.length/3)}point(t){return this.data[this.actualIndex(t)]}type(t){return this.data[this.actualIndex(t)+1]}parent(t){return this.data[this.actualIndex(t)+2]}indexesOfSameType(t){const n=[];for(let e=0;e<this.count;e++)this.type(e)===t&&n.push(e);return n}indexesOfSameParentType(t){const n=[];for(let e=0;e<this.count;e++){const r=this.parent(e);this.type(r)===t&&n.push(e)}return n}actualIndex(t){if(t<0||t>=this.count)throw new Error(`Index of a structure element must be between 0 and ${this.count-1}!`);return 3*t}}R.SOMA=1,R.AXON=2,R.BASAL_DENDRITE=3,R.APICAL_DENDRITE=4,R.GLIA_PERIVASCULAR_PROCESS=2,R.GLIA_PROCESS=3,R.NECK=2,R.HEAD=3;class W extends P.tbm{constructor(t,{points:n,structure:e}){super();const r=new P.$Rn;for(let t=0;t<e.count;t++){if(e.type(t)!==R.SOMA)continue;const r=e.point(t);n.setDiameter(r,5)}for(let t=0;t<e.count;t++){const s=e.parent(t);if(s<0)continue;const o=e.point(t),a=e.point(s),i=[n.x(o),n.y(o),n.z(o),.5*n.diameter(o)],c=[n.x(a),n.y(a),n.z(a),.5*n.diameter(a)],l=e.type(s)===R.SOMA?.125:(e.type(t)-.5)/4,u=(e.type(s)-.5)/4;r.add(i,c,[l,l],[u,u])}this.painter=new P.b5H(t,{makeDataset:r.makeDataset,minRadius:1})}delete(){this.painter.delete()}paint(t,n){this.painter.paint(t,n)}}class Y{constructor(){this._canvas=null,this._group=null,this._context=null,this.points=null,this.structure=null}get canvas(){return this._canvas}set canvas(t){t?(this._canvas=t,this.initialize()):this.cleanup()}get group(){return this._group}set group(t){var n,e;t?(t.has("points")&&t.has("structure")&&(this.points=new S(null!==(n=t.get("points").value)&&void 0!==n?n:[]),this.structure=new R(null!==(e=t.get("structure").value)&&void 0!==e?e:[])),this._group=t,this.initialize()):this.cleanup()}cleanup(){this._context&&this._context.destroy(),this._canvas=null,this._group=null}initialize(){const{canvas:t,group:n}=this;if(!t||!n)return;const e=new P.tfp(t,{antialias:!0}),{points:r,structure:s}=this;if(!r||!s)return;const[,,,o]=r.computeBounds();e.camera instanceof P.xNY&&(e.camera.fovy=Math.PI/2);const[a,i,c]=function(t,n){let e=0,r=0,s=0,o=0;for(let a=-0;a<t.count;a++){if(t.type(a)!==R.SOMA)continue;const i=t.point(a);r+=n.x(i),s+=n.y(i),o+=n.z(i),e++}const a=1/e;return[r*a,s*a,o*a]}(s,r);e.camera.far=10*o,e.camera.near=1,e.camera.transfo.setPosition(a,i,c),e.camera.transfo.setDistance(o),new P.pwt(e,{geo:{maxLat:(0,P.HPH)(60),minLat:(0,P.HPH)(-60)},speedZoom:25,inertiaOrbit:1e3}),e.add(new P.o57(e,{color:[0,0,0,1],depth:1}),new P.Ipk(e,{depth:P.Eg5.lessOrEqual,children:[new W(e,{points:r,structure:s})]})),e.paint()}}function z({className:t,group:n}){const e=function(){const t=V.useRef(null);return t.current||(t.current=new Y),t.current}();return V.useEffect((()=>{e.group=n}),[n]),(0,r.jsx)("div",{className:q(t,G.morphologyViewer),children:(0,r.jsx)("canvas",{ref:t=>{e.canvas=t}})})}function q(...t){return t.filter((t=>"string"==typeof t)).join(" ")}function U(){const t=s.U.data.useValue(),n=s.U.groupToDisplay.useValue();return t?(0,r.jsxs)(M.UkC,{template:"*1",orientation:"row",children:[(0,r.jsxs)(M.UkC,{template:"*1",orientation:"column",children:[(0,r.jsx)(M.sWC,{color:"primary-1",padding:"M",children:(0,r.jsx)("strong",{children:t.name})}),(0,r.jsx)(M.sWC,{color:"neutral-3",overflow:"auto",padding:"S",maxWidth:"480px",children:(0,r.jsx)(E,{group:t})})]}),(0,r.jsx)(M.sWC,{color:"neutral-3",position:"relative",fullsize:!0,children:(0,r.jsx)(z,{group:n})})]}):null}},7099:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),s=e.n(r),o=e(6314),a=e.n(o)()(s());a.push([t.id,".src-components-Group-Group-module_group_wJCTWr > div.src-components-Group-Group-module_children_cfd_Pm {\n    margin-left: 1em;\n}\n\n.src-components-Group-Group-module_group_wJCTWr summary {\n    border-radius: 0.25em;\n    color: var(--theme-color-on-primary-7);\n    background: var(--theme-color-primary-7);\n    margin: 1px 0;\n    padding: 0 1em;\n}\n","",{version:3,sources:["webpack://./src/components/Group/Group.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,sCAAsC;IACtC,wCAAwC;IACxC,aAAa;IACb,cAAc;AAClB",sourcesContent:[".group > div.children {\n    margin-left: 1em;\n}\n\n.group summary {\n    border-radius: 0.25em;\n    color: var(--theme-color-on-primary-7);\n    background: var(--theme-color-primary-7);\n    margin: 1px 0;\n    padding: 0 1em;\n}\n"],sourceRoot:""}]),a.locals={group:"src-components-Group-Group-module_group_wJCTWr",children:"src-components-Group-Group-module_children_cfd_Pm"};const i=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,