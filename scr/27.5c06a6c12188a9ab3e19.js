"use strict";(self.webpackChunkhdf5_circuits=self.webpackChunkhdf5_circuits||[]).push([[27],{435:(t,e,n)=>{n.d(e,{A:()=>i});var s=n(1354),r=n.n(s),o=n(6314),a=n.n(o)()(r());a.push([t.id,'ul.src-components-Attributes-Attributes-module_attributes_mBUDPb {\n    margin: 0.25em 0;\n    padding: 0.5em;\n    color: var(--theme-color-on-neutral-5);\n    background: var(--theme-color-neutral-5);\n    border-radius: 0.5em;\n}\n\n.src-components-Attributes-Attributes-module_attributes_mBUDPb li::marker {\n    content: "";\n}\n\n.src-components-Attributes-Attributes-module_empty_qDO80O {\n    font-style: italic;\n    margin: 0.25em 0;\n}\n',"",{version:3,sources:["webpack://./src/components/Attributes/Attributes.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,cAAc;IACd,sCAAsC;IACtC,wCAAwC;IACxC,oBAAoB;AACxB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB",sourcesContent:['ul.attributes {\n    margin: 0.25em 0;\n    padding: 0.5em;\n    color: var(--theme-color-on-neutral-5);\n    background: var(--theme-color-neutral-5);\n    border-radius: 0.5em;\n}\n\n.attributes li::marker {\n    content: "";\n}\n\n.empty {\n    font-style: italic;\n    margin: 0.25em 0;\n}\n'],sourceRoot:""}]),a.locals={attributes:"src-components-Attributes-Attributes-module_attributes_mBUDPb",empty:"src-components-Attributes-Attributes-module_empty_qDO80O"};const i=a},1703:(t,e,n)=>{n.d(e,{A:()=>i});var s=n(1354),r=n.n(s),o=n(6314),a=n.n(o)()(r());a.push([t.id,".src-components-Dataset-Dataset-module_dataset_RViG09 {\n    margin: 0.25em 0;\n    padding: 0.25em;\n    border-radius: 0.25em;\n    background: var(--theme-color-neutral-4);\n    color: var(--theme-color-on-neutral-4);\n}\n\n.src-components-Dataset-Dataset-module_dataset_RViG09 > code {\n    display: inline-block;\n    font-size: 80%;\n    margin: 0.5em 0;\n    opacity: 0.7;\n}\n","",{version:3,sources:["webpack://./src/components/Dataset/Dataset.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,qBAAqB;IACrB,cAAc;IACd,eAAe;IACf,YAAY;AAChB",sourcesContent:[".dataset {\n    margin: 0.25em 0;\n    padding: 0.25em;\n    border-radius: 0.25em;\n    background: var(--theme-color-neutral-4);\n    color: var(--theme-color-on-neutral-4);\n}\n\n.dataset > code {\n    display: inline-block;\n    font-size: 80%;\n    margin: 0.5em 0;\n    opacity: 0.7;\n}\n"],sourceRoot:""}]),a.locals={dataset:"src-components-Dataset-Dataset-module_dataset_RViG09"};const i=a},3429:(t,e,n)=>{n.d(e,{A:()=>i});var s=n(1354),r=n.n(s),o=n(6314),a=n.n(o)()(r());a.push([t.id,".src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: #777;\n}\n\n.src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n","",{version:3,sources:["webpack://./src/components/MorphologyViewer/MorphologyViewer.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB",sourcesContent:[".morphologyViewer {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: #777;\n}\n\n.morphologyViewer canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n"],sourceRoot:""}]),a.locals={morphologyViewer:"src-components-MorphologyViewer-MorphologyViewer-module_morphologyViewer_mGrQ0p"};const i=a},4027:(t,e,n)=>{n.r(e),n.d(e,{default:()=>X});var s=n(4848),r=n(2592),o=n(5072),a=n.n(o),i=n(7825),l=n.n(i),c=n(7659),u=n.n(c),h=n(5056),d=n.n(h),m=n(540),p=n.n(m),A=n(1113),g=n.n(A),f=n(435),x={};x.styleTagTransform=g(),x.setAttributes=d(),x.insert=u().bind(null,"head"),x.domAPI=l(),x.insertStyleElement=p(),a()(f.A,x);const I=f.A&&f.A.locals?f.A.locals:void 0;function v({className:t,attrs:e}){const n=Object.keys(e);return 0===n.length?(0,s.jsx)("div",{className:I.empty,children:"No attributes."}):(0,s.jsx)("ul",{className:C(t,I.attributes),children:n.map((t=>(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:t}),": ",e[t]]},t)))})}function C(...t){return t.filter((t=>"string"==typeof t)).join(" ")}var b=n(1703),w={};w.styleTagTransform=g(),w.setAttributes=d(),w.insert=u().bind(null,"head"),w.domAPI=l(),w.insertStyleElement=p(),a()(b.A,w);const y=b.A&&b.A.locals?b.A.locals:void 0;function _({className:t,value:e}){return e?(0,s.jsxs)("div",{className:N(t,y.dataset),children:[(0,s.jsxs)("code",{children:["[",e.slice(0,16).map((t=>t.toFixed(3))).join(", "),e.length>16&&(0,s.jsx)("span",{children:", ..."}),"]"]}),e.length>16&&(0,s.jsxs)("div",{children:[(0,s.jsx)("strong",{children:e.length})," elements"]})]}):null}function N(...t){return t.filter((t=>"string"==typeof t)).join(" ")}var P=n(7099),B={};B.styleTagTransform=g(),B.setAttributes=d(),B.insert=u().bind(null,"head"),B.domAPI=l(),B.insertStyleElement=p(),a()(P.A,B);const M=P.A&&P.A.locals?P.A.locals:void 0;var V=n(6586);function j({className:t,group:e}){const[n,o]=r.U.groupsToDisplay.useState();if(!e)return null;const a=e.name,i=e.has("points")&&e.has("structure");return(0,s.jsxs)("details",{className:E(t,M.group),open:""===a,children:[(0,s.jsx)("summary",{children:a.split("/").at(-1)||(0,s.jsx)("strong",{children:"ROOT"})}),(0,s.jsxs)("div",{className:M.children,children:[i&&(0,s.jsx)(V.myw,{value:T(e,n),onChange:t=>o(t?[e]:[]),children:"Show this morphology"}),(0,s.jsx)(_,{value:e.value}),(0,s.jsx)(v,{attrs:e.attrs}),e.keys.map((t=>(0,s.jsx)(j,{group:e.get(t)},t)))]})]})}function E(...t){return t.filter((t=>"string"==typeof t)).join(" ")}function T(t,e){if(1!==e.length)return!1;const[n]=e;return t.name===n.name}var k=n(6540),D=n(3429),S={};S.styleTagTransform=g(),S.setAttributes=d(),S.insert=u().bind(null,"head"),S.domAPI=l(),S.insertStyleElement=p(),a()(D.A,S);const O=D.A&&D.A.locals?D.A.locals:void 0;var U=n(1978);class G extends U.tbm{constructor(t,e){super();const n=new U.$Rn;for(const{node1:t,node2:s}of e.lines){const{x:e,y:r,z:o}=t.center,{x:a,y:i,z:l}=s.center,c=t.radius,u=s.radius;console.log(e.toFixed(2),r.toFixed(2),o.toFixed(2),c.toFixed(3),"->",a.toFixed(2),i.toFixed(2),l.toFixed(2),u.toFixed(3));const h=(t.type-.5)/4,d=(s.type-.5)/4;n.add([e,r,o,t.radius],[a,i,l,s.radius],[h,h],[d,d])}this.painter=new U.b5H(t,{makeDataset:n.makeDataset,minRadius:1})}delete(){this.painter.delete()}paint(t,e){this.painter.paint(t,e)}}class F{constructor(t){this.data=t,this.length=Math.floor(t.length/4)}position(t){const{data:e}=this,n=this.actualIndex(t);return new U.hNi(e[n+0],e[n+1],e[n+2])}x(t){return this.data[this.actualIndex(t)]}y(t){return this.data[this.actualIndex(t)+1]}z(t){return this.data[this.actualIndex(t)+2]}diameter(t){return this.data[this.actualIndex(t)+3]}setDiameter(t,e){this.data[this.actualIndex(t)+3]=e}forEach(t){for(let e=0;e<this.length;e++)if(!1===t(this.x(e),this.y(e),this.z(e),this.diameter(e)))return}computeBounds(){let t=Number.POSITIVE_INFINITY,e=Number.POSITIVE_INFINITY,n=Number.POSITIVE_INFINITY,s=Number.NEGATIVE_INFINITY,r=Number.NEGATIVE_INFINITY,o=Number.NEGATIVE_INFINITY;for(let a=0;a<this.length;a++){const i=this.x(a),l=this.y(a),c=this.z(a);t=Math.min(t,i),s=Math.max(s,i),e=Math.min(e,l),r=Math.max(r,l),n=Math.min(n,c),o=Math.max(o,c)}let a=(t+s)/2,i=(e+r)/2,l=(n+o)/2;return[a,i,l,Math.max(Math.abs(a-t),Math.abs(a-s),Math.abs(i-e),Math.abs(i-r),Math.abs(l-n),Math.abs(l-o))]}actualIndex(t){if(t<0||t>=this.length)throw new Error(`Index of a points element must be between 0 and ${this.length-1}!`);return 4*t}}class R{constructor(t){this.data=t,this.length=Math.floor(t.length/3)}point(t){return this.data[this.actualIndex(t)]}type(t){return this.data[this.actualIndex(t)+1]}parent(t){return this.data[this.actualIndex(t)+2]}indexesOfSameType(t){const e=[];for(let n=0;n<this.length;n++)this.type(n)===t&&e.push(n);return e}indexesOfSameParentType(t){const e=[];for(let n=0;n<this.length;n++){const s=this.parent(n);this.type(s)===t&&e.push(n)}return e}actualIndex(t){if(t<0||t>=this.length)throw new Error(`Index of a structure element must be between 0 and ${this.length-1}!`);return 3*t}}class z{constructor(t){var e,n;this._nodes=[],this._somaNodes=[],this._lines=[];const s=new F(null!==(e=t.get("points").value)&&void 0!==e?e:[]),r=new R(null!==(n=t.get("structure").value)&&void 0!==n?n:[]);this.data={points:s,structure:r};const{_nodes:o}=this;s.forEach(((t,e,n,s)=>{o.push({center:new U.hNi(t,e,n),radius:.5*s,type:0,lines:[]})}));const a=new U.hNi;this.somaCenter=a;for(let t=0;t<r.length;t++){const e=r.type(t);if(e===z.SOMA){const n=o[t];n.type=e,a.add(n.center),this._somaNodes.push(n)}else{const n=o[r.point(t)];n.type=e;const s=o[r.point(r.parent(t))],a={node1:s,node2:n,length:U.hNi.distance(s.center,n.center)};this._lines.push(a),s.lines.push(a),n.lines.push(a)}}a.scale(1/a.length);let i=0;for(const t of o)i=Math.max(i,U.hNi.distance(a,t.center));this.boundingSphereRadius=i}get nodes(){return this._nodes}get somaNodes(){return this._somaNodes}get lines(){return this._lines}}z.SOMA=1,z.AXON=2,z.BASAL_DENDRITE=3,z.APICAL_DENDRITE=4,z.GLIA_PERIVASCULAR_PROCESS=2,z.GLIA_PROCESS=3,z.NECK=2,z.HEAD=3;class H extends U.tbm{constructor(t,e){var n;if(super(),this.context=t,this.dataPoint=e.dataPoint,3&this.dataPoint.length)throw new Error("dataPoint must have a length that is an integral multiple of 4: [x, y, z, radius, ...]!");if(this.dataUV=null!==(n=e.dataUV)&&void 0!==n?n:new Float32Array(this.dataPoint.length>>1),this.dataPoint.length!==2*this.dataUV.length)throw new Error("dataUV must be half of the size of dataPoint: [u, v, ...]!");e.texture?(this.texture=e.texture,this.textureMustBeDeleted=!1):(this.texture=new U.HTX(t).loadBitmap((0,U.KQL)(16,["#0f0","#ff0","#f00"])),this.textureMustBeDeleted=!0),this.count=this.dataUV.length>>1,this.dataset=this.createDataset(),this.program=this.createProgram(),this.vao=new U.ZV_(t.gl,this.program,[this.dataset])}delete(){this.textureMustBeDeleted&&this.texture.delete(),this.program.delete(),this.vao.delete()}paint(t,e){const{context:n,program:s,vao:r,texture:o,count:a}=this,{gl:i,camera:l}=n;s.use(),o.activate(0,s,"uniTexture"),s.uniform1f("uniHalfScreenHeightInPixels",.5*n.height),s.uniformMatrix4fv("uniModelViewMatrix",l.matrixModelView),s.uniformMatrix4fv("uniProjectionMatrix",l.matrixProjection),r.bind(),i.drawArrays(i.POINTS,0,a),r.unbind()}createDataset(){const t=new U.I9j({attPoint:"vec4",attUV:"vec2"});return t.set("attPoint",this.dataPoint),t.set("attUV",this.dataUV),t}createProgram(){const t=new U.dLJ({uniforms:{uniHalfScreenHeightInPixels:"float",uniModelViewMatrix:"mat4",uniProjectionMatrix:"mat4"},attributes:{attPoint:"vec4",attUV:"vec2"},varying:{varUV:"vec2"},mainCode:["varUV = attUV;","float radius = attPoint.w;","vec4 point = vec4(attPoint.xyz, 1.0);","gl_Position = uniProjectionMatrix * uniModelViewMatrix * attPoint;","gl_PointSize = uniHalfScreenHeightInPixels / gl_Position.w;"]}).code,e=new U.NI6({uniforms:{uniTexture:"sampler2D"},varying:{varUV:"vec2"},outputs:{FragColor:"vec4"},mainCode:["vec2 coords = 2.0 * (gl_PointCoord - vec2(.5));","float len = 1.0 - dot(coords, coords);","if (len < 0.0) discard;","vec4 color = texture(uniTexture, varUV);","float light = smoothstep(0.0, 0.5, len);","float spec = pow(len, 2.0) * .5;","FragColor = color * vec4(vec3(light), 1.0) + vec4(vec3(spec), 0.0);"]}).code;return new U.a6X(this.context.gl,{vert:t,frag:e})}}class W{constructor(){this._canvas=null,this._groups=[],this._context=null}get canvas(){return this._canvas}set canvas(t){t?(this._canvas=t,this.initialize()):this.cleanup()}get groups(){return this._groups}set groups(t){this.cleanup();for(const e of t)e.has("points")&&e.has("structure")&&this._groups.push(e);this.initialize()}cleanup(){0!==this._groups.length&&(this._context&&this._context.destroy(),this._canvas=null,this._groups=[])}initialize(){const{canvas:t,groups:e}=this;if(!t||0===e.length)return;const n=new U.tfp(t,{antialias:!0}),s=e.map((t=>new z(t)));console.log("🚀 [painter-manager] morphologies =",s);const r=s.map((t=>new G(n,t))),[o,a]=function(t){const e=U.hNi.center(t.map((t=>t.somaCenter)));let n=0;for(const s of t)n=Math.max(n,s.boundingSphereRadius+U.hNi.distance(e,s.somaCenter));return[e,n]}(s);n.camera instanceof U.xNY&&(n.camera.fovy=Math.PI/2);const[i,l,c]=o;n.camera.far=10*a,n.camera.near=1,n.camera.transfo.setPosition(i,l,c),n.camera.transfo.setDistance(a),new U.pwt(n,{geo:{maxLat:(0,U.HPH)(60),minLat:(0,U.HPH)(-60)},speedZoom:25,inertiaOrbit:1e3});const u=r;n.add(new U.o57(n,{color:[0,0,0,1],depth:1}),new U.Ipk(n,{depth:U.Eg5.lessOrEqual,children:[Y(n,s[0].nodes),...u]})),n.paint()}}function Y(t,e){const n=[],s=[];for(const t of e){const{x:e,y:r,z:o}=t.center,a=t.radius;n.push(e,r,o,a);const i=(t.type-.5)/4;s.push(i,i)}return new H(t,{dataPoint:new Float32Array(n),dataUV:new Float32Array(s)})}function q({className:t,groups:e}){const n=function(){const t=k.useRef(null);return t.current||(t.current=new W),t.current}();return k.useEffect((()=>{n.groups=e}),[e]),(0,s.jsx)("div",{className:L(t,O.morphologyViewer),children:(0,s.jsx)("canvas",{ref:t=>{n.canvas=t}})})}function L(...t){return t.filter((t=>"string"==typeof t)).join(" ")}function X(){const t=r.U.data.useValue(),e=r.U.groupsToDisplay.useValue();return t?(0,s.jsxs)(V.UkC,{template:"*1",orientation:"row",children:[(0,s.jsxs)(V.UkC,{template:"*1",orientation:"column",children:[(0,s.jsx)(V.sWC,{color:"primary-1",padding:"M",children:(0,s.jsx)("strong",{children:t.name})}),(0,s.jsx)(V.sWC,{color:"neutral-3",overflow:"auto",padding:"S",maxWidth:"480px",children:(0,s.jsx)(j,{group:t})})]}),(0,s.jsx)(V.sWC,{color:"neutral-3",position:"relative",fullsize:!0,children:(0,s.jsx)(q,{groups:e})})]}):null}},7099:(t,e,n)=>{n.d(e,{A:()=>i});var s=n(1354),r=n.n(s),o=n(6314),a=n.n(o)()(r());a.push([t.id,".src-components-Group-Group-module_group_wJCTWr > div.src-components-Group-Group-module_children_cfd_Pm {\n    margin-left: 1em;\n}\n\n.src-components-Group-Group-module_group_wJCTWr summary {\n    border-radius: 0.25em;\n    color: var(--theme-color-on-primary-7);\n    background: var(--theme-color-primary-7);\n    margin: 1px 0;\n    padding: 0 1em;\n}\n","",{version:3,sources:["webpack://./src/components/Group/Group.module.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,sCAAsC;IACtC,wCAAwC;IACxC,aAAa;IACb,cAAc;AAClB",sourcesContent:[".group > div.children {\n    margin-left: 1em;\n}\n\n.group summary {\n    border-radius: 0.25em;\n    color: var(--theme-color-on-primary-7);\n    background: var(--theme-color-primary-7);\n    margin: 1px 0;\n    padding: 0 1em;\n}\n"],sourceRoot:""}]),a.locals={group:"src-components-Group-Group-module_group_wJCTWr",children:"src-components-Group-Group-module_children_cfd_Pm"};const i=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,