"use strict";(self.webpackChunkhdf5_circuits=self.webpackChunkhdf5_circuits||[]).push([[978],{1978:(t,e,i)=>{function n(t){if(s)for(const e in s)if(s[e]===t)return e;return`${t}`}i.d(e,{xNY:()=>st,tfp:()=>Ft,pwt:()=>Ut,I9j:()=>Kt,tbm:()=>ct,o57:()=>te,b5H:()=>oe,$Rn:()=>ae,Ipk:()=>qt,a6X:()=>zt,NI6:()=>ie,dLJ:()=>ee,HTX:()=>se,hNi:()=>f,ZV_:()=>Qt,HPH:()=>d,lu8:()=>ft,KQL:()=>mt,Eg5:()=>Mt});const s=document.createElement("canvas").getContext("webgl2");function r(t,e=6){const i=Math.pow(10,e),n=[];let s=0;for(const r of t){const t=(Math.round(r*i)/i).toFixed(e);s=Math.max(s,t.length),n.push(t)}return n.map((t=>t.padStart(s," ")))}var o="undefined"!=typeof Float32Array?Float32Array:Array;function a(){var t=new o(3);return o!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function h(t,e,i){var n=new o(3);return n[0]=t,n[1]=e,n[2]=i,n}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});function c(t,e,i){return t<e?e:t>i?i:t}function u(t,e,i){return(1-i)*t+i*e}a(),Math.PI;const l=Math.PI/180;function d(t){return t*l}class f extends Float32Array{static newFrom([t,e,i]){return new f(t,e,i)}static newFromMix([t,e,i],[n,s,r],o=.5){const a=1-o;return new f(a*t+o*n,a*e+o*s,a*i+o*r)}static distance(t,e){const i=e.x-t.x,n=e.y-t.y,s=e.z-t.z;return Math.hypot(i,n,s)}static center(t){const e=new f;if(0===t.length)return e;for(const i of t)e.add(i);return e.scale(1/t.length),e}constructor(t=0,e=0,i=0){if(super(3),"number"!=typeof t)return this.x=t[0],this.y=t[1],void(this.z=t[2]);this.x=t,this.y=e,this.z=i}clone(){return new f(this)}mix(t,e=.5){const i=1-e;return this.x=i*this.x+e*t.x,this.y=i*this.y+e*t.y,this.z=i*this.z+e*t.z,this}isEqual(t){const[e,i,n]=t;return e===this.x&&i===this.y&&n===this.z}isClose(t,e=1e-6){const[i,n,s]=t;return!(Math.abs(i-this.x)>e||Math.abs(n-this.y)>e||Math.abs(s-this.z)>e)}rotateAround(t,e){const i=Math.cos(e),n=Math.sin(e),[s,r,o]=this,[a,h,c]=t,u=h*o-c*r,l=c*s-a*o,d=a*r-h*s,f=(s*a+r*h+o*c)*(1-i);return this.x=s*i+u*n+a*f,this.y=r*i+l*n+h*f,this.z=o*i+d*n+c*f,this}applyMatrix(t){const{x:e,y:i,z:n}=this;return this.x=e*t.m00+i*t.m10+n*t.m20,this.y=e*t.m01+i*t.m11+n*t.m21,this.z=e*t.m02+i*t.m12+n*t.m22,this}applyQuaternion(t){var e,i,n,s,r,o,a,h,c,u,l,d,f,m,g,p,E;return e=this,i=this,s=(n=t)[0],r=n[1],o=n[2],a=n[3],h=i[0],m=r*(f=s*(c=i[1])-r*h)-o*(d=o*h-s*(u=i[2])),g=o*(l=r*u-o*c)-s*f,p=s*d-r*l,l*=E=2*a,d*=E,f*=E,m*=2,g*=2,p*=2,e[0]=h+l+m,e[1]=c+d+g,e[2]=u+f+p,this}from(t){const[e,i,n]=t;return this.x=e,this.y=i,this.z=n,this}fromOpposite(t){const[e,i,n]=t;return this.x=-e,this.y=-i,this.z=-n,this}fromMix(t,e,i){const[n,s,r]=t,[o,a,h]=e;return this.reset(u(n,o,i),u(s,a,i),u(r,h,i))}reset(t=0,e=0,i=0){return this[0]=t,this[1]=e,this[2]=i,this}distanceToLineSquared(t,e){const[i,n,s]=this,[r,o,a]=t,[h,c,u]=e,l=h*(i-r)+c*(n-o)+u*(s-a),d=i-(r+l*h),f=n-(o+l*c),m=s-(a+l*u);return d*d+f*f+m*m}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}get z(){return this[2]}set z(t){this[2]=t}add(...t){for(const e of t){const[t,i,n]=e;this[0]+=t,this[1]+=i,this[2]+=n}return this}addWithScale(t,e){return this[0]+=t.x*e,this[1]+=t.y*e,this[2]+=t.z*e,this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]+this[2]*t[2]}get size(){return Math.hypot(this[0],this[1],this[2])}normalize(){const t=this[0]*this[0]+this[1]*this[1]+this[2]*this[2];return 0===t?this:this.scale(1/Math.sqrt(t))}cross(t){const[e,i,n]=this,[s,r,o]=t;return this[0]=i*o-r*n,this[1]=n*s-o*e,this[2]=e*r-s*i,this}random(){return this[0]=Math.random()-.5,this[1]=Math.random()-.5,this[2]=Math.random()-.5,this}debug(t="vec3"){const{x:e,y:i,z:n}=this,s=[e,i,n].map((t=>t.toFixed(6)));console.log(`${t}:   `,s.join(" | "),"   length:",Math.hypot(e,i,n))}}f.X=new f(1,0,0),f.Y=new f(0,1,0),f.Z=new f(0,0,1);class m extends Float32Array{static fromSlerp([t,e,i,n=0],[s,r,o,a=0],h=.5){const c=1-h;return new m(c*t+h*s,c*e+h*r,c*i+h*o,c*n+h*a)}constructor(t=0,e=0,i=0,n=1){if(super(4),t instanceof m)return this.x=t.x,this.y=t.y,this.z=t.z,void(this.w=t.w);if(t instanceof f)return this.x=t.x,this.y=t.y,this.z=t.z,void(this.w=n);if(Array.isArray(t)){if("number"==typeof e){const[i,n,s]=t;return this.x=null!=i?i:0,this.y=null!=n?n:0,this.z=null!=s?s:0,void(this.w=e)}{const[e,i,n,s]=t;return this.x=null!=e?e:0,this.y=null!=i?i:0,this.z=null!=n?n:0,void(this.w=null!=s?s:1)}}this.x=t,this.y=e,this.z=i,this.w=n}reset(t=0,e=0,i=0,n=1){return this.x=t,this.y=e,this.z=i,this.w=n,this}from(t){const[e,i,n,s]=t;return this.x=e,this.y=i,this.z=n,this.w=s,this}fromVec3(t){const[e,i,n]=t;return this.x=e,this.y=i,this.z=n,this}clone(){return new m(this)}mix(t,e=.5){return this.x=(1-e)*this.x+e*t.x,this.y=(1-e)*this.y+e*t.y,this.z=(1-e)*this.z+e*t.z,this.w=(1-e)*this.w+e*t.w,this}isEqual(t){const[e,i,n,s]=t;return e===this.x&&i===this.y&&n===this.z&&s===this.w}isClose({x:t,y:e,z:i,w:n},s=1e-6){return!(Math.abs(t-this.x)>s||Math.abs(e-this.y)>s||Math.abs(i-this.z)>s||Math.abs(n-this.w)>s)}applyMatrix(t){const{x:e,y:i,z:n,w:s}=this;return this.x=e*t.m00+i*t.m01+n*t.m02+s*t.m03,this.y=e*t.m10+i*t.m11+n*t.m12+s*t.m13,this.z=e*t.m20+i*t.m21+n*t.m22+s*t.m23,this.w=e*t.m30+i*t.m31+n*t.m32+s*t.m33,this}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}get z(){return this[2]}set z(t){this[2]=t}get w(){return this[3]}set w(t){this[3]=t}add(...t){for(const e of t)this[0]+=e[0],this[1]+=e[1],this[2]+=e[2],e.length>3&&(this[3]+=e[3]);return this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],t.length>3&&(this[3]-=t[3]),this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this[3]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]+this[2]*t[2]+this[3]*t[3]}get size(){return Math.hypot(this[0],this[1],this[2],this[3])}normalize(){const t=this[0]*this[0]+this[1]*this[1]+this[2]*this[2]+this[3]*this[3];return 0===t?this:this.scale(1/Math.sqrt(t))}debug(t="vec4"){const{x:e,y:i,z:n,w:s}=this,r=[e,i,n,s].map((t=>t.toFixed(6)));console.log(`${t}:   `,r.join(" | "),`  (length = ${this.size})`)}}m.X=new m(1,0,0,0),m.Y=new m(0,1,0,0),m.Z=new m(0,0,1,0),m.W=new m(0,0,0,1);class g extends Float32Array{constructor(t=1,e=0,i=0,n=0,s=0,r=1,o=0,a=0,h=0,c=0,u=1,l=0,d=0,f=0,m=0,g=1){super("number"==typeof t?[t,e,i,n,s,r,o,a,h,c,u,l,d,f,m,g]:t)}reset(t=m.X,e=m.Y,i=m.Z,n=m.W){const[s,r,o,a]=t,[h,c,u,l]=e,[d,f,g,p]=i,[E,A,_,x]=n;return this.m00=s,this.m01=r,this.m02=o,this.m03=a,this.m10=h,this.m11=c,this.m12=u,this.m13=l,this.m20=d,this.m21=f,this.m22=g,this.m23=p,this.m30=E,this.m31=A,this.m32=_,this.m33=x,this}multiply(t){return function(t,e,i){var n=e[0],s=e[1],r=e[2],o=e[3],a=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=e[9],f=e[10],m=e[11],g=e[12],p=e[13],E=e[14],A=e[15],_=i[0],x=i[1],v=i[2],y=i[3];t[0]=_*n+x*a+v*l+y*g,t[1]=_*s+x*h+v*d+y*p,t[2]=_*r+x*c+v*f+y*E,t[3]=_*o+x*u+v*m+y*A,_=i[4],x=i[5],v=i[6],y=i[7],t[4]=_*n+x*a+v*l+y*g,t[5]=_*s+x*h+v*d+y*p,t[6]=_*r+x*c+v*f+y*E,t[7]=_*o+x*u+v*m+y*A,_=i[8],x=i[9],v=i[10],y=i[11],t[8]=_*n+x*a+v*l+y*g,t[9]=_*s+x*h+v*d+y*p,t[10]=_*r+x*c+v*f+y*E,t[11]=_*o+x*u+v*m+y*A,_=i[12],x=i[13],v=i[14],y=i[15],t[12]=_*n+x*a+v*l+y*g,t[13]=_*s+x*h+v*d+y*p,t[14]=_*r+x*c+v*f+y*E,t[15]=_*o+x*u+v*m+y*A}(this,this,t),this}invert(t){var e,i,n,s,r,o,a,h,c,u,l,d,f,m,g,p,E,A,_,x,v,y,b,R,T,L,S,M,C,w,P;return e=this,n=(i=null!=t?t:this)[0],s=i[1],r=i[2],o=i[3],a=i[4],h=i[5],c=i[6],u=i[7],l=i[8],d=i[9],f=i[10],m=i[11],g=i[12],p=i[13],E=i[14],(P=(_=n*h-s*a)*(w=f*(A=i[15])-m*E)-(x=n*c-r*a)*(C=d*A-m*p)+(v=n*u-o*a)*(M=d*E-f*p)+(y=s*c-r*h)*(S=l*A-m*g)-(b=s*u-o*h)*(L=l*E-f*g)+(R=r*u-o*c)*(T=l*p-d*g))&&(P=1/P,e[0]=(h*w-c*C+u*M)*P,e[1]=(r*C-s*w-o*M)*P,e[2]=(p*R-E*b+A*y)*P,e[3]=(f*b-d*R-m*y)*P,e[4]=(c*S-a*w-u*L)*P,e[5]=(n*w-r*S+o*L)*P,e[6]=(E*v-g*R-A*x)*P,e[7]=(l*R-f*v+m*x)*P,e[8]=(a*C-h*S+u*T)*P,e[9]=(s*S-n*C-o*T)*P,e[10]=(g*b-p*v+A*_)*P,e[11]=(d*v-l*b-m*_)*P,e[12]=(h*L-a*M-c*T)*P,e[13]=(n*M-s*L+r*T)*P,e[14]=(p*x-g*y-E*_)*P,e[15]=(l*y-d*x+f*_)*P),this}get translation(){const{m03:t,m13:e,m23:i}=this;return new f(t,e,i)}set translation(t){const[e,i,n]=t;this.m03=e,this.m13=i,this.m23=n}toTanslation(t){return t.x=this.m03,t.y=this.m13,t.z=this.m23,this}translate(t){const[e,i,n]=t;return this.m03+=e,this.m13+=i,this.m23+=n,this}from(t){var e;for(let i=0;i<this.length;i++)this[i]=null!==(e=t[i])&&void 0!==e?e:0;return this}fromMat3(t){return this.m00=t.m00,this.m01=t.m01,this.m02=t.m02,this.m10=t.m10,this.m11=t.m11,this.m12=t.m12,this.m20=t.m20,this.m21=t.m21,this.m22=t.m22,this}toAxes(t,e,i){return this.toAxisX(t),this.toAxisY(e),this.toAxisZ(i)}toAxisX(t){return t.x=this.m00,t.y=this.m01,t.z=this.m02,this}toAxisY(t){return t.x=this.m10,t.y=this.m11,t.z=this.m12,this}toAxisZ(t){return t.x=this.m20,t.y=this.m21,t.z=this.m22,this}fromQuat({x:t,y:e,z:i,w:n}){return function(t,e){var i=e[0],n=e[1],s=e[2],r=e[3],o=i+i,a=n+n,h=s+s,c=i*o,u=n*o,l=n*a,d=s*o,f=s*a,m=s*h,g=r*o,p=r*a,E=r*h;t[0]=1-l-m,t[1]=u+E,t[2]=d-p,t[3]=0,t[4]=u-E,t[5]=1-c-m,t[6]=f+g,t[7]=0,t[8]=d+p,t[9]=f-g,t[10]=1-c-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1}(this,[t,e,i,n]),this}get m00(){return this[p]}set m00(t){this[p]=t}get m10(){return this[E]}set m10(t){this[E]=t}get m20(){return this[A]}set m20(t){this[A]=t}get m30(){return this[_]}set m30(t){this[_]=t}get m01(){return this[x]}set m01(t){this[x]=t}get m11(){return this[v]}set m11(t){this[v]=t}get m21(){return this[y]}set m21(t){this[y]=t}get m31(){return this[b]}set m31(t){this[b]=t}get m02(){return this[R]}set m02(t){this[R]=t}get m12(){return this[T]}set m12(t){this[T]=t}get m22(){return this[L]}set m22(t){this[L]=t}get m32(){return this[S]}set m32(t){this[S]=t}get m03(){return this[M]}set m03(t){this[M]=t}get m13(){return this[C]}set m13(t){this[C]=t}get m23(){return this[w]}set m23(t){this[w]=t}get m33(){return this[P]}set m33(t){this[P]=t}debug(t="Mat4"){const e=r([this.m00,this.m01,this.m02,this.m03]),i=r([this.m10,this.m11,this.m12,this.m13]),n=r([this.m20,this.m21,this.m22,this.m23]),s=r([this.m30,this.m31,this.m32,this.m33]);console.log(t),console.log("   ",e.join(" | ")),console.log("   ",i.join(" | ")),console.log("   ",n.join(" | ")),console.log("   ",s.join(" | "))}}const p=0,E=1,A=2,_=3,x=4,v=5,y=6,b=7,R=8,T=9,L=10,S=11,M=12,C=13,w=14,P=15;class N extends Float32Array{constructor(t=1,e=0,i=0,n=0,s=1,r=0,o=0,a=0,h=1){if("number"==typeof t&&"number"==typeof e&&"number"==typeof i)super([t,e,i,n,s,r,o,a,h]);else if((t instanceof f||t instanceof m)&&(e instanceof f||e instanceof m)&&(i instanceof f||i instanceof m)){const n=t,s=e,r=i;super([n.x,n.y,n.z,s.x,s.y,s.z,r.x,r.y,r.z])}else if(t instanceof N){const e=t;super([e.m00,e.m10,e.m20,e.m01,e.m11,e.m21,e.m02,e.m12,e.m22])}else{if(!(t instanceof g))throw console.error("[TgdMat3]",arguments),new Error("Invalid TgdMat3 initialization!");{const e=t;super([e.m00,e.m10,e.m20,e.m01,e.m11,e.m21,e.m02,e.m12,e.m22])}}}multiply(t){return function(t,e,i){var n=e[0],s=e[1],r=e[2],o=e[3],a=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=i[0],f=i[1],m=i[2],g=i[3],p=i[4],E=i[5],A=i[6],_=i[7],x=i[8];t[0]=d*n+f*o+m*c,t[1]=d*s+f*a+m*u,t[2]=d*r+f*h+m*l,t[3]=g*n+p*o+E*c,t[4]=g*s+p*a+E*u,t[5]=g*r+p*h+E*l,t[6]=A*n+_*o+x*c,t[7]=A*s+_*a+x*u,t[8]=A*r+_*h+x*l}(this,this,t),this}transpose(){let t=this.m10;return this.m10=this.m01,this.m01=t,t=this.m20,this.m20=this.m02,this.m02=t,t=this.m21,this.m21=this.m12,this.m12=t,this}fromQuat({x:t,y:e,z:i,w:n}){return function(t,e){var i=e[0],n=e[1],s=e[2],r=e[3],o=i+i,a=n+n,h=s+s,c=i*o,u=n*o,l=n*a,d=s*o,f=s*a,m=s*h,g=r*o,p=r*a,E=r*h;t[0]=1-l-m,t[3]=u-E,t[6]=d+p,t[1]=u+E,t[4]=1-c-m,t[7]=f-g,t[2]=d-p,t[5]=f+g,t[8]=1-c-l}(this,[t,e,i,n]),this}toAxes(t,e,i){return this.toAxisX(t),this.toAxisY(e),this.toAxisZ(i)}toAxisX(t){return t.x=this.m00,t.y=this.m01,t.z=this.m02,this}toAxisY(t){return t.x=this.m10,t.y=this.m11,t.z=this.m12,this}toAxisZ(t){return t.x=this.m20,t.y=this.m21,t.z=this.m22,this}scale(t){return this[0]*=t,this[1]*=t,this[2]*=t,this[3]*=t,this[4]*=t,this[5]*=t,this[6]*=t,this[7]*=t,this[8]*=t,this}get m00(){return this[O]}set m00(t){this[O]=t}get m10(){return this[F]}set m10(t){this[F]=t}get m20(){return this[U]}set m20(t){this[U]=t}get m01(){return this[B]}set m01(t){this[B]=t}get m11(){return this[D]}set m11(t){this[D]=t}get m21(){return this[I]}set m21(t){this[I]=t}get m02(){return this[k]}set m02(t){this[k]=t}get m12(){return this[G]}set m12(t){this[G]=t}get m22(){return this[W]}set m22(t){this[W]=t}debug(t="Mat3"){const e=r([this.m00,this.m01,this.m02]),i=r([this.m10,this.m11,this.m12]),n=r([this.m20,this.m21,this.m22]);console.log(t,this.slice()),console.log("   ",e.join(" | ")),console.log("   ",i.join(" | ")),console.log("   ",n.join(" | "))}}const O=0,F=1,U=2,B=3,D=4,I=5,k=6,G=7,W=8;function z(){var t=new o(4);return o!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function H(t,e){var i,n=e[0]+e[4]+e[8];if(n>0)i=Math.sqrt(n+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{var s=0;e[4]>e[0]&&(s=1),e[8]>e[3*s+s]&&(s=2);var r=(s+1)%3,o=(s+2)%3;i=Math.sqrt(e[3*s+s]-e[3*r+r]-e[3*o+o]+1),t[s]=.5*i,i=.5/i,t[3]=(e[3*r+o]-e[3*o+r])*i,t[r]=(e[3*r+s]+e[3*s+r])*i,t[o]=(e[3*o+s]+e[3*s+o])*i}return t}Float32Array,function(){var t;t=new o(4),o!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0)}();var X,$,Z=(a(),h(1,0,0),h(0,1,0),z(),z(),X=new o(9),o!=Float32Array&&(X[1]=0,X[2]=0,X[3]=0,X[5]=0,X[6]=0,X[7]=0),X[0]=1,X[4]=1,X[8]=1,$=X,function(t,e,i,n){return $[0]=i[0],$[3]=i[1],$[6]=i[2],$[1]=n[0],$[4]=n[1],$[7]=n[2],$[2]=-e[0],$[5]=-e[1],$[8]=-e[2],function(t,e){var i=e[0],n=e[1],s=e[2],r=e[3],o=i*i+n*n+s*s+r*r;return o>0&&(o=1/Math.sqrt(o)),t[0]=i*o,t[1]=n*o,t[2]=s*o,t[3]=r*o,t}(t,H(t,$))});const K=new f,j=new f,Y=new f,V=new N;class Q extends m{static fromMatrix(t){const e=new Q;return e.fromMatrix(t),e}static fromFace(t){return(new Q).face(t)}static fromSlerp(t,e,i){return(new Q).fromSlerp(t,e,i)}constructor(t=0,e=0,i=0,n=1){if(Array.isArray(t)){const[e,i,n,s]=t;super(e,i,n,s)}else"number"==typeof t?super(t,e,i,n):super(t)}clone(){return new Q(this)}multiply(t){return function(t,e,i){var n=e[0],s=e[1],r=e[2],o=e[3],a=i[0],h=i[1],c=i[2],u=i[3];t[0]=n*u+o*a+s*c-r*h,t[1]=s*u+o*h+r*a-n*c,t[2]=r*u+o*c+n*h-s*a,t[3]=o*u-n*a-s*h-r*c}(this,this,t),this}fromSlerp(t,e,i){const[n,s,r,o]=t;let a,h,[c,u,l,d]=e,f=n*c+s*u+r*l+o*d;if(f<0&&(f=-f,c=-c,u=-u,l=-l,d=-d),1-f>1e-6){const t=Math.acos(f),e=1/Math.sin(t);a=Math.sin((1-i)*t)*e,h=Math.sin(i*t)*e}else a=1-i,h=i;return this.x=a*n+h*c,this.y=a*s+h*u,this.z=a*r+h*l,this.w=a*o+h*d,this}fromAxesTransposed([t,e,i],[n,s,r],[o,a,h]){return this.fromAxes([t,n,o],[e,s,a],[i,r,h])}fromAxes(t,e,i){const[n,s,r]=i;return Z(this,[-n,-s,-r],t,e),this}fromMatrix(t){return H(this,t),this}rotateAround(t,e){return V.fromQuat(this).toAxes(K,j,Y),K.rotateAround(t,e),j.rotateAround(t,e),Y.rotateAround(t,e),this.fromAxes(K,j,Y)}static rotateAroundX(t){return(new Q).rotateAroundX(t)}rotateAroundX(t){return this.rotateAround(f.X,t)}static rotateAroundY(t){return(new Q).rotateAroundY(t)}rotateAroundY(t){return this.rotateAround(f.Y,t)}static rotateAroundZ(t){return(new Q).rotateAroundZ(t)}rotateAroundZ(t){return this.rotateAround(f.Z,t)}toAxisX(t){const[e,i,n,s]=this,r=e+e,o=i+i,a=n+n,h=i*r,c=i*o,u=n*r,l=n*a,d=s*o,f=s*a;return t.x=1-c-l,t.y=h-f,t.z=u+d,t}toAxisY(t){const[e,i,n,s]=this,r=e+e,o=n+n,a=e*r,h=i*r,c=n*(i+i),u=n*o,l=s*r,d=s*o;return t.x=h+d,t.y=1-a-u,t.z=c-l,t}toAxisZ(t){const{x:e,y:i,z:n,w:s}=this,r=e+e,o=i+i,a=e*r,h=i*o,c=n*r,u=n*o,l=s*r,d=s*o;return t.x=c-d,t.y=u+l,t.z=1-a-h,t}toMatrix(t){const e=new f,i=new f,n=new f;return this.toAxisX(e),this.toAxisY(i),this.toAxisZ(n),t.m00=e.x,t.m01=e.y,t.m02=e.z,t.m10=i.x,t.m11=i.y,t.m12=i.z,t.m20=n.x,t.m21=n.y,t.m22=n.z,t}invert(){return function(t,e){var i=e[0],n=e[1],s=e[2],r=e[3],o=i*i+n*n+s*s+r*r,a=o?1/o:0;t[0]=-i*a,t[1]=-n*a,t[2]=-s*a,t[3]=r*a}(this,this),this}face(t="+X+Y+Z"){const[e,i,n,s]=tt[t];return this.x=e,this.y=i,this.z=n,this.w=s,this}}const q=Math.sqrt(2)/2,J=.5,tt={"-X-Y+Z":[0,0,1,0],"-X-Z-Y":[0,-q,+q,0],"-X+Y-Z":[0,1,0,0],"-X+Z+Y":[0,+q,+q,0],"-Y-X-Z":[+q,-q,0,0],"-Y-Z+X":[+J,-J,+J,-J],"-Y+X+Z":[0,0,-q,+q],"-Y+Z-X":[+J,-J,-J,+J],"-Z-X+Y":[+J,-J,-J,-J],"-Z-Y-X":[-q,0,+q,0],"-Z+X-Y":[+J,+J,-J,+J],"-Z+Y+X":[0,+q,0,+q],"+X-Y-Z":[1,0,0,0],"+X-Z+Y":[-q,0,0,+q],"+X+Y+Z":[0,0,0,1],"+X+Z-Y":[+q,0,0,+q],"+Y-X+Z":[0,0,+q,+q],"+Y-Z-X":[-J,-J,+J,+J],"+Y+X-Z":[+q,+q,0,0],"+Y+Z+X":[+J,+J,+J,+J],"+Z-X-Y":[+J,-J,+J,+J],"+Z-Y+X":[+q,0,+q,0],"+Z+X+Y":[+J,+J,+J,-J],"+Z+Y-X":[0,-q,0,+q]};class et{constructor(t){var e,i,n,s;this._matrix=new g(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this._position=new f(0,0,0),this._orientation=new Q(0,0,0,1),this._scale=new f(1,1,1),this._distance=0,this.tmpVec3=new f,this._axisX=new f,this._axisY=new f,this._axisZ=new f,this.dirty=!1,t&&(t instanceof et?this.from(t):(this.distance=null!==(e=t.distance)&&void 0!==e?e:this.distance,this.position=null!==(i=t.position)&&void 0!==i?i:this.position,this.orientation=null!==(n=t.orientation)&&void 0!==n?n:this.orientation,this.scale=null!==(s=t.scale)&&void 0!==s?s:this.scale),this.updateMatrix())}clone(){return new et(this)}from(t){var e,i,n,s;return this.position=null!==(e=t.position)&&void 0!==e?e:this.position,this.orientation=null!==(i=t.orientation)&&void 0!==i?i:this.orientation,this.scale=null!==(n=t.scale)&&void 0!==n?n:this.scale,this.distance=null!==(s=t.distance)&&void 0!==s?s:this.distance,this.updateMatrix(),this}fromMatrix(t){return this.matrix.from(t),this.dirty=!1,this}get matrix(){return this.updateIfNeeded(),this._matrix}set matrix(t){this._matrix.from(t),this.dirty=!1}get axisX(){return this.updateIfNeeded(),this._axisX}get axisY(){return this.updateIfNeeded(),this._axisY}get axisZ(){return this.updateIfNeeded(),this._axisZ}updateIfNeeded(){if(!this.dirty)return;const t=this._matrix;!function(t,e,i,n){var s=e[0],r=e[1],o=e[2],a=e[3],h=s+s,c=r+r,u=o+o,l=s*h,d=s*c,f=s*u,m=r*c,g=r*u,p=o*u,E=a*h,A=a*c,_=a*u,x=n[0],v=n[1],y=n[2];t[0]=(1-(m+p))*x,t[1]=(d+_)*x,t[2]=(f-A)*x,t[3]=0,t[4]=(d-_)*v,t[5]=(1-(l+p))*v,t[6]=(g+E)*v,t[7]=0,t[8]=(f+A)*y,t[9]=(g-E)*y,t[10]=(1-(l+m))*y,t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1}(t,this._orientation,this._position,this._scale),t.toAxisX(this._axisX),t.toAxisY(this._axisY),t.toAxisZ(this._axisZ);const e=this._distance;0!==e&&(this.tmpVec3.reset(0,0,e).applyQuaternion(this._orientation),t.m03+=this.tmpVec3.x,t.m13+=this.tmpVec3.y,t.m23+=this.tmpVec3.z),this.dirty=!1}reset(){return this.orientation.reset(),this.position.reset(),this.scale.reset(),this.dirty=!0,this}get distance(){return this._distance}set distance(t){this._distance=t,this.updateMatrix()}setDistance(t){return this.distance=t,this}get position(){return this.updateMatrix(),this._position}set position(t){this.updateMatrix(),this._position.from(t)}setPosition(t,e,i){return this.updateMatrix(),"number"==typeof t?this._position.reset(t,e,i):this._position.reset(t[0],t[1],t[2]),this}get actualPosition(){const t=this.distance;return 0===t?this.position:this.tmpVec3.from(this.position).addWithScale(this.axisZ,t)}get scale(){return this._scale}set scale(t){this.updateMatrix(),this._scale.from(t)}setScale(t,e,i){var n;return this.updateMatrix(),"number"==typeof t?this._scale.reset(t,null!=e?e:t,null!==(n=null!=i?i:e)&&void 0!==n?n:t):this._scale.reset(t[0],t[1],t[2]),this}get orientation(){return this.updateMatrix(),this._orientation}set orientation(t){this._orientation.from(t),this.updateMatrix()}setOrientation(t,e,i,n){return"number"==typeof t?this._orientation.reset(t,e,i,n):this._orientation.reset(t[0],t[1],t[2],t[3]),this.updateMatrix(),this}setEulerRotation(t,e,i){return function(t,e,i,n){var s=.5*Math.PI/180;e*=s,i*=s,n*=s;var r=Math.sin(e),o=Math.cos(e),a=Math.sin(i),h=Math.cos(i),c=Math.sin(n),u=Math.cos(n);t[0]=r*h*u-o*a*c,t[1]=o*a*u+r*h*c,t[2]=o*h*c-r*a*u,t[3]=o*h*u+r*a*c}(this._orientation,t,e,i),this.updateMatrix(),this}orbitAroundX(t){return this._orientation.rotateAround(f.X,t),this.updateMatrix(),this}orbitAroundY(t){return this._orientation.rotateAround(f.Y,t),this.updateMatrix(),this}orbitAroundZ(t){return this._orientation.rotateAround(f.Z,t),this.updateMatrix(),this}moveAlongAxes(t,e,i){return this.position.addWithScale(this.axisX,t).addWithScale(this.axisY,e).addWithScale(this.axisZ,i),this.updateMatrix(),this}debug(t="Transfo"){console.log(t),console.log("Distance:",this.distance),this.orientation.debug("Orientation"),this.scale.debug("Scale"),this.position.debug("Position"),this.matrix.debug("Matrix")}updateMatrix(){this.dirty=!0}}class it extends Float32Array{static fromMix(t,e,i=.5){const n=1-i,s=n*t.x+i*e.x,r=n*t.y+i*e.y;return new it(s,r)}static distance(t,e){const i=e.x-t.x,n=e.y-t.y;return Math.hypot(i,n)}constructor(t=0,e=0){if(super(2),"number"!=typeof t)return this.x=t[0],void(this.y=t[1]);this.x=t,this.y=e}clone(){return new it(this)}mix(t,e=.5){return this.x=(1-e)*this.x+e*t.x,this.y=(1-e)*this.y+e*t.y,this}isEqual(t){const[e,i]=t;return e===this.x&&i===this.y}isClose(t,e=1e-6){const[i,n]=t;return!(Math.abs(i-this.x)>e||Math.abs(n-this.y)>e)}from(t){const[e,i]=t;return this.x=e,this.y=i,this}fromMix(t,e,i){const[n,s]=t,[r,o]=e;return this.reset(u(n,r,i),u(s,o,i))}reset(t,e){return this[0]=t,this[1]=e,this}get x(){return this[0]}set x(t){this[0]=t}get y(){return this[1]}set y(t){this[1]=t}add(...t){for(const e of t)this[0]+=e.x,this[1]+=e.y;return this}addWithScale(t,e){return this[0]+=t.x*e,this[1]+=t.y*e,this}subtract(t){return this[0]-=t[0],this[1]-=t[1],this}scale(t){return this[0]*=t,this[1]*=t,this}dot(t){return this[0]*t[0]+this[1]*t[1]}get size(){return Math.hypot(this[0],this[1])}normalize(){const t=this[0]*this[0]+this[1]*this[1];return 0===t?this:this.scale(1/Math.sqrt(t))}random(){return this[0]=Math.random()-.5,this[1]=Math.random()-.5,this}debug(t="vec2"){const{x:e,y:i}=this,n=[e,i].map((t=>t.toFixed(6)));console.log(`${t}:   `,n.join(" | "),"   length:",Math.hypot(e,i))}}class nt{constructor(t={}){var e,i,n,s;this._screenWidth=1920,this._screenHeight=1080,this._screenAspectRatio=1920/1080,this._dirtyModelView=!0,this.dirtyModelViewInverse=!0,this._dirtyAxis=!0,this._dirtyProjection=!0,this.dirtyProjectionInverse=!0,this._near=.001,this._far=1/0,this._matrixModelView=new g,this._matrixProjectionInverse=new g,this._zoom=1,this.name=null!==(e=t.name)&&void 0!==e?e:"TgdCamera#"+nt.incrementalId++,this._near=null!==(i=t.near)&&void 0!==i?i:.001,this._far=null!==(n=t.far)&&void 0!==n?n:1e6,this.transfo=new et(t.transfo),this.zoom=null!==(s=t.zoom)&&void 0!==s?s:1}getCurrentState(){return{distance:this.transfo.distance,orientation:this.transfo.orientation.clone(),spaceHeightAtTarget:this.spaceHeightAtTarget,position:this.transfo.position.clone(),zoom:this.zoom}}get near(){return this._near}set near(t){t!==this._near&&(this._near=t,this.dirtyProjection=!0)}get far(){return this._far}set far(t){t!==this._far&&(this._far=t,this.dirtyProjection=!0)}get screenAspectRatio(){return this._screenAspectRatio}get screenWidth(){return this._screenWidth}set screenWidth(t){t!==this._screenWidth&&(this._screenWidth=t,this.dirtyProjection=!0,this._screenAspectRatio=this._screenWidth/this._screenHeight)}get screenHeight(){return this._screenHeight}set screenHeight(t){t!==this._screenHeight&&(this._screenHeight=t,this.dirtyProjection=!0,this._screenAspectRatio=this._screenWidth/this._screenHeight)}get spaceHeightAtTarget(){return this.getSpaceHeightAtTarget()}set spaceHeightAtTarget(t){this.setSpaceHeightAtTarget(t)}get spaceWidthAtTarget(){return this.screenWidth*this.spaceHeightAtTarget/this.screenHeight}set spaceWidthAtTarget(t){this.setSpaceHeightAtTarget(t*this.screenHeight/this.screenWidth)}from(t){const{zoom:e,screenWidth:i,screenHeight:n}=t;return this.transfo.from(t.transfo),this.zoom=e,this.screenWidth=i,this.screenHeight=n,this.dirtyModelView=!0,this.copyProjectionFrom(t),this}fromTransfo(t){return this.transfo.from(t),this.dirtyModelView=!0,this}get matrixModelView(){return this._matrixModelView.invert(this.transfo.matrix)}get matrixProjectionInverse(){return this.dirtyProjectionInverse&&(this._matrixProjectionInverse.invert(this.matrixProjection),this.dirtyProjectionInverse=!1),this._matrixProjectionInverse}get zoom(){return this._zoom}set zoom(t){this._zoom!==t&&(this._zoom=t,this.transfo.setScale(t,t,t),this.dirtyModelView=!0)}toCode(t){return`// ${null!=t?t:"TgdCamera"}\n// Not implemented yet`}debug(t){const e=`${this.name}: ${null!=t?t:""}`;console.log("TgdCamera",e),console.log("    Distance:",this.transfo.distance),console.log("    Zoom:",this.zoom),this.transfo.orientation.debug("   Orientation"),this.transfo.position.debug("    Target"),this.transfo.actualPosition.debug("    Actual position"),this.matrixModelView.debug("    MatrixModelView"),this.matrixProjection.debug("    MatrixProjection")}get dirtyModelView(){return this._dirtyModelView}set dirtyModelView(t){this._dirtyModelView=t,t&&(this.dirtyModelViewInverse=!0)}get dirtyProjection(){return this._dirtyProjection}set dirtyProjection(t){this._dirtyProjection=t,t&&(this.dirtyProjectionInverse=!0)}}nt.incrementalId=1;class st extends nt{constructor(t={}){var e;super(t),this._matrixProjection=new g,this._fovy=Math.PI/4,this._ray={origin:new f,direction:new f},this._fovy=null!==(e=t.fovy)&&void 0!==e?e:Math.PI/4}copyProjectionFrom(t){return this.fovy=t.fovy,this.near=t.near,this.far=t.far,this}castRay(t,e){const{transfo:i}=this,{origin:n,direction:s}=this._ray;n.from(i.actualPosition);const r=Math.atan(.5*this.fovy),o=r*this.screenAspectRatio;return s.fromOpposite(i.axisZ).addWithScale(i.axisX,o*t).addWithScale(i.axisY,r*e).normalize(),this._ray}get fovy(){return this._fovy}set fovy(t){t!==this._fovy&&(this._fovy=t,this.dirtyProjection=!0)}get matrixProjection(){return this.updateProjectionIfNeeded(),this._matrixProjection}getSpaceHeightAtTarget(){return 2*Math.tan(.5*this.fovy)*this.transfo.distance}setSpaceHeightAtTarget(t){this.transfo.setDistance(t/(2*Math.tan(.5*this.fovy)))}updateProjectionIfNeeded(){if(!this.dirtyProjection)return;const t=this._fovy,e=this.screenAspectRatio,i=this._near,n=this._far,s=this._matrixProjection;(function(t,e,i,n,s){var r,o=1/Math.tan(e/2);t[0]=o/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=s&&s!==1/0?(r=1/(n-s),t[10]=(s+n)*r,t[14]=2*s*n*r):(t[10]=-1,t[14]=-2*n)})(s,t,e,i,n),s[0]*=this.zoom,s[5]*=this.zoom,this.dirtyProjection=!0}toCode(t){const e=[];return t&&e.push(`// ${t}`),e.push("const camera = new TgdCameraPerspective({"),this.name&&e.push(`  name: ${JSON.stringify(this.name)},`),e.push(`  fovy: ${this._fovy},`),e.push(`  near: ${this._near},`),e.push(`  far: ${this._far},`),e.push(`  zoom: ${this.zoom},`),e.push("  transfo: {"),e.push(`  distance: ${this.transfo.distance},`),e.push(`    position: ${JSON.stringify([...this.transfo.position])},`),e.push(`    orientation: ${JSON.stringify([...this.transfo.orientation])},`),e.push(`    scale: ${JSON.stringify([...this.transfo.scale])},`),e.push("  }"),e.push("}"),e.join("\n")}}class rt{constructor(){this.listeners=new Set}addListener(t){this.listeners.add(t)}removeListener(t){this.listeners.delete(t)}dispatch(t){for(const e of this.listeners)e(t)}}class ot{constructor(){this.eventKeyPress=new rt,this.keysDown=new Set,this.keysUp=new Set,this.attached=!1,this.handleKeyDown=t=>{this.keysDown.add(t.key),this.keysUp.delete(t.key)},this.handleKeyUp=t=>{this.keysDown.delete(t.key),this.keysUp.add(t.key),this.eventKeyPress.dispatch(t)},document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),this.attached=!0}detach(){this.attached&&(document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp),this.attached=!1)}isUp(...t){return!this.isDown(...t)}isDown(...t){for(const e of t)if(!this.keysDown.has(e))return!1;return!0}hasClicked(t){return!!this.keysUp.has(t)&&(this.keysUp.delete(t),!0)}}class at{constructor(t){this.canvas=t,this.eventTap=new rt,this.eventMoveStart=new rt,this.eventMove=new rt,this.eventMoveEnd=new rt,this.eventZoom=new rt,this.tapDelay=300,this.controlKeys={altKey:!1,ctrlKey:!1,metaKey:!1,shiftKey:!1},this.start={x:0,y:0,t:0,fingersCount:1},this.current={x:0,y:0,t:0,fingersCount:1},this.previous={x:0,y:0,t:0,fingersCount:1},this.pointerEvent=null,this.handleContextMenu=t=>{t.preventDefault()},this.handleCanvasWheel=t=>{let e=t.deltaX+t.deltaY+t.deltaZ;e=e>0?1:-1,this.eventZoom.dispatch(Object.assign({current:this.getPoint(t),direction:e,preventDefault:()=>t.preventDefault()},this.controlKeys))},this.handlePointerDown=t=>{if(!t.isPrimary)return;this.canvas.setPointerCapture(t.pointerId),t.preventDefault(),t.stopPropagation(),this.pointerEvent=t;const e=this.getPoint(t);this.start=this.current=this.previous=e,this.eventMoveStart.dispatch(Object.assign({start:e,current:e,previous:e},this.controlKeys))},this.handlePointerMove=t=>{t.isPrimary&&this.pointerEvent&&this.canvas&&(this.previous=this.current,this.current=this.getPoint(t),this.eventMove.dispatch(Object.assign({start:this.start,current:this.current,previous:this.previous},this.controlKeys)))},this.handlePointerUp=t=>{t.isPrimary&&this.pointerEvent&&(t.preventDefault(),this.current=this.getPoint(t),this.eventMoveEnd.dispatch(Object.assign({start:this.start,current:this.current,previous:this.previous},this.controlKeys)),this.pointerEvent=null,t.timeStamp-this.start.t<this.tapDelay&&this.eventTap.dispatch(Object.assign(Object.assign({},this.start),this.controlKeys)))},t.addEventListener("pointerdown",this.handlePointerDown,!0),t.addEventListener("wheel",this.handleCanvasWheel),t.addEventListener("contextmenu",this.handleContextMenu),t.addEventListener("pointermove",this.handlePointerMove),t.addEventListener("pointerup",this.handlePointerUp)}isTouching(t){return!!this.pointerEvent&&(!t||t(this.current))}detach(){const{canvas:t}=this;t&&(t.removeEventListener("pointerdown",this.handlePointerDown),t.removeEventListener("wheel",this.handleCanvasWheel),t.removeEventListener("contextmenu",this.handleContextMenu),t.removeEventListener("pointermove",this.handlePointerMove),t.removeEventListener("pointerup",this.handlePointerUp))}getPoint(t){this.controlKeys={altKey:t.altKey||2===t.buttons,ctrlKey:t.ctrlKey,metaKey:t.metaKey,shiftKey:t.shiftKey};const{left:e,top:i,width:n,height:s}=this.canvas.getBoundingClientRect();return{x:2*((t.clientX-e)/n-.5),y:-2*((t.clientY-i)/s-.5),t:t.timeStamp,fingersCount:1}}}class ht{constructor(t){this.canvas=t,this._keyboard=null,this._pointer=null}get keyboard(){return this._keyboard||(this._keyboard=new ot),this._keyboard}get pointer(){return this._pointer||(this._pointer=new at(this.canvas)),this._pointer}}class ct{constructor(){this.name="Painter/"+ct.counter++,this.active=!0}debugHierarchy(){return{[this.active?this.name:`${this.name} (Inactive)`]:null}}}ct.log=new class{constructor(){this.level=0,this.lookupTable=new Map}lookup(t,e){var i;if("number"!=typeof e)return JSON.stringify(e);const{lookupTable:n}=this;if(0===n.size)for(const e in t){const i=t[e];"number"==typeof i&&n.set(i,`gl.${e}`)}return null!==(i=n.get(e))&&void 0!==i?i:`gl[${e}]`}call(t,e){const i="  ".repeat(this.level);console.log(`${i}>>>`,t),this.level++;const n=Date.now();try{return e()}catch(t){throw console.error(t),t}finally{this.level--,console.log(`${i}<<<`,t,`(${Date.now()-n} ms)`)}}stateDepth(t){if(console.log("// [State] Depth"),t.getParameter(t.DEPTH_TEST)){console.log("gl.enable( gl.DEPTH_TEST )"),console.log("gl.depthFunc(",this.lookup(t,t.getParameter(t.DEPTH_FUNC)),")"),console.log("gl.depthMask(",this.lookup(t,t.getParameter(t.DEPTH_WRITEMASK)),")");const[e,i]=t.getParameter(t.DEPTH_RANGE);console.log("gl.depthRange(",e,",",i,")")}else console.log("gl.disable( gl.DEPTH_TEST )")}},ct.counter=0;class ut extends ct{constructor(t=[],{onEnter:e,onExit:i,name:n}={}){super(),this.active=!0,this.onEnter=e,this.onExit=i,this.painters=[...t],this.name=null!=n?n:`Group/${this.name}`}forEachChild(t){for(const[e,i]of this.painters.entries())t(i,e)}has(t){return this.painters.includes(t)}add(...t){for(const e of t)this.painters.push(e)}addFirst(...t){for(let e=t.length-1;e>=0;e--){const i=t[e];this.painters.unshift(i)}}remove(...t){for(const e of t){const t=this.painters.indexOf(e);-1!==t&&(this.painters.splice(t,1),e.delete())}}removeAll(){for(const t of this.painters)t.delete();this.painters.splice(0,this.painters.length)}delete(){for(const t of this.painters)t.delete();this.painters.splice(0,this.painters.length)}paint(t,e){var i,n;if(this.active){null===(i=this.onEnter)||void 0===i||i.call(this,t,e);for(const i of this.painters)i.active&&i.paint(t,e);null===(n=this.onExit)||void 0===n||n.call(this,t,e)}}debugHierarchy(){return{[this.active?this.name:`${this.name} (Inactive)`]:this.painters.map((t=>t.debugHierarchy()))}}}function lt(t,e){var i,n;const s=new et(t.transfo).from(e);s.debug(),"number"==typeof e.distance&&(s.distance=e.distance);const r=t.zoom,o=null!==(i=e.zoom)&&void 0!==i?i:r,a=function(t,e,i){const n=t.clone().from({}),s=n.distance,r=n.position.clone(),o=n.scale.clone(),a=n.orientation.clone(),h=t.clone().from(i),c=h.orientation.clone(),l=h.position.clone(),d=h.scale.clone(),f=h.distance;return e=>{t.distance=u(s,f,e),t.position.fromMix(r,l,e),t.scale.fromMix(o,d,e),t.orientation.fromSlerp(a,c,e),t.updateMatrix()}}(t.transfo,0,s),h=t.spaceHeightAtTarget,c=null!==(n=e.spaceHeightAtTarget)&&void 0!==n?n:t.spaceHeightAtTarget;return i=>{a(i),"number"==typeof e.spaceHeightAtTarget&&(t.spaceHeightAtTarget=u(h,c,i)),t.zoom=u(r,o,i)}}function dt(t,e,i){const n=document.createElement("canvas");n.width=t,n.height=e;const s=n.getContext("2d",i);if(!s)throw new Error("Unable to create 2D context!");return{canvas:n,ctx:s}}function ft(t,e,i="#000"){const{canvas:n,ctx:s}=dt(t,e);return s.fillStyle=i,s.fillRect(0,0,t,e),n}function mt(t,e){return function(t,e,i,n,s){const{canvas:r,ctx:o}=dt(t,e),a=o.createLinearGradient(0,0,t*i,e*n);for(let t=0;t<s.length;t++)a.addColorStop(t/(s.length-1),s[t]);return o.fillStyle=a,o.fillRect(0,0,t,e),r}(t,1,1,0,e)}function gt(t){return 1-(1-t)*(1-t)}const pt={index:"number",texCoord:["?","number"]};var Et,At,_t,xt,vt,yt,bt;function Rt(t,e){e.enabled?t.enable(t.BLEND):t.disable(t.BLEND),t.blendEquationSeparate(e.equationColor,e.equationAlpha),t.blendFuncSeparate(e.functionColorSrc,e.functionColorDst,e.functionAlphaSrc,e.functionAlphaDst)}function Tt(t){return{enabled:Boolean(t.getParameter(t.BLEND)),equationAlpha:t.getParameter(t.BLEND_EQUATION_ALPHA),equationColor:t.getParameter(t.BLEND_EQUATION_RGB),functionAlphaDst:t.getParameter(t.BLEND_DST_ALPHA),functionAlphaSrc:t.getParameter(t.BLEND_SRC_ALPHA),functionColorDst:t.getParameter(t.BLEND_DST_RGB),functionColorSrc:t.getParameter(t.BLEND_SRC_ALPHA)}}function Lt(t,e){e.enabled?t.enable(t.CULL_FACE):t.disable(t.CULL_FACE),t.cullFace(e.cullFace)}function St(t){return{enabled:Boolean(t.getParameter(t.CULL_FACE)),cullFace:t.getParameter(t.CULL_FACE_MODE)}}Object.assign(Object.assign({},pt),{scale:["?","number"]}),Object.assign(Object.assign({},pt),{strength:["?","number"]}),function(t){t[t.NEVER=WebGL2RenderingContext.NEVER]="NEVER",t[t.LESS=WebGL2RenderingContext.LESS]="LESS",t[t.EQUAL=WebGL2RenderingContext.EQUAL]="EQUAL",t[t.LEQUAL=WebGL2RenderingContext.LEQUAL]="LEQUAL",t[t.GREATER=WebGL2RenderingContext.GREATER]="GREATER",t[t.NOTEQUAL=WebGL2RenderingContext.NOTEQUAL]="NOTEQUAL",t[t.GEQUAL=WebGL2RenderingContext.GEQUAL]="GEQUAL",t[t.ALWAYS=WebGL2RenderingContext.ALWAYS]="ALWAYS"}(Et||(Et={})),function(t){t[t.FUNC_ADD=WebGL2RenderingContext.FUNC_ADD]="FUNC_ADD",t[t.FUNC_SUBTRACT=WebGL2RenderingContext.FUNC_SUBTRACT]="FUNC_SUBTRACT",t[t.FUNC_REVERSE_SUBTRACT=WebGL2RenderingContext.FUNC_REVERSE_SUBTRACT]="FUNC_REVERSE_SUBTRACT",t[t.MIN=WebGL2RenderingContext.MIN]="MIN",t[t.MAX=WebGL2RenderingContext.MAX]="MAX"}(At||(At={})),function(t){t[t.ZERO=WebGL2RenderingContext.ZERO]="ZERO",t[t.ONE=WebGL2RenderingContext.ONE]="ONE",t[t.SRC_COLOR=WebGL2RenderingContext.SRC_COLOR]="SRC_COLOR",t[t.ONE_MINUS_SRC_COLOR=WebGL2RenderingContext.ONE_MINUS_SRC_COLOR]="ONE_MINUS_SRC_COLOR",t[t.DST_COLOR=WebGL2RenderingContext.DST_COLOR]="DST_COLOR",t[t.ONE_MINUS_DST_COLOR=WebGL2RenderingContext.ONE_MINUS_DST_COLOR]="ONE_MINUS_DST_COLOR",t[t.SRC_ALPHA=WebGL2RenderingContext.SRC_ALPHA]="SRC_ALPHA",t[t.ONE_MINUS_SRC_ALPHA=WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA]="ONE_MINUS_SRC_ALPHA",t[t.DST_ALPHA=WebGL2RenderingContext.DST_ALPHA]="DST_ALPHA",t[t.ONE_MINUS_DST_ALPHA=WebGL2RenderingContext.ONE_MINUS_DST_ALPHA]="ONE_MINUS_DST_ALPHA",t[t.CONSTANT_COLOR=WebGL2RenderingContext.CONSTANT_COLOR]="CONSTANT_COLOR",t[t.ONE_MINUS_CONSTANT_COLOR=WebGL2RenderingContext.ONE_MINUS_CONSTANT_COLOR]="ONE_MINUS_CONSTANT_COLOR",t[t.CONSTANT_ALPHA=WebGL2RenderingContext.CONSTANT_ALPHA]="CONSTANT_ALPHA",t[t.ONE_MINUS_CONSTANT_ALPHA=WebGL2RenderingContext.ONE_MINUS_CONSTANT_ALPHA]="ONE_MINUS_CONSTANT_ALPHA",t[t.SRC_ALPHA_SATURATE=WebGL2RenderingContext.SRC_ALPHA_SATURATE]="SRC_ALPHA_SATURATE"}(_t||(_t={})),function(t){t[t.NEVER=WebGL2RenderingContext.NEVER]="NEVER",t[t.LESS=WebGL2RenderingContext.LESS]="LESS",t[t.EQUAL=WebGL2RenderingContext.EQUAL]="EQUAL",t[t.LEQUAL=WebGL2RenderingContext.LEQUAL]="LEQUAL",t[t.GREATER=WebGL2RenderingContext.GREATER]="GREATER",t[t.NOTEQUAL=WebGL2RenderingContext.NOTEQUAL]="NOTEQUAL",t[t.GEQUAL=WebGL2RenderingContext.GEQUAL]="GEQUAL",t[t.ALWAYS=WebGL2RenderingContext.ALWAYS]="ALWAYS"}(xt||(xt={})),function(t){t[t.KEEP=WebGL2RenderingContext.KEEP]="KEEP",t[t.ZERO=WebGL2RenderingContext.ZERO]="ZERO",t[t.REPLACE=WebGL2RenderingContext.REPLACE]="REPLACE",t[t.INCR=WebGL2RenderingContext.INCR]="INCR",t[t.INCR_WRAP=WebGL2RenderingContext.INCR_WRAP]="INCR_WRAP",t[t.DECR=WebGL2RenderingContext.DECR]="DECR",t[t.DECR_WRAP=WebGL2RenderingContext.DECR_WRAP]="DECR_WRAP",t[t.INVERT=WebGL2RenderingContext.INVERT]="INVERT"}(vt||(vt={})),function(t){t[t.FRONT=WebGL2RenderingContext.FRONT]="FRONT",t[t.BACK=WebGL2RenderingContext.BACK]="BACK",t[t.FRONT_AND_BACK=WebGL2RenderingContext.FRONT_AND_BACK]="FRONT_AND_BACK"}(yt||(yt={})),function(t){t[t.ALPHA=WebGL2RenderingContext.ALPHA]="ALPHA",t[t.RGB=WebGL2RenderingContext.RGB]="RGB",t[t.RGBA=WebGL2RenderingContext.RGBA]="RGBA",t[t.LUMINANCE=WebGL2RenderingContext.LUMINANCE]="LUMINANCE",t[t.LUMINANCE_ALPHA=WebGL2RenderingContext.LUMINANCE_ALPHA]="LUMINANCE_ALPHA"}(bt||(bt={})),At.FUNC_ADD,_t.SRC_ALPHA,_t.ONE_MINUS_SRC_ALPHA,At.FUNC_ADD,_t.ONE,_t.ZERO,At.FUNC_ADD,_t.SRC_ALPHA,_t.ONE_MINUS_SRC_ALPHA,At.FUNC_ADD,_t.ONE,_t.ZERO,At.FUNC_ADD,_t.ONE,_t.ONE,At.FUNC_ADD,_t.ONE,_t.ZERO,At.FUNC_ADD,_t.ONE,_t.ONE_MINUS_SRC_ALPHA,At.FUNC_ADD,_t.ONE,_t.ZERO,yt.BACK,yt.BACK,yt.FRONT;const Mt={off:{enabled:!1,func:Et.ALWAYS,mask:!1,rangeMin:0,rangeMax:1},writeOnly:{enabled:!1,func:Et.ALWAYS,mask:!0,rangeMin:0,rangeMax:1},less:{enabled:!0,func:Et.LESS,mask:!0,rangeMin:0,rangeMax:1},lessOrEqual:{enabled:!0,func:Et.LEQUAL,mask:!0,rangeMin:0,rangeMax:1},lessReadOnly:{enabled:!0,func:Et.LESS,mask:!1,rangeMin:0,rangeMax:1},lessOrEqualReadOnly:{enabled:!0,func:Et.LEQUAL,mask:!1,rangeMin:0,rangeMax:1}};function Ct(t,e){e.enabled?t.enable(t.DEPTH_TEST):t.disable(t.DEPTH_TEST),t.depthFunc(e.func),t.depthMask(e.mask),t.depthRange(e.rangeMin,e.rangeMax)}function wt(t){const[e,i]=t.getParameter(t.DEPTH_RANGE);return{enabled:Boolean(t.getParameter(t.DEPTH_TEST)),func:Number(t.getParameter(t.DEPTH_FUNC)),mask:Boolean(t.getParameter(t.DEPTH_WRITEMASK)),rangeMin:e,rangeMax:i}}const Pt={off:{enabled:!1,maskBack:0,maskFront:0,functionBack:xt.ALWAYS,functionBackMask:0,functionBackRef:0,functionFront:xt.ALWAYS,functionFrontMask:0,functionFrontRef:0,operationBack1FailStencil:vt.KEEP,operationBack2FailDepth:vt.KEEP,operationBack3Pass:vt.KEEP,operationFront1FailStencil:vt.KEEP,operationFront2FailDepth:vt.KEEP,operationFront3Pass:vt.KEEP},write:t=>({enabled:!0,maskBack:255,maskFront:255,functionBack:xt.ALWAYS,functionBackRef:t,functionBackMask:255,functionFront:xt.ALWAYS,functionFrontRef:t,functionFrontMask:255,operationBack1FailStencil:vt.KEEP,operationBack2FailDepth:vt.KEEP,operationBack3Pass:vt.REPLACE,operationFront1FailStencil:vt.KEEP,operationFront2FailDepth:vt.KEEP,operationFront3Pass:vt.REPLACE}),paintIfEqual:t=>({enabled:!0,maskBack:0,maskFront:0,functionBack:xt.EQUAL,functionBackRef:t,functionBackMask:255,functionFront:xt.EQUAL,functionFrontRef:t,functionFrontMask:255,operationBack1FailStencil:vt.KEEP,operationBack2FailDepth:vt.KEEP,operationBack3Pass:vt.KEEP,operationFront1FailStencil:vt.KEEP,operationFront2FailDepth:vt.KEEP,operationFront3Pass:vt.KEEP})};function Nt(t,e){e.enabled?(t.enable(t.STENCIL_TEST),t.stencilFuncSeparate(t.FRONT,e.functionFront,e.functionFrontRef,e.functionFrontMask),t.stencilFuncSeparate(t.BACK,e.functionBack,e.functionBackRef,e.functionBackMask),t.stencilOpSeparate(t.FRONT,e.operationFront1FailStencil,e.operationFront2FailDepth,e.operationFront3Pass),t.stencilOpSeparate(t.BACK,e.operationBack1FailStencil,e.operationBack2FailDepth,e.operationBack3Pass),t.stencilMaskSeparate(t.FRONT,e.maskFront),t.stencilMaskSeparate(t.BACK,e.maskBack)):t.disable(t.STENCIL_TEST)}class Ot{constructor(){this.animations=new Map}schedule(t){var e;t.name||(t.name="TgdAnimation#"+Ot.counter++);const{action:i,duration:n,easingFunction:s,repeat:r}=t;return this.animations.set(t,{start:-1,delay:null!==(e=t.delay)&&void 0!==e?e:0,duration:n,inverseDuration:1/n,action:s?t=>i(s(t)):i,loop:1,repeat:null!=r?r:1,cancel:()=>this.cancel(t),onEnd:t.onEnd}),t}cancel(t){this.animations.delete(t)}paint(t){var e;if(0===this.animations.size)return!1;for(const i of this.animations.values()){i.start<0&&(i.start=t+i.delay);const n=t-i.start;if(n<0)continue;const s=Math.min(1,i.inverseDuration*n);for(i.action(s);t>i.start+i.duration;){try{null===(e=i.onEnd)||void 0===e||e.call(i)}catch(t){console.error("Animation.onEnd() failed for",i),console.error(t)}i.loop++,i.start+=i.duration}i.loop>i.repeat&&i.cancel()}return!0}}Ot.counter=1;class Ft{constructor(t,e={}){var i,n;this.canvas=t,this.options=e,this.eventPaint=new rt,this.resolution=1,this._camera=new st({transfo:{distance:15},far:100,near:.1,fovy:Math.PI/8,zoom:1}),this._fps=0,this._aspectRatio=1,this._aspectRatioInverse=1,this.paintingIsOngoing=!1,this.paintingIsQueued=!1,this.isPlaying=!1,this.requestAnimationFrame=-1,this.lastTime=-1,this.timeShift=0,this.animationManager=new Ot,this.paint=()=>{this.paintingIsOngoing?this.paintingIsQueued=!0:(this.paintingIsQueued=!1,this.paintingIsOngoing=!0,globalThis.cancelAnimationFrame(this.requestAnimationFrame),this.requestAnimationFrame=globalThis.requestAnimationFrame(this.actualPaint))},this.actualPaint=t=>{try{this.timeShift=t-Date.now();const{lastTime:e,gl:i}=this;if(e<0)return this.lastTime=t,void this.paint();const n=t-this.lastTime;this._fps=Math.round(1/n),this.lastTime=t,this._camera.screenWidth=i.drawingBufferWidth,this._camera.screenHeight=i.drawingBufferHeight,this._aspectRatio=i.drawingBufferWidth/i.drawingBufferHeight,this._aspectRatioInverse=1/this._aspectRatio;const s=.001*t,r=.001*n;this.painters.paint(s,r),this.eventPaint.dispatch(this),(this.paintingIsQueued||this.animationManager.paint(s)||this.isPlaying)&&(this.paintingIsOngoing=!1,this.paint())}catch(t){console.error(t)}finally{this.paintingIsOngoing=!1}};const s=t.getContext("webgl2",e);if(!s)throw new Error("Unable to create a WebGL2 context!");this.resolution=null!==(i=e.resolution)&&void 0!==i?i:1,e.enableTextureFloatStorage&&s.getExtension("EXT_color_buffer_float"),this.implementationColorReadFormat=s.getParameter(s.IMPLEMENTATION_COLOR_READ_FORMAT),this.implementationColorReadType=s.getParameter(s.IMPLEMENTATION_COLOR_READ_TYPE),this.gl=s,this.observer=new ResizeObserver((()=>{const i=t.clientWidth*this.resolution,n=t.clientHeight*this.resolution,{onResize:r}=e;r?r(this,t.clientWidth,t.clientHeight):(t.width=i,t.height=n),s.viewport(0,0,t.width,t.height),this.paint()})),this.observer.observe(t),this.inputs=new ht(t),e.camera&&(this._camera=e.camera),this.painters=new ut,this.name=null!==(n=e.name)&&void 0!==n?n:"Context#"+Ft.incrementalId++,this.painters.name=this.name,t.style.touchAction="none",this.stateReset()}get fps(){return this._fps}get time(){return Date.now()+this.timeShift}debugHierarchy(){return this.painters.debugHierarchy()}get camera(){return this._camera}set camera(t){t!==this._camera&&(this._camera=t,this.paint())}animSchedule(...t){var e,i;const n=[];let s=0;for(const r of t){const t=r.duration+(null!==(e=r.delay)&&void 0!==e?e:0);r.delay=s+(null!==(i=r.delay)&&void 0!==i?i:0),s+=t,n.push(this.animationManager.schedule(r))}return this.paint(),n}animCancel(t){this.animationManager.cancel(t)}get onEnter(){return this.painters.onEnter}set onEnter(t){this.painters.onEnter=t}get onExit(){return this.painters.onExit}set onExit(t){this.painters.onExit=t}get width(){return this.gl.drawingBufferWidth}get height(){return this.gl.drawingBufferHeight}get aspectRatio(){return this._aspectRatio}get aspectRatioInverse(){return this._aspectRatioInverse}get playing(){return this.isPlaying}set playing(t){t!==this.isPlaying&&(t?this.paint():(this.paintingIsOngoing=!1,this.paintingIsQueued=!1,globalThis.cancelAnimationFrame(this.requestAnimationFrame)),this.isPlaying=t)}play(){this.playing=!0}pause(){this.playing=!1}has(t){return this.painters.has(t)}add(...t){this.painters.add(...t)}addFirst(...t){this.painters.addFirst(...t)}remove(...t){this.painters.remove(...t)}removeAll(){this.painters.removeAll()}takeSnapshot(t){const e=t.getContext("2d");if(!e)throw new Error("[TgdContext.takeSnapshot] We cannot get a 2D context for the target canvas! Maybe it already has another type of context.");const{width:i,height:n}=t,s=function(t,e){const i=document.createElement("canvas");return i.width=t,i.height=e,i}(i,n),r=new Ft(s,this.options);this.painters.forEachChild((t=>r.add(t))),r.actualPaint(this.lastTime),r.gl.finish(),e.drawImage(s,0,0)}lookupWebglConstant(t){const{gl:e}=this;for(const i in e)if(e[i]===t)return i;return`Unknown gl[${t}]`}destroy(){this.pause(),this.painters.delete(),this.observer.unobserve(this.canvas)}stateReset(){const{gl:t}=this,e=t.getParameter(t.MAX_VERTEX_ATTRIBS),i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i);for(let i=0;i<e;++i)t.disableVertexAttribArray(i),t.vertexAttribPointer(i,4,t.FLOAT,!1,0,0),t.vertexAttrib1f(i,0);t.deleteBuffer(i);const n=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);for(let e=0;e<n;++e)t.activeTexture(t.TEXTURE0+e),t.bindTexture(t.TEXTURE_CUBE_MAP,null),t.bindTexture(t.TEXTURE_2D,null);return t.activeTexture(t.TEXTURE0),t.useProgram(null),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindRenderbuffer(t.RENDERBUFFER,null),t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.DITHER),t.disable(t.SCISSOR_TEST),t.blendColor(0,0,0,0),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.clearColor(0,0,0,0),t.clearDepth(1),t.clearStencil(-1),t.colorMask(!0,!0,!0,!0),t.cullFace(t.BACK),t.depthFunc(t.LESS),t.depthMask(!0),t.depthRange(0,1),t.frontFace(t.CCW),t.hint(t.GENERATE_MIPMAP_HINT,t.DONT_CARE),t.lineWidth(1),t.pixelStorei(t.PACK_ALIGNMENT,4),t.pixelStorei(t.UNPACK_ALIGNMENT,4),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),t.polygonOffset(0,0),t.sampleCoverage(1,!1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilMask(4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),t}}Ft.incrementalId=1;class Ut{constructor(t,{geo:e,minZoom:i=.001,maxZoom:n=1/0,speedZoom:s=1,speedOrbit:r=1,speedPanning:o=1,inertiaZoom:a=0,inertiaOrbit:h=0,inertiaPanning:c=0,fixedTarget:u=!1,debug:l=!1,onZoomRequest:d=Bt}={}){this.context=t,this.id="TgdControllerCameraOrbit-"+Ut.counter++,this.eventChange=new rt,this.minZoom=.001,this.maxZoom=1/0,this.speedZoom=1,this.speedOrbit=1,this.speedPanning=1,this.inertiaZoom=0,this.inertiaOrbit=0,this.inertiaPanning=0,this.fixedTarget=!1,this._enabled=!0,this.animOrbit=null,this.disabledUntil=0,this.tmpQuat=new Q,this.handleMove=t=>{this.enabled&&!this.animOrbit&&this.actualMove(t)},this.actualMove=t=>{if(t.current.t-t.previous.t<=0)return;const{context:e}=this,{keyboard:i}=e.inputs;if(t.altKey||2===t.current.fingersCount)return this.handlePan(t);if(this.geo){const e=i.isDown("Shift")?.2:2,n=i.isDown("x")?0:e*(t.previous.x-t.current.x),s=i.isDown("y")?0:e*(t.previous.y-t.current.y),r=this.geo.lng+n,o=this.geo.lat+s;this.orbitGeo(o,r)}else{if(i.isDown("z"))return this.handleRotateAroundZ(t);this.orbit(t.current.x-t.previous.x,t.current.y-t.previous.y,t.shiftKey)}},this.handleMoveStart=()=>{if(!this.enabled)return;const{animOrbit:t,context:e}=this;t&&(e.animCancel(t),this.animOrbit=null)},this.handleMoveEnd=t=>{if(!this.enabled)return;const{context:e,inertiaOrbit:i}=this;if(i>0){const n=1/(t.current.t-t.previous.t),s=n*(t.current.x-t.previous.x),r=n*(t.current.y-t.previous.y),o=structuredClone(t);o.current.t=Date.now(),this.animOrbit={duration:.001*i,action:t=>{o.previous.t=o.current.t,o.previous.x=o.current.x,o.previous.y=o.current.y,o.previous.fingersCount=o.current.fingersCount,o.current.t=Date.now();const e=(1-t)*(o.current.t-o.previous.t);o.current.x+=e*s,o.current.y+=e*r,this.actualMove(o)},easingFunction:gt},e.animSchedule(this.animOrbit)}},this.handleZoom=t=>{if(!this.enabled||0===this.speedZoom||!this.onZoomRequest({altKey:t.altKey,ctrlKey:t.ctrlKey,metaKey:t.metaKey,shiftKey:t.shiftKey,x:t.current.x,y:t.current.y}))return;const{context:e}=this,{camera:i}=e;let n=.1*this.speedZoom;this.context.inputs.keyboard.isDown("Shift")&&(n*=.1);const s=-t.direction*n;i.transfo.distance=Math.max(0,i.transfo.distance+s),t.preventDefault(),this.fireZoomChange()},this.geo=void 0,e&&(this.geo=Object.assign({lat:0,lng:0,minLat:-Math.PI/2,maxLat:+Math.PI/2,minLng:-Number.MAX_VALUE,maxLng:+Number.MAX_VALUE},e)),this.cameraInitialState=t.camera.getCurrentState();const{inputs:f}=t;f.pointer.eventMoveStart.addListener(this.handleMoveStart),f.pointer.eventMoveEnd.addListener(this.handleMoveEnd),f.pointer.eventMove.addListener(this.handleMove),f.pointer.eventZoom.addListener(this.handleZoom),this.speedOrbit=r,this.speedZoom=s,this.speedPanning=o,this.inertiaOrbit=h,this.inertiaZoom=a,this.inertiaPanning=c,this.fixedTarget=u,this.minZoom=i,this.maxZoom=n,this.onZoomRequest=d,this.geo&&this.orbitGeo(this.geo.lat,this.geo.lng),globalThis.setTimeout((()=>t.paint())),l&&t.inputs.keyboard.eventKeyPress.addListener((t=>{"?"===t.key&&console.log(this.context.camera.toCode())}))}get enabled(){return this.context.time>this.disabledUntil&&this._enabled}set enabled(t){this._enabled=t}reset(t,e){const{context:i}=this;this.disableForSomeTime(t),i.animSchedule({action:lt(i.camera,this.cameraInitialState),duration:t,easingFunction:e})}disableForSomeTime(t){this.disabledUntil=Math.max(this.disabledUntil,this.context.time+t)}detach(){const{inputs:t}=this.context;t.pointer.eventMove.removeListener(this.handleMove),t.pointer.eventZoom.removeListener(this.handleZoom)}orbit(t,e,i){const{context:n}=this,{camera:s}=n,{keyboard:r}=n.inputs,o=3*(i?.1:1)*this.speedOrbit,a=t*o,h=e*o;r.isDown("x")||s.transfo.orbitAroundY(a),r.isDown("y")||s.transfo.orbitAroundX(-h),this.fireOrbitChange()}orbitGeo(t,e){const{geo:i}=this;if(!i)return;t=c(t,i.minLat,i.maxLat),i.lat=t,e=c(e,i.minLng,i.maxLng),i.lng=e;const{orientation:n}=this.cameraInitialState,s=Dt(t,e),r=Dt(t+Math.PI/2,e),o=new f(r).cross(s),a=new N;n.toMatrix(a);const h=new N(o,r,s);h.multiply(a),this.tmpQuat.fromMatrix(h),this.context.camera.transfo.orientation=this.tmpQuat,this.fireOrbitChange()}handlePan(t){const{fixedTarget:e,speedPanning:i,context:n}=this,{camera:s}=n,r=.5*i*(1/s.zoom),o=(t.current.x-t.previous.x)*r*s.spaceWidthAtTarget,a=(t.current.y-t.previous.y)*r*s.spaceHeightAtTarget;e||s.transfo.moveAlongAxes(-o,-a,0),this.fireOrbitChange()}handleRotateAroundZ(t){const{camera:e}=this.context,i=t.previous.x,n=t.previous.y;if(Math.abs(i)+Math.abs(n)===0)return;const s=t.current.x,r=t.current.y;if(Math.abs(s)+Math.abs(r)===0)return;const o=i*s+n*r,a=i*r-n*s,h=Math.atan2(a,o)*this.speedOrbit;e.transfo.orbitAroundZ(h),this.fireOrbitChange()}fireOrbitChange(){this.context.paint(),this.eventChange.dispatch(this.context.camera)}fireZoomChange(){this.context.paint()}}Ut.counter=0;const Bt=()=>!0;function Dt(t,e){const i=Math.cos(t),n=Math.sin(t),s=i*Math.cos(e),r=i*Math.sin(e);return new f(r,n,s)}function It(t){if("string"==typeof t)return!0;if(!Array.isArray(t))return!1;for(const e of t)if(!It(e))return!1;return!0}function kt(t,e="",i){if("string"==typeof t)return`${e}${t}`;if(!t)return"";const n=null!=i?i:new Set;if(!Array.isArray(t))return Object.keys(t).map((e=>n.has(e)?null:(n.add(e),`// ${e}\n${t[e]}\n`))).filter((t=>"string"==typeof t)).join("\n");const s=`${e}    `;return t.filter((t=>null!==t)).filter((t=>!Array.isArray(t)||t.length>0)).map((t=>kt(t,s,n))).join("\n")}function Gt(t,e,i="----------------------------------------"){const n=Object.keys(t);return 0===n.length?[]:[`// ${i}`,...n.map((i=>`${e} ${t[i]} ${i};`))]}function Wt(t,e){if(It(t))return[t];const i=Object.keys(t);if(0===i.length)return[];const n=e?[`// ${e}`]:[];for(const e of i)n.push(t[e],"");return n}class zt{constructor(t,e){var i;this.gl=t,this.options=e;const n=t.createProgram();if(!n)throw new Error("Unable to create WebGLProgram!");const s=kt(e.vert),r=this.createShader("VERTEX_SHADER",s);t.attachShader(n,r);const o=kt(e.frag),a=this.createShader("FRAGMENT_SHADER",o);t.attachShader(n,a);const{transformFeedback:h}=e;if(h){const e=Array.isArray(h)?t.INTERLEAVED_ATTRIBS:t[h.bufferMode],i=Array.isArray(h)?h:h.varyings;t.transformFeedbackVaryings(n,i,e)}if(t.linkProgram(n),!t.getProgramParameter(n,t.LINK_STATUS)){const e=null!==(i=t.getProgramInfoLog(n))&&void 0!==i?i:"";console.warn(e);const r=Xt(e),a=[Zt("Vertex Shader",s,r),Zt("Fragment Shader",o,r)].join("\n");throw new Error(a)}this.program=n,this.shaders=[r,a],this.uniformsLocations=this.getUniformsLocations(),t.detachShader(n,r),t.deleteShader(r),t.detachShader(n,a),t.deleteShader(a)}toCode({indent:t=""}={}){return["function createProgram(gl: WebGL2RenderingContext) {","  const prg = gl.createProgram()","  const vertexShader = gl.createShader(gl.VERTEX_SHADER)",`  gl.shaderSource(vertexShader, \`${kt(this.options.vert)}\`)`,"  gl.compileShader(vertexShader)","  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)",`  gl.shaderSource(fragmentShader, \`${kt(this.options.frag)}\`)`,"  gl.compileShader(fragmentShader)","  gl.attachShader(prg, vertexShader)","  gl.attachShader(prg, fragmentShader)","  gl.linkProgram(prg)","  return prg","}"].map((e=>`${t}${e}`)).join("\n")}hasAttribute(t){const{gl:e,program:i}=this;return e.getAttribLocation(i,t)>=0}getAttribLocation(t){const{gl:e,program:i}=this,n=e.getAttribLocation(i,t);if(n<0)throw new Error(`Attribute "${t}" not found!`);return n}getUniformLocation(t){const{uniformsLocations:e}=this,i=Object.keys(e);if(0===t.length)return console.warn(`Uniform "${t}" has not been found: there is no active uniform in this program!`),0;const n=e[t];return n||console.warn(`No active uniform found with name "${t}"!\nAvailable names are: ${i.join(", ")}.`),n}uniform1f(t,e){const{gl:i}=this;i.uniform1f(this.getUniformLocation(t),e)}uniform2f(t,e,i){const{gl:n}=this;n.uniform2f(this.getUniformLocation(t),e,i)}uniform3f(t,e,i,n){const{gl:s}=this;s.uniform3f(this.getUniformLocation(t),e,i,n)}uniform3fv(t,e){const{gl:i}=this;i.uniform3fv(this.getUniformLocation(t),e)}uniform4f(t,e,i,n,s){const{gl:r}=this;r.uniform4f(this.getUniformLocation(t),e,i,n,s)}uniform4fv(t,e){const{gl:i}=this;i.uniform4fv(this.getUniformLocation(t),e)}uniform1i(t,e){const{gl:i}=this;i.uniform1i(this.getUniformLocation(t),e)}uniform2i(t,e,i){const{gl:n}=this;n.uniform2i(this.getUniformLocation(t),e,i)}uniform3i(t,e,i,n){const{gl:s}=this;s.uniform3i(this.getUniformLocation(t),e,i,n)}uniform4i(t,e,i,n,s){const{gl:r}=this;r.uniform4i(this.getUniformLocation(t),e,i,n,s)}uniform1ui(t,e){const{gl:i}=this;i.uniform1ui(this.getUniformLocation(t),e)}uniform2ui(t,e,i){const{gl:n}=this;n.uniform2ui(this.getUniformLocation(t),e,i)}uniform3ui(t,e,i,n){const{gl:s}=this;s.uniform3ui(this.getUniformLocation(t),e,i,n)}uniform4ui(t,e,i,n,s){const{gl:r}=this;r.uniform4ui(this.getUniformLocation(t),e,i,n,s)}uniformMatrix2fv(t,e){const{gl:i}=this;i.uniformMatrix2fv(this.getUniformLocation(t),!1,e)}uniformMatrix3fv(t,e){const{gl:i}=this;i.uniformMatrix3fv(this.getUniformLocation(t),!1,e)}uniformMatrix4fv(t,e){const{gl:i}=this;i.uniformMatrix4fv(this.getUniformLocation(t),!1,e)}use(){const{gl:t,program:e}=this;t.useProgram(e)}delete(){const{gl:t}=this;for(const e of this.shaders)t.deleteShader(e);t.deleteProgram(this.program)}debug(t="TgdProgram"){console.log(t);const{options:e}=this;Zt("Vertex Shader",kt(e.vert)),Zt("Fragment Shader",kt(e.frag))}createShader(t,e){const{gl:i}=this,n=i.createShader(i[t]);if(!n)throw new Error(`Unable to create a WebGLShader of type "${t}"!`);i.shaderSource(n,e),i.compileShader(n);const s=i.getShaderInfoLog(n);if(s){console.error(`Error in ${t} code:`,s);const i=Xt(s);throw new Error(Zt(t,e,i))}return n}getUniformsLocations(){const{gl:t,program:e}=this,i=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);if("number"!=typeof i)throw new Error("Unable to get the number of uniforms in a WebGLProgram!");const n={};for(let s=0;s<i;s++){const i=t.getActiveUniform(e,s);if(!i)continue;const r=t.getUniformLocation(e,i.name);if(null===r)throw new Error(`Unable to get location for uniform "${i.name}"!`);n[i.name]=r}return n}}const Ht=/^ERROR:[ \t]+([0-9]+):([0-9]+):/g;function Xt(t){const e=[],i=[];for(const n of t.split("\n")){Ht.lastIndex=-1;const t=Ht.exec(n);t&&(e.push(Number.parseInt(t[2],10)),i.push(n.slice(t[0].length).trim()))}return{lines:e,messages:i}}function $t(t,e=!1){return`color:#fff;background:${t};font-family:monospace;font-size:80%;font-weight:${e?"bolder":"100"};margin:0;color:${e?"#777":"#fff"}`}function Zt(t,e,i){const{lines:n=[],messages:s=[]}=null!=i?i:{},r=[t],o=[`%c${t}`],a=["font-weight:bolder;font-size:120%"];let h=!1;for(const[t,i]of e.split("\n").entries()){const e=t+1,c=`${e}`.padStart(5," "),u=n.includes(e)?"#f00":"#000";o.push(`%c${c}  %c${i}`),r.push(`${c}  ${i}`),a.push($t(u,!0),$t(u,!1)),n.includes(e)&&(h=!0,o.push(`%c${s[n.indexOf(e)]}`),r.push(`##### ${s[n.indexOf(e)]}`),a.push("color:#f33;background:#333;font-weight:bold"),console.error())}return console.log(o.join("\n"),...a),h?r.join("\n"):""}class Kt{constructor(t,e={}){var i,n;this.attributesDefinition=t,this.options=e,this.stride=0,this.definitions={},this._data=new ArrayBuffer(0),this._count=0,this.target=null!==(i=e.target)&&void 0!==i?i:"ARRAY_BUFFER",this.usage=null!==(n=e.usage)&&void 0!==n?n:"STATIC_DRAW",this.initialize(t,e)}initialize(t,e={}){var i;for(const e of Object.keys(t)){const i=t[e];this.attributesDefinition[e]=i}const n=null!==(i=e.divisor)&&void 0!==i?i:0;let s=0;const r={},o={};for(const e of Object.keys(t)){r[e]=new ArrayBuffer(0);const i={dimension:jt[t[e]],byteOffset:s,bytesPerElement:Float32Array.BYTES_PER_ELEMENT,divisor:n,getter:(t,e)=>(e>=t.byteLength&&(e%=t.byteLength),t.getFloat32(e,!0)),setter(t,e,i){t.setFloat32(e,i,!0)}};o[e]=i,s+=i.bytesPerElement*i.dimension}this.definitions=o,this.stride=s,this._data=Yt(this._data,this.count*this.stride)}assertAttribType(t,...e){const i=this.attributesDefinition[t];if(!i)throw new Error(`Attribute "${t}" does not exist! Available names are: ${Object.keys(this.attributesDefinition).join(", ")}.`);if(!e.includes(i))throw new Error(`Attribute "${t}" is of type "${i}", which is not ${e.join(" nor ")}!`);return this}addAttributes(t){const e=this.clone();for(const e of Object.keys(t)){const i=this.attributesDefinition[e],n=t[e];if(i&&i!==n)throw new Error(`It is not allowed to change the type of attribute "${e}" from "${i}" to "${n}"! Prefer removing the attribute first.`)}this.initialize(Object.assign(Object.assign({},this.attributesDefinition),t),this.options);const i=this;i.count=e.count;for(const t of e.attributesNames)try{const{get:n}=e.getAttribAccessor(t),{set:s}=i.getAttribAccessor(t);for(let i=0;i<e.count;i++){const e=this.getDef(t);for(let t=0;t<e.dimension;t++)s(n(i,t),i,t)}}catch(e){const i=e instanceof Error?e.message:JSON.stringify(e);throw new Error(`Unable to clone attribute "${t}"!\n${i}`)}}clone(){const t=new Kt(structuredClone(this.attributesDefinition),this.options);t.count=this.count;const e=new DataView(this._data),i=new DataView(t._data);for(let t=0;t<e.byteLength;t++)i.setUint8(t,e.getUint8(t));return t}get data(){return this._data}get count(){return this._count}set count(t){this._count!==t&&(this._count=t,this._data=Yt(this._data,t*this.stride))}get attributesNames(){return Object.keys(this.attributesDefinition)}getAttribAccessor(t){const e=this.getDef(t),i=new DataView(this.data),n=this.stride;return{get(t,s=0){const r=e.byteOffset+n*t+s*e.bytesPerElement;return e.getter(i,r)},set(t,s,r=0){const o=e.byteOffset+n*s+r*e.bytesPerElement;e.setter(i,o,t)}}}set(t,e,{byteOffset:i=0,byteStride:n,first:s=0,count:r=1/0,targetFirst:o=0}={}){const{bytesPerElement:a,dimension:h,byteOffset:c}=this.getDef(t),u=e instanceof ArrayBuffer?e:e.buffer,l=a*h,d=null!=n?n:l;let f=i+d*s;const m=this.stride;let g=o*m+c;this.count=Math.max(this.count,Math.min(r,Math.floor((u.byteLength-f)/d)));const p=u.byteLength-d+1,E=this._data.byteLength+c-m+1,A=new Uint8Array(u),_=new Uint8Array(this._data);let x=0;for(;x<r&&f<p&&g<E;)_.set(A.subarray(f,f+l),g),x++,f+=d,g+=m}getDef(t){const e=this.definitions[t];if(!e)throw new Error(`[TgdDataset] Attribute "${String(t)}" not found in this DataSet!\nAvailable names are: ${Object.keys(this.definitions).map((t=>JSON.stringify(t))).join(", ")}.`);return e}defineAttributes(t,e){let i=0;const{definitions:n}=this;for(const s of Object.keys(n)){const r=n[s];if(e.hasAttribute(s)){const n=e.getAttribLocation(s);t.enableVertexAttribArray(n),t.vertexAttribPointer(n,r.dimension,t.FLOAT,!1,this.stride,i),t.vertexAttribDivisor(n,r.divisor)}i+=r.dimension*r.bytesPerElement}}toCode({indent:t=""}={}){const e=[];let i=0;const{definitions:n}=this;for(const t of Object.keys(n)){const s=n[t],r=`$${t}`;e.push(`const ${r} = gl.getAttribLocation(prg, "${t}")`,`gl.enableVertexAttribArray(${r})`,"gl.vertexAttribPointer(",`  ${r},`,`  ${s.dimension},  // Dimension`,"  gl.FLOAT,","  false,",`  ${this.stride},   // Stride`,`  ${i}   // Offset`,")",`gl.vertexAttribDivisor(${r}, ${s.divisor})`),i+=s.dimension*s.bytesPerElement}return e.map((e=>`${t}${e}`)).join("\n")}debug(t="Dataset"){console.log(t,"   count:",this.count,"   target:",this.target,"   usage:",this.usage);const e=[["Name","type","offset"]];for(const t of Object.keys(this.definitions)){const i=this.definitions[t];e.push([t,this.attributesDefinition[t],`${i.byteOffset}`])}const i=[0,1,2].map((t=>e.reduce(((e,i)=>Math.max(e,i[t].length)),0)));for(const[t,n,s]of e)console.log(`%c${t.padEnd(i[0]+2)}${n.padStart(i[1]+2)}${s.padStart(i[2]+2)}`,"font-family:monospace");for(const t of Object.keys(this.definitions)){const e=this.definitions[t];if(!e)continue;const{get:i}=this.getAttribAccessor(t),n=[];for(let t=0;t<this.count;t++){const s=[];for(let n=0;n<e.dimension;n++)s.push(i(t,n));n.push(s)}console.log(`Attribute "${t}":`,n)}}}const jt={float:1,vec2:2,vec3:3,vec4:4},Yt="function"==typeof ArrayBuffer.prototype.transfer?function(t,e){return t.transfer(e)}:function(t,e){const i=new ArrayBuffer(null!=e?e:t.byteLength);return new Uint8Array(i).set(new Uint8Array(t)),i};class Vt{constructor(t,e={}){var i,n;this.gl=t;const s=t.createBuffer();if(!s)throw new Error("Unable to create WebGLBuffer!");this._target=null!==(i=null==e?void 0:e.target)&&void 0!==i?i:"ARRAY_BUFFER",this._usage=null!==(n=null==e?void 0:e.usage)&&void 0!==n?n:"STATIC_DRAW",this.buffer=s;const{data:r}=e;r&&this.bufferData(Object.assign(Object.assign({},e),{data:r}))}get target(){return this._target}bind(t){const{gl:e,buffer:i}=this;this._target=null!=t?t:this._target,e.bindBuffer(e[this._target],i)}bufferData(t){var e,i;const{gl:n}=this;this._usage=null!==(e=t.usage)&&void 0!==e?e:this._usage,this._target=null!==(i=t.target)&&void 0!==i?i:this._target,this.bind(t.target),n.bufferData(n[this._target],t.data,n[this._usage])}delete(){const{gl:t,buffer:e}=this;t.deleteBuffer(e)}}class Qt{constructor(t,e,i,n){this.gl=t,this.program=e,this.datasets=i,this.elements=n,this.drawBuffers=[],this.elemBuffer=null;const s=t.createVertexArray();if(!s)throw new Error("Unable to create VertexArrayObject!");if(this.vao=s,e&&i){if(t.bindVertexArray(s),this.drawBuffers=i.map((i=>{const n=new Vt(t,{data:i.data,target:i.target,usage:i.usage});return n.bind(),i.defineAttributes(t,e),n})),n){const e=new Vt(t,{data:n,target:"ELEMENT_ARRAY_BUFFER"});e.bind(),this.elemBuffer=e}t.bindVertexArray(null)}}updateDataset(t){const{datasets:e}=this;if(!e)return console.error("You cannot update any dataset because no dataset has been attached to this VAO yet!"),!1;const i=e.indexOf(t);if(-1===i)return console.error("This dataset is not bound to this VAO!"),t.debug(),this.debug(),!1;const n=this.getBuffer(i);return n?(n.bufferData({data:t.data}),!0):(console.error(`There is no buffer with index #${i} in this VAO!`),this.debug(),!1)}getBuffer(t){return this.drawBuffers[t]}toCode({indent:t=""}={}){var e;const i=["function createVAO(","  gl: WebGL2RenderingContext,",`  prg: WebGLProgram${null===(e=this.datasets)||void 0===e?void 0:e.map(((t,e)=>`, data${e}: ArrayBuffer`)).join("")}`,") {","  const vao = gl.createVertexArray()","  gl.bindVertexArray(vao)"];if(this.datasets)for(const[e,n]of this.datasets.entries())i.push(`  const buff${e} = gl.createBuffer()`,`  gl.bindBuffer(gl.${n.target}, buff${e})`,`  gl.bufferData(gl.${n.target}, data${e}, gl.${n.usage})`,n.toCode({indent:`${t}  `}));return i.push("  return vao","}"),i.map((e=>`${t}${e}`)).join("\n")}debug(t="TgdVertexArray"){if(console.log(t),this.program&&this.program.debug(),this.datasets)for(const[t,e]of this.datasets.entries())e.debug(`   Dataset #${t}`);this.elements&&console.log("Elements:",this.elements)}bind(){this.gl.bindVertexArray(this.vao)}unbind(){this.gl.bindVertexArray(null)}delete(){const{gl:t,vao:e,drawBuffers:i,elemBuffer:n}=this;t.deleteVertexArray(e);for(const t of i)t.delete();n&&n.delete()}}class qt extends ut{static do(t,e){const{onEnterActions:i,onExitActions:n}=Jt({color:{red:!0,green:!0,blue:!0,alpha:!0}},t.gl,t);for(const t of i)t();e();for(const t of n)t()}static debug(t){const e=wt(t);console.log("Depth:",{enabled:e.enabled,func:n(e.func),mask:e.mask,range:[e.rangeMin,e.rangeMax]}),console.log("Cull:",St(t)),console.log("Blend:",Tt(t))}constructor(t,e={}){var i;super(e.children),this.color={red:!0,green:!0,blue:!0,alpha:!0};const{gl:n}=t,{onEnterActions:s,onExitActions:r}=Jt(this,n,e);this.onEnter=(t,i)=>{var n;null===(n=e.onEnter)||void 0===n||n.call(e,t,i);for(const t of s)t()},this.onExit=(t,i)=>{var n;for(const t of r)t();null===(n=e.onExit)||void 0===n||n.call(e,t,i)},this.name=null!==(i=e.name)&&void 0!==i?i:`State/${this.name}`}}function Jt(t,e,i){const{color:n,blend:s,depth:r,cull:o,stencil:a}=i,h=[],c=[],u=function(t){return!0===t?[!0,!0,!0,!0]:!1===t?[!1,!1,!1,!1]:t}(n),[l,d,f,m]=null!=u?u:[!0,!0,!0,!0];if(t.color.red=l,t.color.green=d,t.color.blue=f,t.color.alpha=m,Array.isArray(u)){let i;h.push((()=>{i=e.getParameter(e.COLOR_WRITEMASK),e.colorMask(t.color.red,t.color.green,t.color.blue,t.color.alpha)})),c.push((()=>{e.colorMask(...null!=i?i:[!0,!0,!0,!0])}))}if(s){let t;h.push((()=>{t=Tt(e),Rt(e,s)})),c.push((()=>{t&&Rt(e,t)}))}if(r){let t;h.push((()=>{t=wt(e),Ct(e,r)})),c.push((()=>{t&&Ct(e,t)}))}if(o){let t;h.push((()=>{t=St(e),Lt(e,o)})),c.push((()=>{t&&Lt(e,t)}))}if(a){let t;h.push((()=>{t=function(t){const e=Boolean(t.getParameter(t.STENCIL_TEST));return e?{enabled:e,maskBack:t.getParameter(t.STENCIL_BACK_WRITEMASK),maskFront:t.getParameter(t.STENCIL_WRITEMASK),functionFront:t.getParameter(t.STENCIL_FUNC),functionFrontMask:t.getParameter(t.STENCIL_VALUE_MASK),functionFrontRef:t.getParameter(t.STENCIL_REF),functionBack:t.getParameter(t.STENCIL_BACK_FUNC),functionBackMask:t.getParameter(t.STENCIL_BACK_VALUE_MASK),functionBackRef:t.getParameter(t.STENCIL_BACK_REF),operationFront1FailStencil:t.getParameter(t.STENCIL_FAIL),operationFront2FailDepth:t.getParameter(t.STENCIL_PASS_DEPTH_FAIL),operationFront3Pass:t.getParameter(t.STENCIL_PASS_DEPTH_PASS),operationBack1FailStencil:t.getParameter(t.STENCIL_BACK_FAIL),operationBack2FailDepth:t.getParameter(t.STENCIL_BACK_PASS_DEPTH_FAIL),operationBack3Pass:t.getParameter(t.STENCIL_BACK_PASS_DEPTH_PASS)}:Object.assign({},Pt.off)}(e),Nt(e,a)})),c.push((()=>{t&&Nt(e,t)}))}return{onEnterActions:h,onExitActions:c}}class te extends ct{constructor({gl:t},e={}){var i,n,s,r;super(),this.options=e,this.red=1,this.green=.7,this.blue=0,this.alpha=1,this.depth=1,this.stencil=0,this.name=null!==(i=e.name)&&void 0!==i?i:`Clear/${this.name}`,this.gl=t;const o=null!==(n=e.color)&&void 0!==n?n:[0,0,0,1],a=null!==(s=e.depth)&&void 0!==s?s:1,h=null!==(r=e.stencil)&&void 0!==r?r:0;this.clearMask=0;let c=!1;if(void 0!==e.color&&(this.clearMask|=t.COLOR_BUFFER_BIT,c=!0),"number"==typeof e.depth&&(this.clearMask|=t.DEPTH_BUFFER_BIT,c=!0),"number"==typeof e.stencil&&(this.clearMask|=t.STENCIL_BUFFER_BIT,c=!0),!c)throw new Error("[TgdPainterClear] You must give at least a color or a depth in the constructor!");[this.red,this.green,this.blue,this.alpha]=o,this.depth=a,this.stencil=h}delete(){}paint(){const{clearMask:t,gl:e,red:i,green:n,blue:s,alpha:r,depth:o,stencil:a,options:h}=this;h.color&&e.clearColor(i,n,s,r),"number"==typeof h.depth&&e.clearDepth(o),"number"==typeof h.stencil&&(e.stencilMask(255),e.clearStencil(a)),e.clear(t)}}class ee{constructor({precision:t="highp",uniforms:e={},attributes:i={},varying:n={},functions:s={},mainCode:r=[]}={}){this.precision=t,this.uniforms=e,this.attributes=i,this.varying=n,this.functions=s,this.mainCode=r}get code(){return kt(["#version 300 es",`precision ${this.precision} float;`,...Gt(this.uniforms,"uniform"),...Gt(this.attributes,"in"),...Gt(this.varying,"out"),...Wt(this.functions),"","void main() {",this.mainCode,"}"])}}class ie{constructor({precision:t="highp",uniforms:e={},outputs:i={FragColor:"vec4"},varying:n={},functions:s={},mainCode:r=["FragColor = vec4(1, 0.667, 0, 1);"]}={}){this.precision="mediump",this.precision=t,this.uniforms=e,this.outputs=i,this.varying=n,this.functions=s,this.mainCode=r}get code(){return kt(["#version 300 es",`precision ${this.precision} float;`,...Gt(this.uniforms,"uniform"),...Gt(this.varying,"in"),...Gt(this.outputs,"out"),...Wt(this.functions),"","void main() {",this.mainCode,"}"])}}var ne=i(1635);class se{constructor(t,e){this.context=t,this.eventChange=new rt,this._texture=null,this._width=-1,this._height=-1,this.params={magFilter:"LINEAR",minFilter:"LINEAR",wrapS:"REPEAT",wrapT:"REPEAT",wrapR:"REPEAT"};const{gl:i}=t;this.gl=i,this.name="Texture2D/"+se.counter++,this.storage=Object.assign({width:0,height:0,internalFormat:"RGBA8",levels:1,flipY:!1,premultipliedAlpha:!1},e);const n=null==e?void 0:e.width,s=null==e?void 0:e.height;"number"==typeof n&&"number"==typeof s?this.resize(n,s):this.createTexture()}delete(){this._texture&&this.gl.deleteTexture(this._texture),this._texture=null}get width(){return this._width}get height(){return this._height}createTexture(){this.delete();const t=this.gl.createTexture();if(!t)throw new Error("Unable to create a WebGLTexture!");const{gl:e}=this;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,this.storage.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.storage.premultipliedAlpha),this._texture=t,this.setParams(this.params)}resize(t,e){if(t===this.width&&e===this.height)return;const{gl:i,storage:n}=this;this.createTexture(),this._width=t,this._height=e,n.width=t,n.height=e,this.bind(),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,this.storage.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.storage.premultipliedAlpha);const{internalFormat:s,levels:r}=this.storage;if(s.startsWith("COMPRESSED_")&&!i.getExtension("WEBGL_compressed_texture_etc"))throw new Error('Your browser does not support extension "WEBGL_compressed_texture_etc" on this device!');i.texStorage2D(i.TEXTURE_2D,r,i[s],t,e),this.checkError()}checkError(){const{gl:t}=this,e=t.getError();e!==t.NO_ERROR&&console.error(`[TgdTexture2D::${this.name}] Error:`,n(e))}get glTexture(){if(this._texture)return this._texture;throw new Error(`Texture "${this.name}" has been deleted!`)}bind(){this.gl.bindTexture(this.gl.TEXTURE_2D,this.glTexture)}loadBitmap(t,e={}){var i,n,s,r;if(!t)return this;if("string"==typeof t)return this.loadBitmap(function(t){return(0,ne.sH)(this,void 0,void 0,(function*(){return new Promise((e=>{const i=new Image;i.addEventListener("load",(()=>e(i))),i.addEventListener("error",(()=>{console.error("Unable to load image:",t),e(null)})),i.src=t}))}))}(t),e);if(!((r=t)instanceof ImageData||r instanceof HTMLImageElement||r instanceof HTMLCanvasElement||r instanceof HTMLVideoElement||r instanceof ImageBitmap))return t.then((t=>this.loadBitmap(t))).catch((t=>console.error("Unable to load texture BMP:",t))),this;const{storage:o,gl:a}=this,{level:h=0}=e;return this._width=t.width,this._height=t.height,this.bind(),a.texImage2D(a.TEXTURE_2D,h,a[o.internalFormat],a[function(t){for(const[e,i]of re)if(i.has(t))return e;throw new Error(`There is no compatible format for internalFormat "${t}" and type "UNSIGNED_BYTE"!`)}(o.internalFormat)],a.UNSIGNED_BYTE,t),this.checkError(),e.generateMipmap&&(this.generateMipmap(),this.checkError()),null===(n=(i=this.context).paint)||void 0===n||n.call(i),null===(s=e.onLoad)||void 0===s||s.call(e),this.eventChange.dispatch(this),this}loadData(t,e){const{level:i=0,width:n,height:s,internalFormat:r="RGB",format:o="RGB"}=e,{gl:a}=this;return this.bind(),a.texImage2D(a.TEXTURE_2D,i,a[r],n,s,0,a[o],a.UNSIGNED_BYTE,t),this.checkError(),this.eventChange.dispatch(this),this}activate(t,e,i){const{gl:n}=this;return n.activeTexture(n.TEXTURE0+t),this.bind(),e&&i&&e.uniform1i(i,t),this}generateMipmap(){const{gl:t}=this;return this.bind(),t.generateMipmap(t.TEXTURE_2D),this}setParams(t){return this.bind(),function(t,{wrapS:e,wrapT:i,wrapR:n,minFilter:s,magFilter:r}){e&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t[e]),i&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t[i]),n&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_R,t[n]),s&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t[s]),r&&t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t[r])}(this.gl,t),this.params=Object.assign(Object.assign({},this.params),t),this}set textureBaseLevel(t){const{gl:e}=this;this.bind(),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_BASE_LEVEL,t)}get textureBaseLevel(){const{gl:t}=this;return this.bind(),t.getTexParameter(t.TEXTURE_2D,t.TEXTURE_BASE_LEVEL)}set textureMaxLevel(t){const{gl:e}=this;this.bind(),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAX_LEVEL,t)}get textureMaxLevel(){const{gl:t}=this;return this.bind(),t.getTexParameter(t.TEXTURE_2D,t.TEXTURE_MAX_LEVEL)}getParameter(t){const{gl:e,glTexture:i}=this;return e.bindTexture(e.TEXTURE_2D,i),e.getTexParameter(e.TEXTURE_2D,e[t])}debug(t){var e;console.log(null!==(e=null!=t?t:this.name)&&void 0!==e?e:"TgdTexture2D","  ",this.width,"×",this.height);const i=["TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_R","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAX_LEVEL","TEXTURE_MAX_LOD","TEXTURE_MIN_LOD","TEXTURE_BASE_LEVEL","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","TEXTURE_IMMUTABLE_FORMAT","TEXTURE_IMMUTABLE_LEVELS"];for(const t of i){const e=this.getParameter(t);console.log(">",t,"=",e,"number"==typeof e?`(${n(e)})`:" ")}}}se.counter=0;const re=[["RGB",new Set(["RGB","RGB8","RGB565","SRGB8","RGB8_SNORM","RGB565","R11F_G11F_B10F","RGB9_E5","RGB16F","R11F_G11F_B10F","RGB9_E5","RGB32F","RGB16F","R11F_G11F_B10F","RGB9_E5"])],["RGBA",new Set(["RGBA","RGBA8","RGB5_A1","RGBA4","SRGB8_ALPHA8","RGBA8_SNORM","RGBA4","RGB5_A1","RGB10_A2","RGB5_A1","RGBA16F","RGBA32F","RGBA16F"])],["RG",new Set(["RG8"])],["RED",new Set(["R8"])]];new m(.8,.6,.1,1),new m(.6,1,.9,1),new m(.9,.5,.1,1);class oe extends ct{constructor(t,e){super(),this.context=t,this.minRadius=0,this.radiusMultiplier=1,this.radiusConstant=1,this.radiusSwitch=0,this.light=1,this.shiftZ=0,this.contrast=.3,this.specularIntensity=.4,this.specularExponent=30;const{roundness:i=3,minRadius:n=0,makeDataset:s}=e;if(this.minRadius=n,i>127)throw new Error("[TgdPainterSegments] Max roundness is 127!");if(i<0)throw new Error("[TgdPainterSegments] Min roundness is 0!");this.colorTexture=new se(t).setParams({magFilter:"NEAREST",minFilter:"NEAREST",wrapR:"CLAMP_TO_EDGE",wrapS:"CLAMP_TO_EDGE",wrapT:"CLAMP_TO_EDGE"}).loadBitmap(function(t,e=0,i=0){const n=e>0?e:t.length,s=i>0?i:Math.ceil(t.length/n),{canvas:r,ctx:o}=dt(n,s);let a=0;for(let e=0;e<s;e++)for(let i=0;i<n;i++)o.fillStyle=t[a%t.length],o.fillRect(i,e,1,1),a++;return r}(["#f44","#4f4","#44f"]));const r=new zt(t.gl,{vert:"#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uniTexture;\nuniform mat4 uniModelViewMatrix;\nuniform mat4 uniProjectionMatrix;\n// Minimal value for the radius.\nuniform float uniMinRadius;\n// Multiply all radii by this value.\nuniform float uniRadiusMultiplier;\n// When uniRadiusSwitch == 1.0,\n// we use uniRadiusConstant as radius. \nuniform float uniRadiusConstant;\n// 0.0 means we will use the radius defined\n// in the attribute attAxyzr or attBaxyz.\n// 1.0 means we use uniRadiusConstant for\n// all vertices.\nuniform float uniRadiusSwitch;\n// Multiply the color by this value;\nuniform float uniLight;\n// Push the segments away from camera of `uniShiftZ`.\n// This can be used if you want contours on the segments:\n// just increase `uniRadiusMultiplier`, set a low `uniLight`,\n// and set a small positive `uniShiftZ`.\nuniform float uniShiftZ;\n\n//===================\n// Vertex attributes\n//-------------------\n\n// Position of the vertex, relative to\n// the current center and assuming a\n// radius of 1.\n// Z tells you what tip is your center: 0 for A and 1 for B.\nin vec3 attOffset;\n// Normals of the tube that represents the segment.\nin vec3 attNormal;\n\n//=====================\n// Instance attributes\n//---------------------\n\n// Coords and radious of tip A.\nin vec4 attAxyzr;\n// Coords and radious of tip B.\nin vec4 attBxyzr;\n// The color is taken from a texture.\nin vec2 attAuv;\nin vec2 attBuv;\n// 0 means that nothing modifies the initial radius,\n// except the minRadius.\nin float attAinfluence;\nin float attBinfluence;\n\n\nout vec4 varColor;\nout vec3 varNormal;\n\n\nvec3 worldToCamera(vec3 v);\nfloat getRadius(float tip);\nmat3 getTransfoMatrix(float tip, vec3 camA, vec3 camB);\n\nvoid main() {\n    vec3 camA = worldToCamera(attAxyzr.xyz);\n    vec3 camB = worldToCamera(attBxyzr.xyz);\n    float tip = attOffset.z;\n    float radius = getRadius(tip);\n    mat3 transfo = getTransfoMatrix(tip, camA, camB);\n    vec3 point = transfo * vec3(attOffset.xy * radius, 1.0);\n    varNormal = attNormal;\n    point.z -= uniShiftZ + abs(attOffset.y) * radius;\n    gl_Position = \n        uniProjectionMatrix \n        * vec4(point, 1);\n    vec2 uv = mix(attAuv, attBuv, tip);\n    // float Z = 1.0 - abs(point.z) * 0.0001;\n    // Z = pow(Z, 0.025);\n    float light = uniLight; // * Z;\n    varColor = texture(uniTexture, uv) * vec4(vec3(light), 1.0);\n    // varColor = vec4(vec3(1.0 - Z, Z, 0.0), varColor.a);\n}\n\nfloat getRadius(float tip) {\n    float influence = mix(attAinfluence, attBinfluence, tip);\n    float originalRadius = mix(\n        attAxyzr.w,\n        attBxyzr.w,\n        tip\n    );\n    float modifiedRadius = mix(\n        originalRadius,\n        uniRadiusConstant,\n        uniRadiusSwitch\n    ) * uniRadiusMultiplier;\n    float radius = mix(\n        originalRadius,\n        modifiedRadius,\n        influence\n    );\n    return max(uniMinRadius, radius);\n}\n\nvec3 worldToCamera(vec3 v) {\n    vec4 result = uniModelViewMatrix * vec4(v, 1.0);\n    return result.xyz;\n}\n\nmat3 getTransfoMatrix(float tip, vec3 camA, vec3 camB) {\n    // What is the current tip?\n    vec3 camO = mix(camA, camB, tip);\n    vec2 A = camA.xy;\n    vec2 B = camB.xy;\n    vec3 Y = vec3(\n        A == B ? vec2(0, 1) : normalize(A - B),\n        0\n    );\n    vec3 X = vec3(Y.y, -Y.x, 0);\n    return mat3(X, Y, camO);\n}",frag:"#version 300 es\n\nprecision highp float;\n\nuniform float uniContrast;\nuniform float uniSpecularIntensity;\nuniform float uniSpecularExponent;\n\nin vec4 varColor;\nin vec3 varNormal;\n\nout vec4 FragColor;\n\n\nvoid main() {\n    if (varColor.a < 1.0) discard;\n\n    float z = normalize(varNormal).z;\n    float light = z * uniContrast + (1.0 - uniContrast);\n    float spec = pow(z, uniSpecularExponent) * uniSpecularIntensity;\n    FragColor =vec4(varColor.rgb * light + vec3(spec), varColor.w); // varColor;\n}\n"});this.prg=r;const{capsule:o,elements:a}=function(t){const e=[0,0,0,1,0,0,-1,0,0,0,0,1,1,0,1,-1,0,1],i=[0,0,1,1,0,0,-1,0,0,0,0,1,1,0,0,-1,0,0],n=[0,3,1,3,4,1,0,2,5,3,0,5];if(t>0){let s=1,r=4,o=6;const a=new f;for(let h=0;h<t;h++){const c=Math.PI*(h+1)/(t+1),u=Math.cos(c),l=Math.sin(c);e.push(u,l,0),a.from([u,0,1-Math.abs(u)]),i.push(a.x,a.y,a.z),n.push(0,s,o),s=o,o++,e.push(u,-l,1),a.from([u,0,1-Math.abs(u)]).normalize(),i.push(a.x,a.y,a.z),n.push(3,o,r),r=o,o++}n.push(0,s,2),n.push(3,5,r)}const s=new Kt({attOffset:"vec3",attNormal:"vec3"});return s.set("attOffset",new Float32Array(e)),s.set("attNormal",new Float32Array(i)),{capsule:s,elements:new Uint8Array(n)}}(i),h=s();h.debug(),this.vao=new Qt(t.gl,r,[o,h],a),this.vertexCount=a.length,this.instanceCount=h.count}delete(){this.vao.delete()}paint(t,e){const{context:i,prg:n,vao:s,colorTexture:r,vertexCount:o,instanceCount:a,light:h,radiusMultiplier:c,radiusConstant:u,radiusSwitch:l,shiftZ:d,contrast:f,specularIntensity:m,specularExponent:g}=this,{gl:p,camera:E}=i;p.disable(p.DITHER),n.use();const A=this.minRadius*E.spaceHeightAtTarget/(E.zoom*E.screenHeight);n.uniform1f("uniMinRadius",A),n.uniform1f("uniLight",h),n.uniform1f("uniShiftZ",d),n.uniform1f("uniRadiusMultiplier",c),n.uniform1f("uniRadiusConstant",u),n.uniform1f("uniRadiusSwitch",l),n.uniform1f("uniContrast",f),n.uniform1f("uniSpecularIntensity",m),n.uniform1f("uniSpecularExponent",g),r.activate(0,n,"uniTexture"),n.uniformMatrix4fv("uniModelViewMatrix",E.matrixModelView),n.uniformMatrix4fv("uniProjectionMatrix",E.matrixProjection),s.bind(),p.drawElementsInstanced(p.TRIANGLES,o,p.UNSIGNED_BYTE,0,a)}}class ae{constructor(){this._count=0,this.attAxyzr=[],this.attAuv=[],this.attAinfluence=[],this.attBxyzr=[],this.attBuv=[],this.attBinfluence=[],this.makeDataset=()=>{const t=new Kt({attAxyzr:"vec4",attAuv:"vec2",attAinfluence:"float",attBxyzr:"vec4",attBuv:"vec2",attBinfluence:"float"},{divisor:1});return t.set("attAxyzr",new Float32Array(this.attAxyzr)),t.set("attAuv",new Float32Array(this.attAuv)),t.set("attAinfluence",new Float32Array(this.attAinfluence)),t.set("attBxyzr",new Float32Array(this.attBxyzr)),t.set("attBuv",new Float32Array(this.attBuv)),t.set("attBinfluence",new Float32Array(this.attBinfluence)),t}}get count(){return this._count}add(t,e,i=[0,0],n=[0,0],s=1,r=1){this.attAxyzr.push(...t),this.attAuv.push(...i),this.attAinfluence.push(s),this.attBxyzr.push(...e),this.attBuv.push(...n),this.attBinfluence.push(r),this._count++}}new f(1,0,0),new f(0,1,0),new f(0,0,1),new f(-1,0,0),new f(0,-1,0),new f(0,0,-1),Math.E,Math.PI,Math.PI,Math.PI,Math.PI,Math.PI,Math.PI,new it(1,0)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,