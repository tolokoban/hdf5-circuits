(()=>{"use strict";var t,n,e,r={377:(t,n,e)=>{var r=e(4848),o=e(6540),a=e(5338),s=e(6586),i=e(9419),l=e(5072),c=e.n(l),u=e(7825),d=e.n(u),h=e(7659),f=e.n(h),p=e(5056),A=e.n(p),g=e(540),m=e.n(g),v=e(1113),y=e.n(v),b=e(8209),C={};C.styleTagTransform=y(),C.setAttributes=A(),C.insert=f().bind(null,"head"),C.domAPI=d(),C.insertStyleElement=m(),c()(b.A,C);const w=b.A&&b.A.locals?b.A.locals:void 0;function x({children:t}){return(0,r.jsx)("div",{className:w.Layoutbackground,children:t})}var k=e(2592),j=e(7101);function I({children:t}){return k.U.data.useValue()?(0,r.jsx)(r.Fragment,{children:t}):(0,r.jsx)(s.sWC,{display:"grid",placeItems:"center",color:"neutral-5",children:(0,r.jsxs)(s.sWC,{color:"error",padding:"L",display:"flex",flexDirection:"column",children:[(0,r.jsx)("p",{children:"There is no file loaded yet..."}),(0,r.jsx)("hr",{}),(0,r.jsx)(s.yQN,{onClick:"#/",variant:"text",icon:s.Gk,children:"Back to main page"}),(0,r.jsx)(s.yQN,{onClick:()=>{(0,j.s)("merged-morphologies.h5").then((t=>k.U.data.value=t))},variant:"text",icon:s.Thu,children:"Load default example"})]})})}const B=o.lazy((()=>e.e(582).then(e.bind(e,8582)))),E=o.lazy((()=>Promise.all([e.e(978),e.e(27)]).then(e.bind(e,4027))));function L({lang:t}){const n=(0,i.s9)(),e=(0,r.jsx)("div",{children:"Loading..."}),o=x,a=B,s=I,l=E;return(0,r.jsx)(S,{path:"/",Page:a,Layout:o,fallback:e,context:n,children:(0,r.jsx)(S,{path:"/data",Page:l,Layout:s,fallback:e,context:n})})}function S({path:t,fallback:n,children:e,Page:a,Layout:s,Template:l,context:c}){const u=c&&(0,i.Di)(c.path,i.bw[t]);if(!u)return null;if(0===u.distance){if(!a)return null;const t=l?(0,r.jsx)(l,{params:u.params,children:(0,r.jsx)(a,{params:u.params})}):(0,r.jsx)(a,{params:u.params});return s?(0,r.jsx)(s,{params:u.params,children:(0,r.jsx)(o.Suspense,{fallback:n,children:t})}):(0,r.jsx)(o.Suspense,{fallback:n,children:t})}return s?(0,r.jsx)(s,{params:u.params,children:e}):(0,r.jsx)(r.Fragment,{children:e})}var T=e(9165),O={};O.styleTagTransform=y(),O.setAttributes=A(),O.insert=f().bind(null,"head"),O.domAPI=d(),O.insertStyleElement=m(),c()(T.A,O),T.A&&T.A.locals&&T.A.locals;var P,W=e(8347),_=e(2197);const N=null!==(P=localStorage.getItem("Language"))&&void 0!==P?P:navigator.language,H=new W.A(N,{storage:{id:"Language",guard:_.Kg}});function M(){const[,t]=H.useState();return o.useEffect((()=>{const n=new URLSearchParams(window.location.search).get("lang");"string"==typeof n&&n.length>1&&t(n),function(){const t=document.getElementById("splash");t&&(t.classList.add("vanish"),window.setTimeout((()=>{const n=t.parentNode;n&&n.removeChild(t)}),900))}()}),[t]),(0,r.jsx)(o.StrictMode,{children:(0,r.jsx)(s.Znq,{children:(0,r.jsx)(L,{})})})}!function(){s.Sxu.apply();const t=document.getElementById("app");(0,a.H)(t).render((0,r.jsx)(M,{}))}()},2592:(t,n,e)=>{e.d(n,{U:()=>o});var r=e(8347);const o={data:new r.A(null),groupsToDisplay:new r.A([])}},7101:(t,n,e)=>{e.d(n,{s:()=>i});var r=e(2197),o=e(6327);class a{static fromArrayBuffer(t,n="<ROOT>"){const e=new o.ZH(t,n);return new a(e,n)}constructor(t,n){this.root=t,this.name=n}get keys(){const t=this.root,n=(0,r.Tn)(t.keys)?t.keys():t.keys;return(0,r.Xj)(n,["array","string"])?n:[]}get attrs(){var t;const n=this.root;return structuredClone(null!==(t=n.attrs)&&void 0!==t?t:{})}get value(){return this.root.value}get(t){const n=[this.name,t].join("/"),e=this.root.get(t);if(!e)throw new Error(`Path "${n}" does not exist!`);return new a(e,n)}has(t){return this.keys.includes(t)}}var s=function(t,n,e,r){return new(e||(e=Promise))((function(o,a){function s(t){try{l(r.next(t))}catch(t){a(t)}}function i(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,i)}l((r=r.apply(t,n||[])).next())}))};function i(t){return s(this,void 0,void 0,(function*(){const n=yield function(t){return new Promise(((n,e)=>{if((0,r.Kg)(t))fetch(t).then((t=>t.arrayBuffer().then(n).catch(e))).catch(e);else{const r=new FileReader;r.onload=()=>{const t=r.result;t instanceof ArrayBuffer?n(t):e("Invalid format")},r.onerror=e,r.readAsArrayBuffer(t)}}))}(t);return a.fromArrayBuffer(n,(0,r.Kg)(t)?"Example":t.name)}))}},8209:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),o=e.n(r),a=e(6314),s=e.n(a)()(o());s.push([t.id,".src-app-layout-module_Layoutbackground_NCtEei,\n.src-app-layout-module_Layoutbackground_NCtEei > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n","",{version:3,sources:["webpack://./src/app/layout.module.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB",sourcesContent:[".Layoutbackground,\n.Layoutbackground > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n"],sourceRoot:""}]),s.locals={Layoutbackground:"src-app-layout-module_Layoutbackground_NCtEei"};const i=s},9165:(t,n,e)=>{e.d(n,{A:()=>i});var r=e(1354),o=e.n(r),a=e(6314),s=e.n(a)()(o());s.push([t.id,'html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nhr {\n    content: "";\n    width: 100%;\n    color: currentColor;\n    border: none;\n    height: 1px;\n    background: linear-gradient(\n        to left,\n        transparent,\n        currentColor,\n        currentColor,\n        transparent\n    );\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;IAGI,SAAS;IACT,mCAAmC;IACnC,kCAAkC;IAClC,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;IACI;iBACa;AACjB;;AAEA;IACI,UAAU;IACV,wBAAwB;AAC5B;;AAEA;IACI,WAAW;IACX,WAAW;IACX,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX;;;;;;KAMC;AACL",sourcesContent:['html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n\nhr {\n    content: "";\n    width: 100%;\n    color: currentColor;\n    border: none;\n    height: 1px;\n    background: linear-gradient(\n        to left,\n        transparent,\n        currentColor,\n        currentColor,\n        transparent\n    );\n}\n'],sourceRoot:""}]);const i=s},9419:(t,n,e)=>{e.d(n,{Di:()=>i,bw:()=>o,gQ:()=>a,s9:()=>u});var r=e(6540);const o={"/":["/"],"/data":["/data"]};function a(t,...n){var e;const r=function(t,n){const e=o[t];let r=0;return e.map((t=>"["===t.charAt(0)?n[r++]:t)).join("/")}(t,n);return r!==(null===(e=f().value)||void 0===e?void 0:e.path)&&(window.location.hash=r,!0)}function s(t){let n=null;for(const e of Object.values(o)){const r=i(t,e);if(r){if(0===r.distance)return r;(!n||r.distance<n.distance)&&(n=r)}}return n}function i(t,n){if(!n)return null;let e=t;const r={};for(let t=0;t<n.length;t++){if(e.length<1)return null;const o=n[t];if(o.startsWith("[")){const t=o.substring(1,o.length-1),[n,a]=l(e);r[t]=n,e=a}else{if(!e.startsWith(o))return null;e=e.substring(o.length+1)}}return{path:t,route:n.join("/"),params:r,distance:e.length}}function l(t){const n=t.indexOf("/");return n<0?[t,""]:[t.substring(0,n),t.substring(n+1)]}class c{constructor(t){this.security=t,this.listeners=new Set,this._value=null,this.handleHashChange=t=>{const n=this.extractHash(t.oldURL),e=this.extractHash(t.newURL),r=this.ensureAbsoluteHash(e,n);r!==e&&globalThis.history.replaceState({},"",`#${r}`),this.setHash(r)},this.nonEmpty=t=>"string"==typeof t&&t.trim().length>0;const n=this.extractHash(window.location.href);this.setHash(n).then((()=>window.addEventListener("hashchange",this.handleHashChange))).catch((t=>{console.error(`Unable to set hash to "${n}":`,t)}))}addListener(t){this.listeners.add(t)}removeListener(t){this.listeners.delete(t)}get value(){return this._value}setHash(t){return n=this,e=void 0,o=function*(){var n;let e=s(t);if(e)for(const[n,r]of this.security){if(!e.route.startsWith(n))continue;const o=yield r(e.route,t);if(o&&o!==e.route){if(e=s(o),!e)break;return this._value=null,void a(e.path)}}(null===(n=this._value)||void 0===n?void 0:n.route)!==(null==e?void 0:e.route)&&(this._value=e,this.listeners.forEach((t=>t(e))))},new((r=void 0)||(r=Promise))((function(t,a){function s(t){try{l(o.next(t))}catch(t){a(t)}}function i(t){try{l(o.throw(t))}catch(t){a(t)}}function l(n){var e;n.done?t(n.value):(e=n.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,i)}l((o=o.apply(n,e||[])).next())}));var n,e,r,o}extractHash(t){const n=new URL(t).hash;return n?n.startsWith("#")?n.substring(1):n:"/"}ensureAbsoluteHash(t,n){if(t.startsWith("/"))return t;let e=t;for(;e.startsWith("./");)e=e.substring(2);const r=n.split("/").filter(this.nonEmpty);for(const n of t.split("/"))".."===n?r.length>0&&r.pop():r.push(n);return`/${r.filter(this.nonEmpty).join("/")}`}}function u(){const[t,n]=r.useState(f().value);return r.useEffect((()=>{const t=t=>{n(t)};return f().addListener(t),()=>f().removeListener(t)}),[]),t}const d=[];let h=null;function f(){return h||(h=new c(d)),h}}},o={};function a(t){var n=o[t];if(void 0!==n)return n.exports;var e=o[t]={id:t,exports:{}};return r[t].call(e.exports,e,e.exports,a),e.exports}a.m=r,t=[],a.O=(n,e,r,o)=>{if(!e){var s=1/0;for(u=0;u<t.length;u++){for(var[e,r,o]=t[u],i=!0,l=0;l<e.length;l++)(!1&o||s>=o)&&Object.keys(a.O).every((t=>a.O[t](e[l])))?e.splice(l--,1):(i=!1,o<s&&(s=o));if(i){t.splice(u--,1);var c=r();void 0!==c&&(n=c)}}return n}o=o||0;for(var u=t.length;u>0&&t[u-1][2]>o;u--)t[u]=t[u-1];t[u]=[e,r,o]},a.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return a.d(n,{a:n}),n},a.d=(t,n)=>{for(var e in n)a.o(n,e)&&!a.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},a.f={},a.e=t=>Promise.all(Object.keys(a.f).reduce(((n,e)=>(a.f[e](t,n),n)),[])),a.u=t=>"scr/"+t+"."+{27:"5c06a6c12188a9ab3e19",582:"205491086465ff3cc252",978:"7cf1372510287b1806a3"}[t]+".js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),a.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),n={},e="hdf5-circuits:",a.l=(t,r,o,s)=>{if(n[t])n[t].push(r);else{var i,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==t||d.getAttribute("data-webpack")==e+o){i=d;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,a.nc&&i.setAttribute("nonce",a.nc),i.setAttribute("data-webpack",e+o),i.src=t),n[t]=[r];var h=(e,r)=>{i.onerror=i.onload=null,clearTimeout(f);var o=n[t];if(delete n[t],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((t=>t(r))),e)return e(r)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=h.bind(null,i.onerror),i.onload=h.bind(null,i.onload),l&&document.head.appendChild(i)}},a.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;a.g.importScripts&&(t=a.g.location+"");var n=a.g.document;if(!t&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");if(e.length)for(var r=e.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=e[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=t+"../"})(),(()=>{var t={524:0};a.f.j=(n,e)=>{var r=a.o(t,n)?t[n]:void 0;if(0!==r)if(r)e.push(r[2]);else{var o=new Promise(((e,o)=>r=t[n]=[e,o]));e.push(r[2]=o);var s=a.p+a.u(n),i=new Error;a.l(s,(e=>{if(a.o(t,n)&&(0!==(r=t[n])&&(t[n]=void 0),r)){var o=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;i.message="Loading chunk "+n+" failed.\n("+o+": "+s+")",i.name="ChunkLoadError",i.type=o,i.request=s,r[1](i)}}),"chunk-"+n,n)}},a.O.j=n=>0===t[n];var n=(n,e)=>{var r,o,[s,i,l]=e,c=0;if(s.some((n=>0!==t[n]))){for(r in i)a.o(i,r)&&(a.m[r]=i[r]);if(l)var u=l(a)}for(n&&n(e);c<s.length;c++)o=s[c],a.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return a.O(u)},e=self.webpackChunkhdf5_circuits=self.webpackChunkhdf5_circuits||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))})(),a.nc=void 0;var s=a.O(void 0,[515],(()=>a(377)));s=a.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFnQywyQkFBSyxHQUNsR0QsRUFBbUJoRyxRQUFRMkYsRUFBcUJyQixLQUFLLEtBQU0sSUFDM0QwQixFQUFtQjdKLEtBQU93SixFQUFxQnJCLEtBQUssS0FBTTBCLEVBQW1CN0osS0FBS21JLEtBQUswQixHLEtDckZ2RnBGLEVBQW9CbUQsUUFBS3hPLEVDR3pCLElBQUkyUSxFQUFzQnRGLEVBQW9CTyxPQUFFNUwsRUFBVyxDQUFDLE1BQU0sSUFBT3FMLEVBQW9CLE9BQzdGc0YsRUFBc0J0RixFQUFvQk8sRUFBRStFLEUiLCJzb3VyY2VzIjpbIndlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vaGRmNS1jaXJjdWl0cy8uL3NyYy9hcHAvbGF5b3V0Lm1vZHVsZS5jc3M/MTE2NCIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL09CSS9oZGY1LWNpcmN1aXRzL3NyYy9hcHAvbGF5b3V0LnRzeCIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL09CSS9oZGY1LWNpcmN1aXRzL3NyYy9hcHAvZGF0YS9sYXlvdXQudHN4IiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvT0JJL2hkZjUtY2lyY3VpdHMvc3JjL2FwcC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vaGRmNS1jaXJjdWl0cy8uL3NyYy9pbmRleC5jc3M/YjAyZiIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL09CSS9oZGY1LWNpcmN1aXRzL3NyYy9sYW5nL2xhbmcudHMiLCIvaG9tZS90b2xva29iYW4vQ29kZS9PQkkvaGRmNS1jaXJjdWl0cy9zcmMvaW5kZXgudHN4IiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvT0JJL2hkZjUtY2lyY3VpdHMvc3JjL3N0YXRlLnRzIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvT0JJL2hkZjUtY2lyY3VpdHMvc3JjL2RhdGEvaGRmNS50cyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL09CSS9oZGY1LWNpcmN1aXRzL3NyYy9kYXRhL2RhdGEudHMiLCIvaG9tZS90b2xva29iYW4vQ29kZS9PQkkvaGRmNS1jaXJjdWl0cy9zcmMvYXBwL2xheW91dC5tb2R1bGUuY3NzIiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvT0JJL2hkZjUtY2lyY3VpdHMvc3JjL2luZGV4LmNzcyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL09CSS9oZGY1LWNpcmN1aXRzL3NyYy9hcHAvcm91dGVzLnRzIiwid2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcImhkZjUtY2lyY3VpdHM6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL2xheW91dC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vbGF5b3V0Lm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IFN0eWxlcyBmcm9tIFwiLi9sYXlvdXQubW9kdWxlLmNzc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheW91dEJhY2tncm91bmQoe1xuICAgIGNoaWxkcmVuLFxufToge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn0pIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e1N0eWxlcy5MYXlvdXRiYWNrZ3JvdW5kfT57Y2hpbGRyZW59PC9kaXY+XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEljb25BcnJvd0xlZnQsIEljb25JbXBvcnQsIFZpZXdCdXR0b24sIFZpZXdQYW5lbCB9IGZyb20gXCJAdG9sb2tvYmFuL3VpXCJcblxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiQC9zdGF0ZVwiXG5pbXBvcnQgeyBsb2FkSERGNSB9IGZyb20gXCJAL2RhdGEvZGF0YVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheW91dEJhY2tncm91bmQoe1xuICAgIGNoaWxkcmVuLFxufToge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn0pIHtcbiAgICBjb25zdCBkYXRhID0gU3RhdGUuZGF0YS51c2VWYWx1ZSgpXG4gICAgY29uc3QgaGFuZGxlTG9hZERlZmF1bHRGaWxlID0gKCkgPT4ge1xuICAgICAgICBsb2FkSERGNShcIm1lcmdlZC1tb3JwaG9sb2dpZXMuaDVcIikudGhlbihcbiAgICAgICAgICAgIChkYXRhKSA9PiAoU3RhdGUuZGF0YS52YWx1ZSA9IGRhdGEpXG4gICAgICAgIClcbiAgICB9XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Vmlld1BhbmVsIGRpc3BsYXk9XCJncmlkXCIgcGxhY2VJdGVtcz1cImNlbnRlclwiIGNvbG9yPVwibmV1dHJhbC01XCI+XG4gICAgICAgICAgICAgICAgPFZpZXdQYW5lbFxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImVycm9yXCJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZz1cIkxcIlxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5PVwiZmxleFwiXG4gICAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgaXMgbm8gZmlsZSBsb2FkZWQgeWV0Li4uPC9wPlxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgICAgICAgICAgPFZpZXdCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9XCIjL1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uPXtJY29uQXJyb3dMZWZ0fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICBCYWNrIHRvIG1haW4gcGFnZVxuICAgICAgICAgICAgICAgICAgICA8L1ZpZXdCdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxWaWV3QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVMb2FkRGVmYXVsdEZpbGV9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uPXtJY29uSW1wb3J0fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2FkIGRlZmF1bHQgZXhhbXBsZVxuICAgICAgICAgICAgICAgICAgICA8L1ZpZXdCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9WaWV3UGFuZWw+XG4gICAgICAgICAgICA8L1ZpZXdQYW5lbD5cbiAgICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiA8PntjaGlsZHJlbn08Lz5cbn1cbiIsIi8qKlxuICogYnVpbGQtcmVhY3Qtcm91dGVzXG4gKlxuICogV0FSTklORyEgdGhpcyBmaWxlIGhhcyBiZWVuIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxuICogUGxlYXNlIGRvIG5vdCBlZGl0IGl0IGJlY2F1c2UgaXQgd2lsbCBwcm9iYWJseSBiZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBJZiB5b3UgZmluZCBhIGJ1ZyBvciBpZiB5b3UgbmVlZCBhbiBpbXByb3ZlbWVudCwgcGxlYXNlIGZpbGwgYW4gaXNzdWU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vdG9sb2tvYmFuL2J1aWxkLXJlYWN0LXJvdXRlcy9pc3N1ZXNcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHsgbWF0Y2hSb3V0ZSwgdXNlUm91dGVDb250ZXh0LCBST1VURVMgfSBmcm9tIFwiLi9yb3V0ZXNcIlxuaW1wb3J0IHsgUm91dGVNYXRjaCwgUm91dGVQYXRoIH0gZnJvbSBcIi4vdHlwZXNcIlxuXG5leHBvcnQgKiBmcm9tIFwiLi9yb3V0ZXNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIlxuXG5cbmltcG9ydCBMYXlvdXQwIGZyb20gXCIuL2xheW91dFwiXG5pbXBvcnQgTGF5b3V0MSBmcm9tIFwiLi9kYXRhL2xheW91dFwiXG5jb25zdCBQYWdlMCA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi9wYWdlXCIpKVxuY29uc3QgUGFnZTEgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vZGF0YS9wYWdlXCIpKVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoeyBsYW5nIH06IHsgbGFuZz86IHN0cmluZyB9KSB7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZVJvdXRlQ29udGV4dCgpXG4gICAgY29uc3QgZmIgPSA8ZGl2PkxvYWRpbmcuLi48L2Rpdj5cbiAgICBjb25zdCBseTAgPSBMYXlvdXQwXG4gICAgY29uc3QgcGcwID0gUGFnZTBcbiAgICBjb25zdCBseTEgPSBMYXlvdXQxXG4gICAgY29uc3QgcGcxID0gUGFnZTFcbiAgICByZXR1cm4gKFxuICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBQYWdlPXtwZzB9IExheW91dD17bHkwfSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZGF0YVwiIFBhZ2U9e3BnMX0gTGF5b3V0PXtseTF9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICA8L1JvdXRlPlxuICAgIClcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuZnVuY3Rpb24gaW50bDxUIGV4dGVuZHMgUGFnZUNvbXBvbmVudCB8IENvbnRhaW5lckNvbXBvbmVudCB8IFJlYWN0LlJlYWN0Tm9kZT4oXG4gICAgcGFnZTogVCxcbiAgICB0cmFuc2xhdGlvbnM6IFJlY29yZDxzdHJpbmcsIFQ+LFxuICAgIGxhbmcgPSBcIlwiXG4pOiBUIHtcbiAgICBjb25zdCBjYW5kaWRhdGUxID0gdHJhbnNsYXRpb25zW2xhbmddXG4gICAgaWYgKGNhbmRpZGF0ZTEpIHJldHVybiBjYW5kaWRhdGUxXG5cbiAgICBjb25zdCBbcHJlZml4XSA9IGxhbmcuc3BsaXQoXCItXCIpXG4gICAgY29uc3QgY2FuZGlkYXRlMiA9IHRyYW5zbGF0aW9uc1twcmVmaXhdXG4gICAgaWYgKGNhbmRpZGF0ZTIpIHJldHVybiBjYW5kaWRhdGUyXG5cbiAgICByZXR1cm4gcGFnZVxufVxuXG50eXBlIFBhZ2VDb21wb25lbnQgPSBSZWFjdC5GQzx7IHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB9PlxudHlwZSBDb250YWluZXJDb21wb25lbnQgPSBSZWFjdC5GQzx7XG4gICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuICAgIHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxufT5cblxuaW50ZXJmYWNlIFJvdXRlUHJvcHMge1xuICAgIHBhdGg6IHN0cmluZ1xuICAgIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGVcbiAgICBmYWxsYmFjaz86IFJlYWN0LlJlYWN0Tm9kZVxuICAgIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlXG4gICAgUGFnZT86IFBhZ2VDb21wb25lbnRcbiAgICBMYXlvdXQ/OiBDb250YWluZXJDb21wb25lbnRcbiAgICBUZW1wbGF0ZT86IENvbnRhaW5lckNvbXBvbmVudFxuICAgIGNvbnRleHQ6IFJvdXRlTWF0Y2ggfCBudWxsXG59XG5cbmZ1bmN0aW9uIFJvdXRlKHtcbiAgICBwYXRoLFxuICAgIGZhbGxiYWNrLFxuICAgIGNoaWxkcmVuLFxuICAgIFBhZ2UsXG4gICAgTGF5b3V0LFxuICAgIFRlbXBsYXRlLFxuICAgIGNvbnRleHQsXG59OiBSb3V0ZVByb3BzKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBjb250ZXh0ICYmIG1hdGNoUm91dGUoY29udGV4dC5wYXRoLCBST1VURVNbcGF0aCBhcyBSb3V0ZVBhdGhdKVxuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGxcblxuICAgIGlmIChtYXRjaC5kaXN0YW5jZSA9PT0gMCkge1xuICAgICAgICBpZiAoIVBhZ2UpIHJldHVybiBudWxsXG5cbiAgICAgICAgY29uc3QgZWxlbWVudCA9IFRlbXBsYXRlID8gKFxuICAgICAgICAgICAgPFRlbXBsYXRlIHBhcmFtcz17bWF0Y2gucGFyYW1zfT5cbiAgICAgICAgICAgICAgICA8UGFnZSBwYXJhbXM9e21hdGNoLnBhcmFtc30gLz5cbiAgICAgICAgICAgIDwvVGVtcGxhdGU+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgICA8UGFnZSBwYXJhbXM9e21hdGNoLnBhcmFtc30gLz5cbiAgICAgICAgKVxuICAgICAgICBpZiAoTGF5b3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxMYXlvdXQgcGFyYW1zPXttYXRjaC5wYXJhbXN9PlxuICAgICAgICAgICAgICAgICAgICA8UmVhY3QuU3VzcGVuc2UgZmFsbGJhY2s9e2ZhbGxiYWNrfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtlbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LlN1c3BlbnNlPlxuICAgICAgICAgICAgICAgIDwvTGF5b3V0PlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8UmVhY3QuU3VzcGVuc2UgZmFsbGJhY2s9e2ZhbGxiYWNrfT57ZWxlbWVudH08L1JlYWN0LlN1c3BlbnNlPlxuICAgIH1cbiAgICByZXR1cm4gTGF5b3V0ID8gKFxuICAgICAgICA8TGF5b3V0IHBhcmFtcz17bWF0Y2gucGFyYW1zfT57Y2hpbGRyZW59PC9MYXlvdXQ+XG4gICAgKSA6IChcbiAgICAgICAgPD57Y2hpbGRyZW59PC8+XG4gICAgKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgQXRvbWljU3RhdGUgZnJvbSBcIkB0b2xva29iYW4vcmVhY3Qtc3RhdGVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIkB0b2xva29iYW4vdHlwZS1ndWFyZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY29uc3QgaW5pdGlhbExhbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkxhbmd1YWdlXCIpID8/IG5hdmlnYXRvci5sYW5ndWFnZTtcblxuY29uc3QgYXRvbWljTGFuZ3VhZ2UgPSBuZXcgQXRvbWljU3RhdGUoaW5pdGlhbExhbmcsIHtcbiAgc3RvcmFnZToge1xuICAgIGlkOiBcIkxhbmd1YWdlXCIsXG4gICAgZ3VhcmQ6IGlzU3RyaW5nLFxuICB9LFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYW5nKCk6IFtzdHJpbmcsICh2OiBzdHJpbmcpID0+IHZvaWRdIHtcbiAgcmV0dXJuIGF0b21pY0xhbmd1YWdlLnVzZVN0YXRlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYW5nVmFsdWUoKSB7XG4gIGNvbnN0IFtsYW5nXSA9IHVzZUxhbmcoKTtcbiAgcmV0dXJuIGxhbmc7XG59XG5cbmV4cG9ydCB0eXBlIFRyYW5zbGF0aW9uID0gUmVjb3JkPHN0cmluZywgUmVhY3QuUmVhY3ROb2RlPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRhbnNsYXRpb25HZW5lcmljPFQgZXh0ZW5kcyBUcmFuc2xhdGlvbj4oXG4gIGRlZmF1bHRUcmFuc2xhdGlvbjogVCxcbiAgb3RoZXJUcmFuc2xhdGlvbnM6IFJlY29yZDxzdHJpbmcsICgpID0+IFByb21pc2U8eyBkZWZhdWx0OiBUIH0+Pixcbik6IFJlYWRvbmx5PFQ+IHtcbiAgY29uc3QgW3RyYW5zbGF0aW9uLCBzZXRUcmFuc2xhdGlvbl0gPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0VHJhbnNsYXRpb24pO1xuICBjb25zdCBsYW5nID0gdXNlTGFuZ1ZhbHVlKCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdmFyaWF0aW9ucyA9IGdldExhbmdWYXJpYXRpb25zKGxhbmcpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG90aGVyVHJhbnNsYXRpb25zKSkge1xuICAgICAgaWYgKHZhcmlhdGlvbnMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBvdGhlclRyYW5zbGF0aW9uc1trZXldKClcbiAgICAgICAgICAudGhlbigob2JqKSA9PiBzZXRUcmFuc2xhdGlvbihvYmouZGVmYXVsdCkpXG4gICAgICAgICAgLmNhdGNoKChleCkgPT5cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgIGBVbmFibGUgdG8gbG9hZCB0cmFuc2xhdGlvbiBmb3IgbGFuZ3VhZ2UgXCIke2tleX1cIiFgLFxuICAgICAgICAgICAgICBleCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBzZXRUcmFuc2xhdGlvbihkZWZhdWx0VHJhbnNsYXRpb24pO1xuICB9LCBbbGFuZywgZGVmYXVsdFRyYW5zbGF0aW9uLCBvdGhlclRyYW5zbGF0aW9uc10pO1xuICByZXR1cm4gdHJhbnNsYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyBsYW5ndWFnZXMgdmVyaWF0aW9ucyBmcm9tIHRoZSBtb3N0IHNwZWNpZmljIHRvIHRoZSBsZXNzIHNwZWNpZmljLlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogZ2V0VmVyc2lvbihcInNnbi1CRS1GUlwiKSA9IFtcbiAqICAgXCJzZ24tQkUtRlJcIixcbiAqICAgXCJzZ24tQkVcIixcbiAqICAgXCJzZ25cIlxuICogXVxuICovXG5mdW5jdGlvbiBnZXRMYW5nVmFyaWF0aW9ucyhsYW5nOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHBhcnRzID0gbGFuZy5zcGxpdChcIi1cIik7XG4gIGNvbnN0IHZlcnNpb25zOiBzdHJpbmdbXSA9IFtdO1xuICB3aGlsZSAocGFydHMubGVuZ3RoID4gMCkge1xuICAgIHZlcnNpb25zLnB1c2gocGFydHMuam9pbihcIi1cIikpO1xuICAgIHBhcnRzLnBvcCgpO1xuICB9XG4gIHJldHVybiB2ZXJzaW9ucztcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCJcbmltcG9ydCB7IE1vZGFsUHJvdmlkZXIsIFRoZW1lIH0gZnJvbSBcIkB0b2xva29iYW4vdWlcIlxuXG5pbXBvcnQgQXBwIGZyb20gXCIuL2FwcFwiXG5cbmltcG9ydCBcIi4vaW5kZXguY3NzXCJcbmltcG9ydCB7IHVzZUxhbmcgfSBmcm9tIFwiLi9sYW5nXCJcblxuZnVuY3Rpb24gTGF1bmNoZXIoKSB7XG4gICAgY29uc3QgWywgc2V0TGFuZ10gPSB1c2VMYW5nKClcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBUaGUgbGFuZyBjYW4gYmUgcGFzc2VkIGFzIGFyZ3VtZW50IGZyb20gYW5vdGhlciBzaXRlLlxuICAgICAgICBjb25zdCBhcmdzID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKVxuICAgICAgICBjb25zdCBhcmcgPSBhcmdzLmdldChcImxhbmdcIilcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgJiYgYXJnLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHNldExhbmcoYXJnKVxuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSBzcGxhc2ggc2NyZWVuLlxuICAgICAgICByZW1vdmVTcGxhc2hTY3JlZW4oKVxuICAgIH0sIFtzZXRMYW5nXSlcbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICAgICAgICAgIDxNb2RhbFByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgICAgIDwvTW9kYWxQcm92aWRlcj5cbiAgICAgICAgPC9SZWFjdC5TdHJpY3RNb2RlPlxuICAgIClcbn1cblxuZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgVGhlbWUuYXBwbHkoKVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpIGFzIEhUTUxFbGVtZW50XG4gICAgY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKVxuICAgIHJvb3QucmVuZGVyKDxMYXVuY2hlciAvPilcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3BsYXNoU2NyZWVuKCkge1xuICAgIGNvbnN0IFNQTEFTSF9WQU5JU0hJTkdfREVMQVkgPSA5MDBcbiAgICBjb25zdCBzcGxhc2ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwbGFzaFwiKVxuICAgIGlmICghc3BsYXNoKSByZXR1cm5cblxuICAgIHNwbGFzaC5jbGFzc0xpc3QuYWRkKFwidmFuaXNoXCIpXG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBzcGxhc2gucGFyZW50Tm9kZVxuICAgICAgICBpZiAoIXBhcmVudCkgcmV0dXJuXG5cbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHNwbGFzaClcbiAgICB9LCBTUExBU0hfVkFOSVNISU5HX0RFTEFZKVxufVxuXG52b2lkIHN0YXJ0KClcbiIsImltcG9ydCBBdG9taWNTdGF0ZSBmcm9tIFwiQHRvbG9rb2Jhbi9yZWFjdC1zdGF0ZVwiXG5pbXBvcnQgeyBIREY1R3JvdXAgfSBmcm9tIFwiLi9kYXRhL2hkZjVcIlxuXG5leHBvcnQgY29uc3QgU3RhdGUgPSB7XG4gICAgZGF0YTogbmV3IEF0b21pY1N0YXRlPEhERjVHcm91cCB8IG51bGw+KG51bGwpLFxuICAgIGdyb3Vwc1RvRGlzcGxheTogbmV3IEF0b21pY1N0YXRlPEhERjVHcm91cFtdPihbXSksXG59XG4iLCJpbXBvcnQgeyBpc0Z1bmN0aW9uLCBpc1R5cGUgfSBmcm9tIFwiQHRvbG9rb2Jhbi90eXBlLWd1YXJkc1wiXG5pbXBvcnQgKiBhcyBoZGY1TGliIGZyb20gXCJqc2ZpdmVcIlxuXG5pbnRlcmZhY2UgSERGNUludGVybmFsR3JvdXAge1xuICAgIG5hbWU6IHN0cmluZ1xuICAgIGtleXM6IHN0cmluZ1tdXG4gICAgYXR0cnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgICB2YWx1ZT86IG51bWJlcltdXG4gICAgcGFyZW50OiBIREY1SW50ZXJuYWxHcm91cFxuICAgIGdldChwYXRoOiBzdHJpbmcpOiBIREY1SW50ZXJuYWxHcm91cFxufVxuXG5leHBvcnQgY2xhc3MgSERGNUdyb3VwIHtcbiAgICBzdGF0aWMgZnJvbUFycmF5QnVmZmVyKGRhdGE6IEFycmF5QnVmZmVyLCBmaWxlbmFtZSA9IFwiPFJPT1Q+XCIpIHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSBuZXcgaGRmNUxpYi5GaWxlKGRhdGEsIGZpbGVuYW1lKVxuICAgICAgICByZXR1cm4gbmV3IEhERjVHcm91cChncm91cCwgZmlsZW5hbWUpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSByb290OiBIREY1SW50ZXJuYWxHcm91cCxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZ1xuICAgICkge31cblxuICAgIGdldCBrZXlzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMucm9vdFxuICAgICAgICBjb25zdCBrZXlzID0gaXNGdW5jdGlvbihpdGVtLmtleXMpID8gaXRlbS5rZXlzKCkgOiBpdGVtLmtleXNcbiAgICAgICAgcmV0dXJuIGlzVHlwZTxzdHJpbmdbXT4oa2V5cywgW1wiYXJyYXlcIiwgXCJzdHJpbmdcIl0pID8ga2V5cyA6IFtdXG4gICAgfVxuXG4gICAgZ2V0IGF0dHJzKCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5yb290XG4gICAgICAgIHJldHVybiBzdHJ1Y3R1cmVkQ2xvbmUoaXRlbS5hdHRycyA/PyB7fSlcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyW10gfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5yb290XG4gICAgICAgIHJldHVybiBpdGVtLnZhbHVlXG4gICAgfVxuXG4gICAgZ2V0KHBhdGg6IHN0cmluZyk6IEhERjVHcm91cCB7XG4gICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gW3RoaXMubmFtZSwgcGF0aF0uam9pbihcIi9cIilcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMucm9vdC5nZXQocGF0aClcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdGggXCIke2Z1bGxQYXRofVwiIGRvZXMgbm90IGV4aXN0IWApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEhERjVHcm91cChpdGVtLCBmdWxsUGF0aClcbiAgICB9XG5cbiAgICBoYXMocGF0aEl0ZW06IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlzLmluY2x1ZGVzKHBhdGhJdGVtKVxuICAgIH1cbn1cbiIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIkB0b2xva29iYW4vdHlwZS1ndWFyZHNcIlxuaW1wb3J0IHsgSERGNUdyb3VwIH0gZnJvbSBcIi4vaGRmNVwiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkSERGNShmaWxlOiBGaWxlIHwgc3RyaW5nKTogUHJvbWlzZTxIREY1R3JvdXA+IHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgbG9hZEFycmF5QnVmZmVyKGZpbGUpXG4gICAgY29uc3QgaDUgPSBIREY1R3JvdXAuZnJvbUFycmF5QnVmZmVyKFxuICAgICAgICBkYXRhLFxuICAgICAgICBpc1N0cmluZyhmaWxlKSA/IFwiRXhhbXBsZVwiIDogZmlsZS5uYW1lXG4gICAgKVxuICAgIHJldHVybiBoNVxufVxuXG5mdW5jdGlvbiBsb2FkQXJyYXlCdWZmZXIoZmlsZTogRmlsZSB8IHN0cmluZyk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoaXNTdHJpbmcoZmlsZSkpIHtcbiAgICAgICAgICAgIGZldGNoKGZpbGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3ApID0+IHJlc3AuYXJyYXlCdWZmZXIoKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZmlsZVJlYWRlci5yZXN1bHRcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSByZXNvbHZlKGRhdGEpXG4gICAgICAgICAgICAgICAgZWxzZSByZWplY3QoXCJJbnZhbGlkIGZvcm1hdFwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gcmVqZWN0XG4gICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpXG4gICAgICAgIH1cbiAgICB9KVxufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zcmMtYXBwLWxheW91dC1tb2R1bGVfTGF5b3V0YmFja2dyb3VuZF9OQ3RFZWksXG4uc3JjLWFwcC1sYXlvdXQtbW9kdWxlX0xheW91dGJhY2tncm91bmRfTkN0RWVpID4gKiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2FwcC9sYXlvdXQubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7SUFFSSxrQkFBa0I7SUFDbEIsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsWUFBWTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuTGF5b3V0YmFja2dyb3VuZCxcXG4uTGF5b3V0YmFja2dyb3VuZCA+ICoge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiTGF5b3V0YmFja2dyb3VuZFwiOiBgc3JjLWFwcC1sYXlvdXQtbW9kdWxlX0xheW91dGJhY2tncm91bmRfTkN0RWVpYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGh0bWwsXG5ib2R5LFxuI3Jvb3Qge1xuICAgIG1hcmdpbjogMDtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG59XG5cbmNvZGUge1xuICAgIGZvbnQtZmFtaWx5OiBzb3VyY2UtY29kZS1wcm8sIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcIkNvdXJpZXIgTmV3XCIsXG4gICAgICAgIG1vbm9zcGFjZTtcbn1cblxuI3RnZC1sb2dvLnZhbmlzaCB7XG4gICAgb3BhY2l0eTogMDtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuOXM7XG59XG5cbmhyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiBjdXJyZW50Q29sb3I7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGhlaWdodDogMXB4O1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcbiAgICAgICAgdG8gbGVmdCxcbiAgICAgICAgdHJhbnNwYXJlbnQsXG4gICAgICAgIGN1cnJlbnRDb2xvcixcbiAgICAgICAgY3VycmVudENvbG9yLFxuICAgICAgICB0cmFuc3BhcmVudFxuICAgICk7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7OztJQUdJLFNBQVM7SUFDVCxtQ0FBbUM7SUFDbkMsa0NBQWtDO0lBQ2xDLGtCQUFrQjtJQUNsQixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0k7aUJBQ2E7QUFDakI7O0FBRUE7SUFDSSxVQUFVO0lBQ1Ysd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksV0FBVztJQUNYLFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLFdBQVc7SUFDWDs7Ozs7O0tBTUM7QUFDTFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLFxcbmJvZHksXFxuI3Jvb3Qge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxufVxcblxcbmNvZGUge1xcbiAgICBmb250LWZhbWlseTogc291cmNlLWNvZGUtcHJvLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXFxcIkNvdXJpZXIgTmV3XFxcIixcXG4gICAgICAgIG1vbm9zcGFjZTtcXG59XFxuXFxuI3RnZC1sb2dvLnZhbmlzaCB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC45cztcXG59XFxuXFxuaHIge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgaGVpZ2h0OiAxcHg7XFxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcXG4gICAgICAgIHRvIGxlZnQsXFxuICAgICAgICB0cmFuc3BhcmVudCxcXG4gICAgICAgIGN1cnJlbnRDb2xvcixcXG4gICAgICAgIGN1cnJlbnRDb2xvcixcXG4gICAgICAgIHRyYW5zcGFyZW50XFxuICAgICk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvKipcbiAqIGJ1aWxkLXJlYWN0LXJvdXRlc1xuICpcbiAqIFdBUk5JTkchIHRoaXMgZmlsZSBoYXMgYmVlbiBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbiAqIFBsZWFzZSBkbyBub3QgZWRpdCBpdCBiZWNhdXNlIGl0IHdpbGwgcHJvYmFibHkgYmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogSWYgeW91IGZpbmQgYSBidWcgb3IgaWYgeW91IG5lZWQgYW4gaW1wcm92ZW1lbnQsIHBsZWFzZSBmaWxsIGFuIGlzc3VlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL3RvbG9rb2Jhbi9idWlsZC1yZWFjdC1yb3V0ZXMvaXNzdWVzXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCB7IFJvdXRlUGF0aCwgUm91dGVNYXRjaCB9IGZyb20gXCIuL3R5cGVzXCJcblxuXG5leHBvcnQgY29uc3QgUk9VVEVTOiBSZWNvcmQ8Um91dGVQYXRoLCBzdHJpbmdbXT4gPSB7XG4gICAgXCIvXCI6IFtcIi9cIl0sXG4gICAgXCIvZGF0YVwiOiBbXCIvZGF0YVwiXSxcbn1cblxuLyoqXG4gKiBVc2luZyB0aGlzIGZ1bmN0aW9uIHByZXZlbnRzIGRhbmdsaW5nIHJvdXRlcyBmcm9tIGJlaW5nXG4gKiBkaXNjb3ZlcmVkIGF0IHJ1bnRpbWUuIElmIHlvdSB0cnkgdG8gcmVhY2ggYSByb3V0ZSB0aGF0XG4gKiBkb2VzIG5vdCBleGlzdCBhbnltb3JlLCB5b3Ugd2lsbCBnZXQgYSBjb21waWxhdGlvbiBlcnJvci5cbiAqIEBwYXJhbSByb3V0ZSBDYW5vbmljIG5hbWUgb2YgdGhlIHRhcmdldCByb3V0ZS5cbiAqIEBwYXJhbSBwYXJhbXMgSWYgdGhlIGNhbm9uaWNhbCBuYW1lIGhhcyBgW25hbWVdYCBwYXJ0cyxcbiAqIHRoZXkgd2lsbCBiZSBoeWRyYXRlZCBieSB0aGUgYHBhcmFtc2AuXG4gKiBGb3IgaW5zdGFuY2UsIGBnb3RvKFwiL2FydGljbGUvW2lkXS9kZXRhaWxcIiwgMjcpYCB3aWxsIGxlYWRcbiAqIHRvIGBcIi9hcnRpY2xlLzI3L2RldGFpbFwiYC5cbiAqIEByZXR1cm5zIGBmYWxzZWAgaWYgd2UgYWxyZWFkeSBhcmUgb24gdGhpcyBwYWdlICh3aXRoIHRoZSBzYW1lIHBhcmFtcykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnb3RvKHJvdXRlOiBSb3V0ZVBhdGgsIC4uLnBhcmFtczogKHN0cmluZyB8IG51bWJlcilbXSkge1xuICAgIGNvbnN0IHBhdGggPSBoeWRyYXRlUm91dGUocm91dGUsIHBhcmFtcylcbiAgICBpZiAocGF0aCA9PT0gZ2V0Um91dGVDb250ZXh0KCkudmFsdWU/LnBhdGgpIHJldHVybiBmYWxzZVxuXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoXG4gICAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBTeW50YXhpYyBzdWdhciB0byByZXR1cm4gYCgpID0+IHsgZ290byguLi4pIH1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUdvdG8ocm91dGU6IFJvdXRlUGF0aCwgLi4ucGFyYW1zOiAoc3RyaW5nIHwgbnVtYmVyKVtdKSB7XG4gICAgcmV0dXJuICgpID0+IHsgZ290byhyb3V0ZSwgLi4ucGFyYW1zKSB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JvdXRlRXF1YWxUbyhyb3V0ZTogUm91dGVQYXRoLCAuLi5wYXJhbXM6IChzdHJpbmcgfCBudW1iZXIpW10pIHtcbiAgICByZXR1cm4gZ2V0Um91dGVDb250ZXh0KCkudmFsdWU/LnBhdGggPT09IGh5ZHJhdGVSb3V0ZShyb3V0ZSwgcGFyYW1zKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFJvdXRlRm9yUGF0aChwYXRoOiBzdHJpbmcpOiBSb3V0ZU1hdGNoIHwgbnVsbCB7XG4gICAgbGV0IGJlc3RNYXRjaDogUm91dGVNYXRjaCB8IG51bGwgPSBudWxsXG4gICAgZm9yIChjb25zdCBwYXJ0cyBvZiBPYmplY3QudmFsdWVzKFJPVVRFUykpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaFJvdXRlKHBhdGgsIHBhcnRzKVxuICAgICAgICBpZiAoIW1hdGNoKSBjb250aW51ZVxuXG4gICAgICAgIGlmIChtYXRjaC5kaXN0YW5jZSA9PT0gMCkgcmV0dXJuIG1hdGNoXG5cbiAgICAgICAgaWYgKCFiZXN0TWF0Y2ggfHwgbWF0Y2guZGlzdGFuY2UgPCBiZXN0TWF0Y2guZGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGJlc3RNYXRjaCA9IG1hdGNoXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlc3RNYXRjaFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hSb3V0ZShwYXRoOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCk6IFJvdXRlTWF0Y2ggfCBudWxsIHtcbiAgICBpZiAoIXBhcnRzKSByZXR1cm4gbnVsbFxuICAgIFxuICAgIGxldCBjdXJyZW50ID0gcGF0aFxuICAgIGNvbnN0IHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY3VycmVudC5sZW5ndGggPCAxKSByZXR1cm4gbnVsbFxuXG4gICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXVxuICAgICAgICBpZiAocGFydC5zdGFydHNXaXRoKFwiW1wiKSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHBhcnQuc3Vic3RyaW5nKDEsIHBhcnQubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIGNvbnN0IFtoZWFkLCB0YWlsXSA9IGRlY2FwaXRhdGUoY3VycmVudClcbiAgICAgICAgICAgIHBhcmFtc1tuYW1lXSA9IGhlYWRcbiAgICAgICAgICAgIGN1cnJlbnQgPSB0YWlsXG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5zdGFydHNXaXRoKHBhcnQpKSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5zdWJzdHJpbmcocGFydC5sZW5ndGggKyAxKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtYXRjaDogUm91dGVNYXRjaCA9IHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgcm91dGU6IHBhcnRzLmpvaW4oXCIvXCIpIGFzIFJvdXRlUGF0aCxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBkaXN0YW5jZTogY3VycmVudC5sZW5ndGgsXG4gICAgfVxuICAgIHJldHVybiBtYXRjaFxufVxuXG5mdW5jdGlvbiBkZWNhcGl0YXRlKHRleHQ6IHN0cmluZyk6IFtzdHJpbmcsIHN0cmluZ10ge1xuICAgIGNvbnN0IHBvcyA9IHRleHQuaW5kZXhPZihcIi9cIilcbiAgICBpZiAocG9zIDwgMCkgcmV0dXJuIFt0ZXh0LCBcIlwiXVxuXG4gICAgcmV0dXJuIFt0ZXh0LnN1YnN0cmluZygwLCBwb3MpLCB0ZXh0LnN1YnN0cmluZyhwb3MgKyAxKV1cbn1cblxuZnVuY3Rpb24gaHlkcmF0ZVJvdXRlKHJvdXRlOiBSb3V0ZVBhdGgsIHBhcmFtczogKHN0cmluZyB8IG51bWJlcilbXSkge1xuICAgIGNvbnN0IGl0ZW1zID0gUk9VVEVTW3JvdXRlXVxuICAgIGxldCBpID0gMFxuICAgIHJldHVybiBpdGVtc1xuICAgICAgICAubWFwKGl0ZW0gPT4gKGl0ZW0uY2hhckF0KDApID09PSBcIltcIiA/IHBhcmFtc1tpKytdIDogaXRlbSkpXG4gICAgICAgIC5qb2luKFwiL1wiKVxufVxuXG5jbGFzcyBSb3V0ZUNvbnRleHQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbGlzdGVuZXJzID0gbmV3IFNldDwoY29udGV4dDogUm91dGVNYXRjaCB8IG51bGwpID0+IHZvaWQ+KClcbiAgICBwcml2YXRlIF92YWx1ZTogUm91dGVNYXRjaCB8IG51bGwgPSBudWxsXG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzZWN1cml0eTogW1xuICAgICAgICAgICAgUm91dGVQYXRoLFxuICAgICAgICAgICAgKHBhdGg6IFJvdXRlUGF0aCwgaGFzaDogc3RyaW5nKSA9PiBQcm9taXNlPFJvdXRlUGF0aCB8IHVuZGVmaW5lZD5cbiAgICAgICAgXVtdXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLmV4dHJhY3RIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgICB0aGlzLnNldEhhc2goaGFzaCkudGhlbigoKSA9PlxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJoYXNoY2hhbmdlXCIsIHRoaXMuaGFuZGxlSGFzaENoYW5nZSlcbiAgICAgICAgKS5jYXRjaChleCA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBVbmFibGUgdG8gc2V0IGhhc2ggdG8gXCIke2hhc2h9XCI6YCwgZXgpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6ICh2YWx1ZTogUm91dGVNYXRjaCB8IG51bGwpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuYWRkKGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiAodmFsdWU6IFJvdXRlTWF0Y2ggfCBudWxsKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2V0SGFzaChoYXNoOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gZmluZFJvdXRlRm9yUGF0aChoYXNoKVxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3JvdXRlLCBhY2Nlc3NdIG9mIHRoaXMuc2VjdXJpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlLnJvdXRlLnN0YXJ0c1dpdGgocm91dGUpKSBjb250aW51ZVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYXV0aG9yaXplZFJvdXRlID0gYXdhaXQgYWNjZXNzKHZhbHVlLnJvdXRlLCBoYXNoKVxuICAgICAgICAgICAgICAgIGlmIChhdXRob3JpemVkUm91dGUgJiYgYXV0aG9yaXplZFJvdXRlICE9PSB2YWx1ZS5yb3V0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGZpbmRSb3V0ZUZvclBhdGgoYXV0aG9yaXplZFJvdXRlKVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSBicmVha1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbFxuICAgICAgICAgICAgICAgICAgICBnb3RvKHZhbHVlLnBhdGggYXMgUm91dGVQYXRoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlPy5yb3V0ZSA9PT0gdmFsdWU/LnJvdXRlKSByZXR1cm5cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIodmFsdWUpKVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlSGFzaENoYW5nZSA9IChldmVudDogSGFzaENoYW5nZUV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZEhhc2ggPSB0aGlzLmV4dHJhY3RIYXNoKGV2ZW50Lm9sZFVSTClcbiAgICAgICAgY29uc3QgbmV3SGFzaCA9IHRoaXMuZXh0cmFjdEhhc2goZXZlbnQubmV3VVJMKVxuICAgICAgICBjb25zdCBhYnNIYXNoID0gdGhpcy5lbnN1cmVBYnNvbHV0ZUhhc2gobmV3SGFzaCwgb2xkSGFzaClcbiAgICAgICAgaWYgKGFic0hhc2ggIT09IG5ld0hhc2gpIHtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIFwiXCIsIGAjJHthYnNIYXNofWApXG4gICAgICAgIH1cbiAgICAgICAgdm9pZCB0aGlzLnNldEhhc2goYWJzSGFzaClcbiAgICB9XG5cbiAgICBwcml2YXRlIGV4dHJhY3RIYXNoKHVybDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgVVJMKHVybCkuaGFzaFxuICAgICAgICBpZiAoIWhhc2gpIHJldHVybiBcIi9cIlxuXG4gICAgICAgIHJldHVybiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaC5zdWJzdHJpbmcoMSkgOiBoYXNoXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlbnN1cmVBYnNvbHV0ZUhhc2gobmV3SGFzaDogc3RyaW5nLCBvbGRIYXNoOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKG5ld0hhc2guc3RhcnRzV2l0aChcIi9cIikpIHJldHVybiBuZXdIYXNoXG5cbiAgICAgICAgbGV0IGhhc2ggPSBuZXdIYXNoXG4gICAgICAgIHdoaWxlIChoYXNoLnN0YXJ0c1dpdGgoXCIuL1wiKSkge1xuICAgICAgICAgICAgaGFzaCA9IGhhc2guc3Vic3RyaW5nKFwiLi9cIi5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aCA9IG9sZEhhc2guc3BsaXQoXCIvXCIpLmZpbHRlcih0aGlzLm5vbkVtcHR5KVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbmV3SGFzaC5zcGxpdChcIi9cIikpIHtcbiAgICAgICAgICAgIGlmIChpdGVtID09PSBcIi4uXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPiAwKSBwYXRoLnBvcCgpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGgucHVzaChpdGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgLyR7cGF0aC5maWx0ZXIodGhpcy5ub25FbXB0eSkuam9pbihcIi9cIil9YFxuICAgIH1cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgbm9uRW1wdHkgPSAoczogdW5rbm93bik6IHMgaXMgc3RyaW5nID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzID09PSBcInN0cmluZ1wiICYmIHMudHJpbSgpLmxlbmd0aCA+IDBcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoKTogUm91dGVNYXRjaCB8IG51bGwge1xuICAgIGNvbnN0IFtwYXJhbXMsIHNldFBhcmFtc10gPSBSZWFjdC51c2VTdGF0ZShnZXRSb3V0ZUNvbnRleHQoKS52YWx1ZSlcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGUgPSAodmFsdWU6IFJvdXRlTWF0Y2ggfCBudWxsKSA9PiB7XG4gICAgICAgICAgICBzZXRQYXJhbXModmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgZ2V0Um91dGVDb250ZXh0KCkuYWRkTGlzdGVuZXIodXBkYXRlKVxuICAgICAgICByZXR1cm4gKCkgPT4gZ2V0Um91dGVDb250ZXh0KCkucmVtb3ZlTGlzdGVuZXIodXBkYXRlKVxuICAgIH0sIFtdKVxuICAgIHJldHVybiBwYXJhbXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlUGFyYW1zPFQgZXh0ZW5kcyBzdHJpbmc+KFxuICAgIC4uLm5hbWVzOiBUW11cbik6IFBhcnRpYWw8UmVjb3JkPFQsIHN0cmluZz4+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlUm91dGVDb250ZXh0KClcbiAgICBjb25zdCBwYXJhbXM6IFBhcnRpYWw8UmVjb3JkPFQsIHN0cmluZz4+ID0ge31cbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udGV4dC5wYXJhbXNbbmFtZV1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHBhcmFtc1tuYW1lXSA9IHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVQYXJhbUFzU3RyaW5nKG5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlID0gXCJcIik6IHN0cmluZyB7XG4gICAgY29uc3QgcGFyYW1zID0gdXNlUm91dGVQYXJhbXMobmFtZSlcbiAgICByZXR1cm4gcGFyYW1zW25hbWVdID8/IGRlZmF1bHRWYWx1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVQYXJhbUFzSW50KG5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlID0gMCk6IG51bWJlciB7XG4gICAgY29uc3QgcGFyYW1zID0gdXNlUm91dGVQYXJhbXMobmFtZSlcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KHBhcmFtc1tuYW1lXSA/PyBcIlwiLCAxMClcbiAgICByZXR1cm4gTnVtYmVyLmlzTmFOKHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZVBhcmFtQXNGbG9hdChuYW1lOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZSA9IDApOiBudW1iZXIge1xuICAgIGNvbnN0IHBhcmFtcyA9IHVzZVJvdXRlUGFyYW1zKG5hbWUpXG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KHBhcmFtc1tuYW1lXSA/PyBcIlwiKVxuICAgIHJldHVybiBOdW1iZXIuaXNOYU4odmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWVcbn1cblxuLyoqXG4gKiBQYXJzZSBwYXJhbSBhcyBKU09OIHN0cmluZ3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZVBhcmFtPFQ+KFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBkZWZhdWx0VmFsdWU6IFQsXG4gICAgdHlwZUd1YXJkOiAoZGF0YTogdW5rbm93bikgPT4gZGF0YSBpcyBUXG4pOiBUIHtcbiAgICBjb25zdCBwYXJhbXMgPSB1c2VSb3V0ZVBhcmFtcyhuYW1lKVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBkZWNvZGVVUklDb21wb25lbnQocGFyYW1zW25hbWVdID8/IFwiXCIpXG4gICAgICAgIGNvbnN0IHZhbHVlOiB1bmtub3duID0gSlNPTi5wYXJzZSh0ZXh0KVxuICAgICAgICByZXR1cm4gdHlwZUd1YXJkKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlXG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICAgIH1cbn1cblxuLy8gSW5pdGlhbGl6ZSBSb3V0ZUNvbnRleHQgd2l0aCBwb3RlbnRpYWwgYWNjZXNzIGZpbGVzXG5jb25zdCBTRUNVUklUWTogW1JvdXRlUGF0aCwgKHBhdGg6IFJvdXRlUGF0aCwgaGFzaDogc3RyaW5nKSA9PiBQcm9taXNlPFJvdXRlUGF0aCB8IHVuZGVmaW5lZD5dW10gPSBbXG5cbl1cbmxldCBjdXJyZW50Um91dGVDb250ZXh0OiBudWxsIHwgUm91dGVDb250ZXh0ID0gbnVsbFxuXG5mdW5jdGlvbiBnZXRSb3V0ZUNvbnRleHQoKSB7XG4gICAgaWYgKCFjdXJyZW50Um91dGVDb250ZXh0KSBjdXJyZW50Um91dGVDb250ZXh0ID0gbmV3IFJvdXRlQ29udGV4dChTRUNVUklUWSlcbiAgICByZXR1cm4gY3VycmVudFJvdXRlQ29udGV4dFxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwic2NyL1wiICsgY2h1bmtJZCArIFwiLlwiICsge1wiMjdcIjpcIjc1OTdjZWJmM2NlNzU3NDdlYTQzXCIsXCI1ODJcIjpcIjM3NjQxYTA5YTVkMDc3MDJhNjRmXCIsXCI5NzhcIjpcIjE5YTU1YzI4ZDM4ZGQxM2IzYjljXCJ9W2NodW5rSWRdICsgXCIuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJylcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC9eYmxvYjovLCBcIlwiKS5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ1MjQ6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtoZGY1X2NpcmN1aXRzXCJdID0gc2VsZltcIndlYnBhY2tDaHVua2hkZjVfY2lyY3VpdHNcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzUxNV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDM3NykpKVxuX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsb2NhbHMiLCJ1bmRlZmluZWQiLCJMYXlvdXRCYWNrZ3JvdW5kIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJMYXlvdXRiYWNrZ3JvdW5kIiwiZGF0YSIsInVzZVZhbHVlIiwiZGlzcGxheSIsInBsYWNlSXRlbXMiLCJjb2xvciIsInBhZGRpbmciLCJmbGV4RGlyZWN0aW9uIiwib25DbGljayIsInZhcmlhbnQiLCJpY29uIiwidGhlbiIsInZhbHVlIiwiUGFnZTAiLCJQYWdlMSIsIkFwcCIsImxhbmciLCJjb250ZXh0IiwiZmIiLCJseTAiLCJwZzAiLCJseTEiLCJwZzEiLCJSb3V0ZSIsInBhdGgiLCJQYWdlIiwiTGF5b3V0IiwiZmFsbGJhY2siLCJUZW1wbGF0ZSIsIm1hdGNoIiwiZGlzdGFuY2UiLCJlbGVtZW50IiwicGFyYW1zIiwiaW5pdGlhbExhbmciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJhdG9taWNMYW5ndWFnZSIsIkEiLCJzdG9yYWdlIiwiaWQiLCJndWFyZCIsIkxhdW5jaGVyIiwic2V0TGFuZyIsInVzZVN0YXRlIiwiYXJnIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJnZXQiLCJsZW5ndGgiLCJzcGxhc2giLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0VGltZW91dCIsInBhcmVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVNwbGFzaFNjcmVlbiIsImFwcGx5IiwiY29udGFpbmVyIiwicmVuZGVyIiwic3RhcnQiLCJTdGF0ZSIsImdyb3Vwc1RvRGlzcGxheSIsIkhERjVHcm91cCIsImZyb21BcnJheUJ1ZmZlciIsImZpbGVuYW1lIiwiZ3JvdXAiLCJyb290IiwibmFtZSIsImtleXMiLCJpdGVtIiwidGhpcyIsImF0dHJzIiwic3RydWN0dXJlZENsb25lIiwiZnVsbFBhdGgiLCJqb2luIiwiRXJyb3IiLCJoYXMiLCJwYXRoSXRlbSIsImluY2x1ZGVzIiwibG9hZEhERjUiLCJmaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmZXRjaCIsInJlc3AiLCJhcnJheUJ1ZmZlciIsImNhdGNoIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJBcnJheUJ1ZmZlciIsIm9uZXJyb3IiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImxvYWRBcnJheUJ1ZmZlciIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsIlJPVVRFUyIsImdvdG8iLCJyb3V0ZSIsIml0ZW1zIiwiaSIsIm1hcCIsImNoYXJBdCIsImh5ZHJhdGVSb3V0ZSIsImdldFJvdXRlQ29udGV4dCIsImhhc2giLCJmaW5kUm91dGVGb3JQYXRoIiwiYmVzdE1hdGNoIiwicGFydHMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJtYXRjaFJvdXRlIiwiY3VycmVudCIsInBhcnQiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwiaGVhZCIsInRhaWwiLCJkZWNhcGl0YXRlIiwidGV4dCIsInBvcyIsImluZGV4T2YiLCJSb3V0ZUNvbnRleHQiLCJjb25zdHJ1Y3RvciIsInNlY3VyaXR5IiwibGlzdGVuZXJzIiwiU2V0IiwiX3ZhbHVlIiwiaGFuZGxlSGFzaENoYW5nZSIsImV2ZW50Iiwib2xkSGFzaCIsImV4dHJhY3RIYXNoIiwib2xkVVJMIiwibmV3SGFzaCIsIm5ld1VSTCIsImFic0hhc2giLCJlbnN1cmVBYnNvbHV0ZUhhc2giLCJnbG9iYWxUaGlzIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInNldEhhc2giLCJub25FbXB0eSIsInMiLCJ0cmltIiwiaHJlZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJleCIsImNvbnNvbGUiLCJlcnJvciIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImRlbGV0ZSIsImFjY2VzcyIsImF1dGhvcml6ZWRSb3V0ZSIsImZvckVhY2giLCJ1cmwiLCJVUkwiLCJzcGxpdCIsImZpbHRlciIsInBvcCIsInVzZVJvdXRlQ29udGV4dCIsInNldFBhcmFtcyIsInVwZGF0ZSIsIlNFQ1VSSVRZIiwiY3VycmVudFJvdXRlQ29udGV4dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm0iLCJPIiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJmdWxmaWxsZWQiLCJqIiwiZXZlcnkiLCJrZXkiLCJzcGxpY2UiLCJyIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZiIsImUiLCJjaHVua0lkIiwiYWxsIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1IiwiZyIsIkZ1bmN0aW9uIiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwibCIsImRvbmUiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJiaW5kIiwidHlwZSIsInRhcmdldCIsImFwcGVuZENoaWxkIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsInRlc3QiLCJyZXBsYWNlIiwicCIsImluc3RhbGxlZENodW5rcyIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwibWVzc2FnZSIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==